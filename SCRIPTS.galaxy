    //==================================================================================================
    // 
    // Generated Map Script
    // 
    // Name:   MineralZ Evolution Updated
    // 
    //==================================================================================================
    include "TriggerLibs/NativeLib"

    //--------------------------------------------------------------------------------------------------
    // Global Structures
    //--------------------------------------------------------------------------------------------------
    struct gs_Speciality {
        int lv_level;
        string lv_behaviour;
        text lv_name;
        string lv_icon;
        text lv_description;
    };

    struct gs_Color {
        int lv_highNight;
        string lv_message2;
        string lv_message;
        color lv_color;
        string lv_icon;
        text lv_name;
    };

    struct gs_Skill {
        int lv_level;
        string lv_ability;
        string lv_icon;
        text lv_name;
        text lv_description;
    };

    struct gs_SecondarySkill {
        string lv_ability;
        string lv_icon;
        text lv_name;
        text lv_description;
        text lv_requirements;
    };

    struct gs_Prestige {
        int lv_prestigelevel;
        string lv_behavior;
        string lv_icon;
        text lv_name;
        text lv_description;
    };

    struct gs_Skin {
        int lv_night;
        string lv_skin;
        string lv_comportement;
        string lv_icon;
        text lv_name;
        text lv_description;
        text lv_difficulty;
    };

    struct gs_Role {
        int lv_wins;
        string lv_upgrade;
        string lv_masteryicon;
        string lv_role;
        string lv_roleicon;
        text lv_name;
        text lv_description;
    };

    struct gs_CosmeticSkinsPrestige {
        int lv_PrestigeRequirement;
        int lv_Button;
        int lv_ButtonImage;
        string lv_skin;
        string lv_icon;
        string lv_bankkey;
        text lv_name;
        text lv_description;
        bool lv_isFlyer;
        bool lv_RequirementException;
    };

    struct gs_CosmeticSkinsEvent {
        int lv_Button;
        int lv_ButtonImage;
        string lv_skin;
        string lv_icon;
        string lv_bankkey;
        text lv_name;
        text lv_description;
        string[51] lv_EventHandlers;
        bool lv_isFlyer;
    };

    struct gs_DonatorsList {
        string[101] lv_DonatorsHandlers;
        int lv_DonateLevel;
        string[101] lv_DonatorsProbeName;
    };

    struct gs_DonorCustomSkins {
        bool lv_unlockedByDefaultForAuthor;
        string lv_authorHandler;
        text lv_name;
        text lv_preUnlockRequirementDescription;
        text lv_postUnlockRequirementDescription;
        text lv_authorCredits;
        string lv_icon;
        string lv_skin;
        string lv_bankStorageSection;
        string lv_bankStorageKey;
        int lv_skinAchievementDialog;
        int lv_button;
        int lv_buttonImage;
        bool lv_isFlyer;
    };

    struct gs_DonorSkins {
        string lv_skin;
        string lv_icon;
        text lv_name;
        bool lv_isFlyer;
        int lv_skinDonorLevel;
        int lv_buttonImage;
        int lv_button;
        text lv_requirementDescription;
        string lv_bankKey;
    };

    struct gs_DonorSkinAdditions {
        string lv_skinAddition;
        string lv_icon;
        text lv_name;
        int lv_skinDonorLevel;
        int lv_buttonImage;
        int lv_button;
        text lv_requirementDescription;
    };



    //--------------------------------------------------------------------------------------------------
    // Global Variables
    //--------------------------------------------------------------------------------------------------
    gs_Speciality[11] gv_specialties;
    gs_Color[21] gv_colors;
    gs_Skill[21] gv_skills;
    gs_SecondarySkill[21] gv_secondaryskills;
    gs_Prestige[21] gv_prestiges;
    gs_Skin[14] gv_skins;
    gs_Role[7][7] gv_roles;
    gs_CosmeticSkinsPrestige[51] gv_CosmeticSkinPrestige;
    gs_CosmeticSkinsEvent[51] gv_CosmeticSkinEvent;
    gs_DonatorsList[10] gv_Donators;
    gs_DonorCustomSkins[10] gv_DonorCustomSkins; 
    gs_DonorSkins[20] gv_DonorSkins;
    gs_DonorSkinAdditions[10] gv_skinAdditions;
    int[11] gv_objectSpecialImage;
    int[11] gv_objectSpecialBtn;
    string[11] gv_specialityChoose;
    int[21] gv_objectColorBTN;
    int[11] gv_objectSkillBTN;
    int[11] gv_objectSecondarySkillBTN;
    int[15] gv_objectPrestigeBTN;
    int[7][7] gv_objectRoleBTN;
    bool[8] gv_votedHardcore;
    bool[8] gv_votedrandomizer;
    bool[8] gv_votednightshift;
    bool[8] gv_votedmutators;
    int[15] gv_objectSkinBTN;
    string[11][7] gv_colorChoose;
    string[11] gv_skillChoose;
    string[11] gv_SecondaryskillChoose;
    bool[8] gv_isbanned;
    bool[8] gv_isadmin;
    int[15] gv_skinChoose;
    int[8] gv_prestigeChoose;
    int[8] gv_roleChoose;
    int gv_damageBonus;
    bool[8] gv_saved;
    string[5] gv_minerals;
    int[8] gv_kills;
    int[8] gv_lives;
    int gv_nbJoueurs;
    int gv_nbJoueursvar;
    int gv_dialog;
    int gv_dialogversusthething;
    int[8] gv_roleimage;
    int[21] gv_specialityimage;
    int[21] gv_skillimage;
    int[21] gv_secondaryskillimage;
    int[21] gv_workerimage;
    int[21] gv_prestigeimage;
    int gv_dialogMap;
    int gv_dialogCustom;
    timer gv_chrono;
    string[501] gv_comportements;
    int gv_tableau;
    int gv_tableauressources;
    unit[8] gv_probe;
    bool gv_used;
    bool[8] gv_inBase;
    int[19] gv_corePlayer;
    int[17] gv_playerLine;
    int gv_tempsChronoSt;
    int gv_tempsChronoSide;
    bool gv_day;
    timer gv_chronoSt;
    timer gv_versuschronoSt;
    int gv_chronoTexte;
    int gv_chronoTexteversus;
    int gv_chronoTexteversusThing;
    fixed gv_tempsJourInitial;
    fixed gv_tempsJour;
    fixed gv_tempsNuit;
    int gv_temps;
    int gv_dayNb;
    fixed[501] gv_zergLife;
    int gv_levelLimit;
    int gv_zergTypeNb;
    int gv_zergTypeMin;
    int gv_zergLimit;
    string[101] gv_zergTypes;
    string[101] gv_zergBoss;
    int gv_zergPlayer;
    playergroup gv_zergGroupPlayer;
    playergroup gv_probeGroupPlayer;
    int gv_boutonReadyDialogue;
    int gv_dialogButtonReady;
    int gv_variableYesrdy;
    int[8] gv_readyYesfait;
    unit gv_hC3A9lios;
    int gv_zeratul;
    point[8] gv_pointatt;
    unit[8] gv_focustarget;
    int[8] gv_varMinerals;
    string[101] gv_variablesTypeUnitC3A9s;
    string[8] gv_BossArray;
    int[201] gv_balisetxt;
    int[8] gv_variableTrade;
    bool[8] gv_OpenedTrade;
    int[8] gv_bLUE;
    int[8] gv_vESPEN;
    int[8] gv_rED;
    int[8] gv_pLASMA;
    int gv_oK;
    int gv_sEE;
    int gv_worldmarketdialogue;
    int gv_trademenuimproveddialogue;
    int[8] gv_builder1;
    unit gv_overmind;
    unit gv_wallbar;
    int gv_nBdiamondwallupgrades;
    int gv_nBgeneratorsupgrades;
    int gv_nBhealersupgrades;
    int gv_nBCannonsupgrades;
    int[8] gv_colorvar;
    int gv_chronodialogue;
    int gv_chronolabel;
    int[8] gv_ressourcesdialogue;
    bool[6][8] gv_voteddifficulty;
    int[8] gv_labelbleu;
    int[8] gv_labelred;
    int[8] gv_labelvert;
    int[8] gv_labelplasma;
    int[8] gv_uI;
    int gv_votekickDialogue;
    int gv_dialogButtonnobody;
    int [8] gv_dialogButtonvotekick;
    int[8] gv_variablevotekick;
    int[8] gv_variableAdC3A9jaVK;
    int gv_timevk;
    int gv_votedifficultyModeDialogue;
    int gv_pickroledialogue;
    int gv_votemutatorModeDialogue;
    int gv_difficultymodeTextDialogue;
    int gv_mutatormodeTextDialogue;
    int gv_dialogButtonVoteImpossible;
    int gv_dialogButtonVotenormal;
    int gv_dialogButtonVoteelite;
    int gv_dialogButtonVotenightmare;
    int gv_dialogButtonVotehell;
    int gv_dialogButtonVoteeasy;
    int gv_dialogButtonVotebossrandomizer;
    int gv_dialogButtonVotenightshift;
    int gv_dialogButtonVotemutators;
    int gv_dialogButtonVoteHardcore;
    int gv_variablevoteelite;
    int gv_variablevoteeasy;
    int gv_variablevotenormal;
    int gv_variablevotenightmare;
    int gv_variablevotehell;
    int gv_variablevoteimpossible;
    int gv_variablevotenightshift;
    int gv_variablevotebossrandomizer;
    int gv_variablevotemutators;
    int gv_variablevoteHardcore;
    int gv_voterestartdialog;
    int gv_restarttextDialogue;
    int gv_dialogButtonVoteYES;
    int gv_dialogButtonVoteNO;
    int gv_variablevoterestart;
    int gv_cODE1;
    int gv_cODE2;
    int gv_cODE3;
    int gv_cODE4;
    int gv_cODEOK1;
    int gv_cODEOK2;
    int gv_cODEOK3;
    int gv_cODEOK4;
    int gv_stonetiming;
    int gv_banelingtiming;
    bool[8] gv_prestigeused;
    bool[8] lib1_gv_specialEffects;
    fixed gv_winbonus; // Bonus wins from higher difficulties / mutators / event contests
    int[3] lib1_gv_votesTotal;
    int[8] lib1_gv_selectedVote;
    bool lib1_gv_votes;
    int lib1_gv_voteDialog;
    int[4] lib1_gv_voteButton;
    unitgroup[8] gv_hallucinationprobegroup;
    bool[8] gv_showcrazy;
    int[6] gv_corecolor;
    string gv_GameMode;
    string gv_difficulty;
    bool gv_onetimepopup;
    bool gv_enabledshare;
    int gv_enabledshareDay;
    string[6] gv_lobbyrole;
    bool gv_cooldownApplied;
    int[8] gv_TradeButtonResource;
    int[8] gv_TradeButtonAmount;
    int[8] gv_TradeButtonPlayer;
    int gv_TradeButtonSend;
    int[8] gv_TradePlayer;
    int[8] gv_TradePlayerChoice;
    int[8] gv_TradeAmountChoice;
    bool[6][5] gv_TradeSendResourceType;
    bool gv_hybridbehemothmessage;
    bool gv_hybridnemesismessage;
    int gv_destroyerportraitdead;
    int gv_win2levels;
    int gv_win1levels;
    int[8] gv_dnapicked;
    int[8] gv_dnapicked2;
    bool[8] gv_dnavalid;
    int[6] gv_difficultydamage;
    int[6] gv_difficultyExtraMobsSpawnAmount;
    int gv_selectedDifficultyNumber;
    bool gv_hiddeneffects;
    bool gv_godmodesandbox;
    string gv_gamemodestring;
    int gv_closetrade;
    int[8] gv_modifiersvotedbyplayer;
    int gv_difficultyminmutators;
    int gv_difficultymaxmutators;
    bool[101] gv_mutatorEnabled;
    int gv_mutatordialogindex;
    color[101] gv_mutatorcolor;
    text[101] gv_mutatorname;
    text[101] gv_mutatordescription;
    int[101] gv_mutatorbonuslevels;
    int[101] gv_mutatorbonuswins;
    string[101] gv_mutatorimage;
    int[101] gv_mutatortype;
    bool[101] gv_mutatorWheelAcceptable;
    string[101] gv_mutatorupgrade;
    int gv_mutatorstotal;
    int gv_mutatorSideDialog;
    int[101] gv_mutatorselectedimage;
    int[101] gv_mutatorselectedimageframe;
    bool[2] gv_relicspawndisabled;
    playergroup gv_probeplayers;
    int gv_theThingPlayer;
    int gv_DialogVersusChooseDialog;
    int gv_DialogVersusButtonProbe;
    int gv_DialogVersusButtonThing;
    int[8] gv_playerside; // 1 - Default, Probe; 2 - The Thing
    bool[8] gv_variableVotedSide;
    playergroup gv_ThingGroupVoted;
    playergroup gv_ProbeGroupVoted;
    unit gv_TheThingHero;
    int gv_zergincome;
    bool gv_gamestarted;
    bool gv_versusthingisdead;
    bank[10] gv_playerbanks;
    fixed gv_versushitmultiplierminerals; // Made for Text referrence to Galaxy Variable
    fixed gv_versushitmultipliermineralsDay; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont2multiplierforspark; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont3multiplierforspark; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont4multiplierforspark; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont5multiplierforspark; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont6multiplierforspark; // Made for Text referrence to Galaxy Variable
    int gv_versusevolutiont7multiplierforspark; // Made for Text referrence to Galaxy Variable
    bool[10] gv_infestedbuildings;
    bool gv_MutatorWheelOfMisfortuneEnabled;
    bool gv_MutatorsEnabled;
    int gv_totalestimatedlevels; // For "Estimated levels / wins" message
    int gv_mutatorbonusestimatedlevels; // For Victory reward
    int gv_mutatorbonusestimatedwins; // For Victory reward
    int gv_totalestimatedwins; // For "Estimated levels / wins" message
    bool gv_TempsEnabled;
    bool gv_ChronoEach1SecEnabled;
    bool gv_AccumulativeReservesEnabled;
    bool[8] gv_isEnabledEmote;
    timer[8] gv_EmoteCooldownTimer;
    fixed gv_EmoteCooldownDuration;
    bool gv_enabledreset;
    bool[10] gv_attempted_reset;
    unit gv_VersusZergUpgrades;
    bool gv_versusresearch_hybridbehemoth;
    bool gv_versusresearch_hybriddestroyer;
    bool gv_versusresearch_hybridnemesis;
    bool gv_versusresearch_groundinvasion;
    bool gv_versusresearch_airinvasion;
    bool gv_versusresearch_bossinvasion;
    int gv_versusResearchZergLimitPerUpgrade; // 10, used for text reference on button
    int gv_versusTotalBonusZergLimit;
    bool gv_versusrandomevents;
    fixed gv_versusrandomeventchanceNight;
    fixed gv_versusrandomeventchanceDay;
    int gv_totalcolors;
    int gv_totalskills;
    int gv_totalsecondaryskills;
    int gv_totalprestiges;
    int gv_totalskins;
    int gv_totalspecialities;
    int[10] gv_bestworkerforplayer;
    region[3][10] gv_PortableZoneArtifactZones;
    int[3] gv_PortableZoneArtifactZonesRegionsCount;
    region gv_StatuePortalRegion;
    region[3] gv_PortalsEntersRegions;
    region[3] gv_PortalsLeaversRegions;
    unit[3] gv_PortalsEntersUnits;
    unit[3] gv_PortalsLeaversUnits;
    bool[10] gv_EnteredPortal;
    bool[10][10] gv_CanLeave;
    timer gv_StatuePortalsExistTimer;
    timer gv_VersusZergEventNightBuffTimer;
    bool[3] gv_VersusZergEventNightBuffActive;
    int gv_CosmeticSkinDialog;
    string[81] gv_personalskinHandlersEU;
    string[81] gv_personalskinHandlersNA;
    string[81] gv_personalskin1Skins;
    string[81] gv_personalskin2Skins;
    bool[51] gv_personalskin1IsFlyer;
    bool[51] gv_personalskin2IsFlyer;
    int gv_TotalPrestigeSkins;
    int gv_TotalEventSkins;
    int gv_TotalCustomSkins;
    int gv_TotalDonorSkins;
    int gv_CosmeticSkinDefaultButton;
    int gv_personalskin1Button;
    int gv_personalskin2Button;
    bool[11] gv_openedskinsdialog;
    int gv_CosmeticSkinDialogSaveButton;
    int gv_CosmeticSkinDialogCloseButton;
    string[11] gv_CustomSkinChoice;
    int gv_TotalPersonalSkins1;
    int gv_TotalPersonalSkins2;
    bool[7] gv_rainbowHalo;
    bool[7] gv_rainbowColor;
    int[7] gv_DonateLevelPlayer;
    string[7] gv_DonateProbeNamePlayer;
    text[7] gv_donateLevelTips;
    string[7] gv_donateLevelTipsTitles;
    int[7] gv_customSkin4KillCounter;
    int gv_customSkin5LaserCounter;
    bool gv_customSkin1GodliskSpawn;
    int gv_customSkin1GodliskSpawnDay;
    int[7] gv_passivePrestigeLevel;
    bool gv_disableAchievements;
    int gv_totalroles;
    bool[7] gv_isTester;


    void InitGlobals () {
        int init_i;
        int init_j;

        for (init_i = 0; init_i <= 20; init_i += 1) {
            gv_colors[init_i].lv_message2 = "SetShowing 1";
            gv_colors[init_i].lv_message = "SetShowing 1";
            gv_colors[init_i].lv_color = Color(0,0,0);
        }
        for (init_i = 0; init_i < 14; init_i += 1) {
            gv_skins[init_i].lv_skin = "SetShowing 1";
        }
        for (init_i = 0; init_i <= 10; init_i += 1) {
            gv_objectSpecialImage[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 10; init_i += 1) {
            gv_objectSpecialBtn[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 20; init_i += 1) {
            gv_objectColorBTN[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 10; init_i += 1) {
            gv_objectSkillBTN[init_i] = c_invalidDialogControlId;
            gv_objectSecondarySkillBTN[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 13; init_i += 1) {
            gv_objectPrestigeBTN[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 14; init_i += 1) {
            gv_objectSkinBTN[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 10; init_i += 1) {
            for (init_j = 0; init_j <= 5; init_j += 1) {
                gv_colorChoose[init_i][init_j] = "SetShowing 1";
            }
            gv_colorChoose[init_i][7] = "SetShowing 1";
        }
        for (init_i = 0; init_i <= 3; init_i += 1) {
            lib1_gv_voteButton[init_i] = c_invalidDialogControlId;
        }
        gv_dialog = c_invalidDialogId;
        gv_dialogversusthething = c_invalidDialogId;
        gv_dialogMap = c_invalidDialogId;
        gv_dialogCustom = c_invalidDialogId;
        gv_DialogVersusChooseDialog = c_invalidDialogId;
        gv_DialogVersusButtonProbe = c_invalidDialogControlId;
        gv_DialogVersusButtonThing = c_invalidDialogControlId;
        gv_chrono = TimerCreate();
        gv_tableau = c_boardNone;
        gv_tableauressources = c_boardNone;
        gv_tempsChronoSt = 100;
        gv_day = true;
        gv_chronoSt = TimerCreate();
        gv_versuschronoSt = TimerCreate();
        gv_StatuePortalsExistTimer = TimerCreate();
        gv_VersusZergEventNightBuffTimer = TimerCreate();
        gv_chronoTexte = c_invalidDialogControlId;
        gv_chronoTexteversus = c_invalidDialogControlId;
        gv_chronoTexteversusThing = c_invalidDialogControlId;
        gv_tempsJourInitial = 120.0;
        // gv_tempsJour = 60.0;
        // gv_tempsNuit = 170.0;
        gv_tempsJour = 40.0;
        gv_tempsNuit = 120.0;
        gv_dayNb = 1;
        gv_zergTypeNb = 1;
        gv_zergTypeMin = 1;
        gv_winbonus = 0.0;
        gv_zergLimit = 22;
        gv_zergPlayer = 15;
        gv_enabledshare = false;
        gv_onetimepopup = false;
        gv_versushitmultiplierminerals = 3.0;
        gv_versushitmultipliermineralsDay = 1.5;
        gv_zergGroupPlayer = PlayerGroupEmpty();
        gv_probeGroupPlayer = PlayerGroupEmpty();
        gv_ProbeGroupVoted = PlayerGroupEmpty();
        gv_ThingGroupVoted = PlayerGroupEmpty();
        gv_boutonReadyDialogue = c_invalidDialogId;
        gv_dialogButtonReady = c_invalidDialogControlId;
        gv_CosmeticSkinDialog = c_invalidDialogId;
        gv_CosmeticSkinDefaultButton = c_invalidDialogControlId;
        gv_personalskin1Button = c_invalidDialogControlId;
        gv_personalskin2Button = c_invalidDialogControlId;
        gv_CosmeticSkinDialogSaveButton = c_invalidDialogControlId;
        gv_CosmeticSkinDialogCloseButton = c_invalidDialogControlId;
        gv_zeratul = 1;
        gv_hybridbehemothmessage = false;
        gv_hybridnemesismessage = false;
        gv_hiddeneffects = false;
        gv_enabledreset = true;

        gv_versusevolutiont2multiplierforspark = 1;
        gv_versusevolutiont3multiplierforspark = 2;
        gv_versusevolutiont4multiplierforspark = 4;
        gv_versusevolutiont5multiplierforspark = 5;
        gv_versusevolutiont6multiplierforspark = 15;
        gv_versusevolutiont7multiplierforspark = 15;
        gv_versusResearchZergLimitPerUpgrade = 10;

        gv_EmoteCooldownDuration = 15.0;


        for (init_i = 0; init_i < 5; init_i += 1) {
            gv_TradeSendResourceType[0][init_i] = false;
            gv_TradeSendResourceType[1][init_i] = false;
            gv_TradeSendResourceType[2][init_i] = false;
            gv_TradeSendResourceType[3][init_i] = false;
            gv_TradeSendResourceType[4][init_i] = false;
            gv_TradeSendResourceType[5][init_i] = false;
        }
        for (init_i = 0; init_i <= 6; init_i += 1) {
            gv_objectRoleBTN[0][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[1][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[2][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[3][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[4][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[5][init_i] = c_invalidDialogControlId;
            gv_objectRoleBTN[6][init_i] = c_invalidDialogControlId;

        }
        for (init_i = 1; init_i <= 7; init_i += 1) {
            gv_votedrandomizer[init_i] = false;
            gv_votednightshift[init_i] = false;
            gv_votedmutators[init_i] = false;
            gv_votedHardcore[init_i] = false;
            gv_prestigeused[init_i] = false;
            gv_saved[init_i] = true;
            gv_showcrazy[init_i] = true;
            gv_voteddifficulty[0][init_i] = false;
            gv_voteddifficulty[1][init_i] = false;
            gv_voteddifficulty[2][init_i] = false;
            gv_voteddifficulty[3][init_i] = false;
            gv_voteddifficulty[4][init_i] = false;
            gv_voteddifficulty[5][init_i] = false;
            gv_roleimage[init_i] = c_invalidDialogControlId;
            gv_OpenedTrade[init_i] = false;
            gv_dialogButtonvotekick[init_i] = c_invalidDialogControlId;

            gv_pointatt[init_i] = PointFromId(129);
            gv_varMinerals[init_i] = RandomInt(1, 4);
            gv_ressourcesdialogue[init_i] = c_invalidDialogId;
            gv_labelbleu[init_i] = c_invalidDialogControlId;
            gv_labelred[init_i] = c_invalidDialogControlId;
            gv_labelvert[init_i] = c_invalidDialogControlId;
            gv_labelplasma[init_i] = c_invalidDialogControlId;
            gv_dnapicked[init_i] = 0;
            gv_dnapicked2[init_i] = 0;
            gv_dnavalid[init_i] = false;

            gv_rED[init_i] = c_invalidDialogControlId;
            gv_pLASMA[init_i] = c_invalidDialogControlId;
            gv_vESPEN[init_i] = c_invalidDialogControlId;
            gv_bLUE[init_i] = c_invalidDialogControlId;
            gv_variableTrade[init_i] = 1;
            gv_colorvar[init_i] = 1;

            gv_lives[init_i] = 2;
            lib1_gv_specialEffects[init_i] = true;
            gv_playerside[init_i] = 1;
            gv_variableVotedSide[init_i] = false; // Versus - Unvoted Side by default

            gv_TradeButtonAmount[init_i] = c_invalidDialogControlId;
            gv_TradeButtonResource[init_i] = c_invalidDialogControlId;
            gv_TradeButtonPlayer[init_i] = c_invalidDialogControlId;
            gv_TradeAmountChoice[init_i] = 0;
            gv_TradePlayerChoice[init_i] = 0;

            gv_isEnabledEmote[init_i] = true;
            gv_EmoteCooldownTimer[init_i] = TimerCreate();
        }

        for (init_i = 1; init_i <= 20; init_i += 1) {
            gv_specialityimage[init_i] = c_invalidDialogControlId;
            gv_skillimage[init_i] = c_invalidDialogControlId;
            gv_secondaryskillimage[init_i] = c_invalidDialogControlId;
            gv_workerimage[init_i] = c_invalidDialogControlId;
            gv_prestigeimage[init_i] = c_invalidDialogControlId;
        }
        for (init_i = 0; init_i <= 200; init_i += 1) {
            gv_balisetxt[init_i] = c_textTagNone;
        }
        for (init_i = 0; init_i <= 100; init_i += 1) {
            gv_mutatortype[init_i] = 0; // Negative Mutator by Default
            gv_mutatorWheelAcceptable[init_i] = true;
            gv_mutatorupgrade[init_i] = "None";
        }
        gv_playerside[7] = 1;
        gv_oK = c_invalidDialogControlId;
        gv_closetrade = c_invalidDialogControlId;
        gv_sEE = c_invalidDialogControlId;
        gv_worldmarketdialogue = c_invalidDialogId;
        gv_trademenuimproveddialogue = c_invalidDialogId;
        gv_chronodialogue = c_invalidDialogId;
        gv_chronolabel = c_invalidDialogControlId;
        gv_votekickDialogue = c_invalidDialogId;
        gv_dialogButtonnobody = c_invalidDialogControlId;
        gv_timevk = 60;
        gv_votedifficultyModeDialogue = c_invalidDialogId;
        gv_pickroledialogue = c_invalidDialogId;
        gv_votemutatorModeDialogue = c_invalidDialogId;
        gv_difficultymodeTextDialogue = c_invalidDialogId;
        gv_mutatormodeTextDialogue = c_invalidDialogId;
        gv_dialogButtonVotenormal = c_invalidDialogControlId;
        gv_dialogButtonVoteelite = c_invalidDialogControlId;
        gv_dialogButtonVotenightmare = c_invalidDialogControlId;
        gv_dialogButtonVotehell = c_invalidDialogControlId;
        gv_dialogButtonVoteeasy = c_invalidDialogControlId;
        gv_dialogButtonVoteImpossible = c_invalidDialogControlId;
        gv_dialogButtonVotenightshift = c_invalidDialogControlId;
        gv_dialogButtonVotemutators = c_invalidDialogControlId;
        gv_dialogButtonVotebossrandomizer = c_invalidDialogControlId;
        gv_dialogButtonVoteHardcore = c_invalidDialogControlId;
        gv_voterestartdialog = c_invalidDialogId;
        gv_restarttextDialogue = c_invalidDialogId;
        gv_dialogButtonVoteYES = c_invalidDialogControlId;
        gv_dialogButtonVoteNO = c_invalidDialogControlId;
        gv_TradeButtonSend = c_invalidDialogControlId;
        lib1_gv_voteDialog = c_invalidDialogId;
        gv_mutatorSideDialog = c_invalidDialogId;
        if ((GameAttributeGameValue("1") == "0001")) {
            gv_GameMode = "Default";
            gv_gamemodestring = "DOCSTR_GameModeRoleplay";
        }
        if ((GameAttributeGameValue("1") == "0002")) {
            gv_GameMode = "Builder";
            gv_gamemodestring = "DOCSTR_GameModeBuilder";
        }
        if ((GameAttributeGameValue("1") == "0003")) {
            gv_GameMode = "Classic";
            gv_gamemodestring = "DOCSTR_GameModeClassic";
        }
        if ((GameAttributeGameValue("1") == "0004")) {
            gv_GameMode = "SandBox";
            gv_gamemodestring = "DOCSTR_GameModeSandbox";
        }
        if ((GameAttributeGameValue("1") == "0005")) {
            gv_GameMode = "Versus";
            gv_gamemodestring = "DOCSTR_GameModeVersus";
            gv_tempsChronoSt = 120;
            gv_tempsChronoSide = 20;
        }
        gv_cODE1 = 1;
        gv_cODE2 = 1;
        gv_cODE3 = 1;
        gv_cODE4 = 1;
        gv_difficultydamage[0] = 0;
        gv_difficultydamage[1] = 2;
        gv_difficultydamage[2] = 7;
        gv_difficultydamage[3] = 12;
        gv_difficultydamage[4] = 17;
        gv_difficultydamage[5] = 17;
        gv_difficultyExtraMobsSpawnAmount[0] = 0; // Easy
        gv_difficultyExtraMobsSpawnAmount[1] = 0; // Normal
        gv_difficultyExtraMobsSpawnAmount[2] = 1; // Elite
        gv_difficultyExtraMobsSpawnAmount[3] = 2; // Nightmare
        gv_difficultyExtraMobsSpawnAmount[4] = 3; // Hell
        gv_difficultyExtraMobsSpawnAmount[5] = 4; // Impossible
        gv_selectedDifficultyNumber = 1; // for "extra units spawn (check Zerg Invasion trigger)", default set at 1 (Normal diff)
    }

    //--------------------------------------------------------------------------------------------------
    // Global Function Declarations
    //--------------------------------------------------------------------------------------------------
    void gf_AttackPlayerIfCan (unit lp_unit, int lp_player);

    void gf_AddMutator (int lp_mutatortype);

    void gf_RemoveMutator (int lp_mutatortype);

    void gf_MutatorEstimateBonusDescription (int lp_mutatortype);

    void gf_CheckSavedSkinAvailability (int lp_player);

    unit gf_GetFocusTargetUnit (unit lp_unit);

    unit gf_GetRandomValidFocusTargetUnit();

    //--------------------------------------------------------------------------------------------------
    // Trigger Variables
    //--------------------------------------------------------------------------------------------------
    trigger gt_AdminMoney; trigger gt_swap; trigger gt_HealGens; trigger gt_AdminKick; trigger gt_Reveal; trigger gt_Creerboutonready; trigger gt_BoutonReadyDialogue; trigger gt_Init;
    trigger gt_BankInit; trigger gt_XPCannons; trigger gt_LevelsInitLifemC3A9fi; trigger gt_CustomisationSpecial;
    trigger gt_CustomisationColors; trigger gt_CustomisationSkills; trigger gt_CustomisationSkin; trigger gt_CustomisationPrestiges;
    trigger gt_CustomisationRoles; trigger gt_Dialogue; trigger gt_MapPropertygauche; trigger gt_CustomDialog;
    trigger gt_CustomSetLevel; trigger gt_CustomDialogClick; trigger gt_InitDialogue; trigger gt_DialogueChrono;
    trigger gt_GameStartchronoexpire; trigger gt_Creationdelacarte; trigger gt_Tableau; trigger gt_VarsInitettuto;
    trigger gt_StartGameprobesinit; trigger gt_Nightinfos; trigger gt_RefreshBoard; trigger gt_AddCore; trigger gt_RemCore; trigger gt_ZergInactif; trigger gt_Kerriganreborn; 
    trigger gt_Zeratulevent; trigger gt_Zeratulmeurt; trigger gt_capitaineMutas1725; trigger gt_capitainezergs1225; trigger gt_capitainezergsfinal2635;
    trigger gt_Zergsattackrocks; trigger gt_ZergInvasion; trigger gt_ZergBoss; trigger gt_airsquadron29;
    trigger gt_LevelUpProbe; trigger gt_Leave; trigger gt_Deadprobe; trigger gt_Sellrecycle;
    trigger gt_Temps; trigger gt_FirstDay; trigger gt_StartDay; trigger gt_SwitchTime; trigger gt_InBase; trigger gt_InBase2; trigger gt_InBaseRocks; trigger gt_Probeseekerpointatt;
    trigger gt_RochecassC3A9e; trigger gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche; trigger gt_RelicsXelNagaUpdate; trigger gt_Mineral;
    trigger gt_MineralrC3A9coltC3A9affichC3A9; trigger gt_Healminerals; trigger gt_WorldMarketMenuShow;
    trigger gt_WorldMarketMenuCreate; trigger gt_WorldMarketBuySell; trigger gt_Seeplayersminerals;
    trigger gt_emotekekw; trigger gt_emotebonk; trigger gt_emotedontyell; trigger gt_emotecrycat; trigger gt_emotedoge; trigger gt_emotechad;
    trigger gt_emotepepecool; trigger gt_emotemonkas; trigger gt_emotedogegun; trigger gt_emotepepenotes; trigger gt_emotepepeheart; trigger gt_emotepepekms;
    trigger gt_emotepeperee; trigger gt_emotepepesuit; trigger gt_Shareall; trigger gt_Share1; trigger gt_control; trigger gt_controloff; trigger gt_Shareoff; trigger gt_Builder1;  
    trigger gt_Builderoff; trigger gt_Builder1each05sec; trigger gt_SolomodeDuplicate; trigger gt_BossRandomizer; trigger gt_Limitbuildings;
    trigger gt_win1NydustuC3A9; trigger gt_win2OvermindtuC3A9; trigger gt_Overmindsous50; trigger gt_AttaquealC3A9atoireovermind; trigger gt_Raffinerieauto; 
    trigger gt_improveharvest2; trigger gt_improveharvest10; trigger gt_improveharvest20; trigger gt_improveharvest50; trigger gt_improveharvest100; trigger gt_improveharvest50shift; 
    trigger gt_RefineryWorkingBlue; trigger gt_RefineryWorkingGreen;  trigger gt_RefineryWorkingPlasma; trigger gt_RefineryWorkingRed; 
    trigger gt_RefineryWorkingAll; trigger gt_RefineryWorkingNone; trigger gt_Cores; trigger gt_Fillgreencore;
    trigger gt_Fillbluecore; trigger gt_Fillredcore; trigger gt_Fillplasmacore; trigger gt_Fillgreatestcore;
    trigger gt_wallbarfocus; trigger gt_actualisewallbar; trigger gt_Autonomousgenerator; trigger gt__50000HPor50armorpoints;
    trigger gt__100Aresarmorpoints; trigger gt__1000Aresarmorpoints; trigger gt__25000HP; trigger gt_Damageincreased500;
    trigger gt_Damageincreased250; trigger gt_UpgradeGgenerators; trigger gt_UpgradeGhealers; trigger gt_UpgradeGcannons;
    trigger gt_Shieldabsorber5; trigger gt_Mysteriousbox; trigger gt_Releasinghiddenenergy; trigger gt_NuclearBOMB;
    trigger gt_YamatoBOMB; trigger gt_ImprovementFinalAA; trigger gt_Changecolor; trigger gt_ChronocrC3A9C3A9;
    trigger gt_Chronoeach1sec; trigger gt_estcliquC3A9; trigger gt_Ressourcespanelcreate; trigger gt_ChangerresspanelUI;
    trigger gt_Ressourceseach025sec; trigger gt_VOTEKICKshow; trigger gt_votekickCreate; trigger gt_votekickdialog;
    trigger gt_Probekickedandcores; trigger gt_PlayerList; trigger gt_CreerVotedifficultymode; trigger gt_CreerVotemutatormode;
    trigger gt_VoteDifficultyModeDialog; trigger gt_VotemutatorModeDialog; trigger gt_CreerVoterestart; trigger gt_Voterestartdialog;
    trigger gt_Statuesinitcode; trigger gt_Statuesreset; trigger gt_Statues1234ok; trigger gt_StatuetouchC3A91;
    trigger gt_StatuetouchC3A92; trigger gt_StatuetouchC3A93; trigger gt_StatuetouchC3A94; trigger gt_Reset;
    trigger gt_Resettrue; trigger gt_CrazyMineralz; trigger gt_prestigebehaviors; trigger gt_AccumulativeReserves; trigger gt_CommandsZoom; trigger gt_admin; trigger gt_restore; trigger gt_bosspool;
    trigger gt_nightmaremutas; trigger lib1_gt_ShowHideSpecialEffects; trigger lib1_gt_InitiateHideGlobalEffectsVote; trigger lib1_gt_VoteButtons;
    trigger gt_maar36; trigger gt_timer36; trigger gt_Hallucinator; trigger gt_CrazyMineralzSwitch;
    trigger gt_CoreInside; trigger gt_CoreInsideT1; trigger gt_CoreInsideT2; trigger gt_CoreInsideT3;
    trigger gt_CoreInsideT4; trigger gt_CoreInsideT5; trigger gt_CoreInsideSalvage; trigger gt_sandboxgiverole; trigger gt_sandboxset; trigger gt_roledialog; trigger gt_roleplay; 
    trigger gt_Damageincreased1000; trigger gt_100000HPor100armorpoints; trigger gt_commands; trigger gt_allin; trigger gt_sandboxdifficulty; trigger gt_sandboxSOS;
    trigger gt_setday; trigger gt_trademenushowimproved; trigger gt_TradeMenuCreateImproved; trigger gt_lobbyrole; trigger gt_lobbypickings; 
    trigger gt_setplayers; trigger gt_cooldownSandbox; trigger gt_scvenhancer; trigger gt_zerglimit; trigger gt_TradeMenuImprovedClick; trigger gt_hybriddestroyerdead;
    trigger gt_ZergInvasionImpossible; trigger gt_banelingkamikaze; trigger gt_hybridnemesis; trigger gt_airsquadron29impossible; trigger gt_DNAPickupUpdate; trigger gt_DNAPickupUpdate2;
    trigger gt_HybridBehemothRage; trigger gt_godmodegodsandbox; trigger gt_godmodegodsandboxspawn; trigger gt_mutators;
    trigger gt_CustomisationMutators; trigger gt_mutatorwheelofmisfortune; trigger gt_mutatorsset; trigger gt_mutatorsentersregion; trigger gt_MutatorSeismicActivity; 
    trigger gt_mutatorsentersregionplayers; trigger gt_mutatorssetWheelOfMisfortune; trigger gt_prestigelevelupgrades; trigger gt_addmutatorsandbox;
    trigger gt_versusteleporttonydus; trigger gt_versushybridminerals; trigger gt_DialogVersusChooseSide; trigger gt_DialogVersusChooseSideClick;
    trigger gt_TheThingDialogue; trigger gt_EvaluateSidesAndStart; trigger gt_spawnTheThing; trigger gt_EvolutionT2; trigger gt_EvolutionT3;
    trigger gt_EvolutionT4; trigger gt_EvolutionT5; trigger gt_EvolutionT6; trigger gt_EvolutionT7; trigger gt_VersusProbeWinThingiskilled; trigger gt_versuszergincome;
    trigger gt_Incomeincreasedused; trigger gt_versushybridrage; trigger gt_versusenablerage; trigger gt_versusmax500000hp;
    trigger gt_nydusregenerationused; trigger gt_versusmax500000shields; trigger gt_DialogueChronoVersusSide; trigger gt_infestedbuildings;
    trigger gt_infestedbuildingsspawn; trigger gt_mutatorsentersregionneutral; trigger gt_color; trigger gt_OxygenStationReplenishAB; trigger gt_AlienIncubationHP; 
    trigger gt_EnableEmoteAgain; trigger gt_savezoom; trigger gt_autozoom; trigger gt_VersusZergUpgradesSelection; trigger gt_VersusZergUpgradesResearch; 
    trigger gt_VersusZergEventsNightEnabled; trigger gt_VersusZergEventsNight; trigger gt_MapCreationInit; trigger gt_StatuesPortalActivated; trigger gt_StatuesPortal;
    trigger gt_PortalLeaveEnter1; trigger gt_PortalLeaveEnter2; trigger gt_PortalLeaveOpportunity; trigger gt_PortalChainLeave; trigger gt_PortalLeaveEnter3; trigger gt_DestroyPortalsEndEvent;
    trigger gt_VersusAutoTP; trigger gt_VersusZergEventsDay; trigger gt_VersusZergEventDaySpawnMineral; trigger gt_VersusZergEventNightBuff;
    trigger gt_VersusZergEventNightBuffExpire; trigger gt_VersusZergEventNightBuffEnterRegion; trigger gt_sandboxgiverelics; trigger gt_CustomSkins; trigger gt_SkinsDialog;
    trigger gt_CustomSkinsDialogClick; trigger gt_CustomSkinsSwapStart; trigger gt_CommandsDonatorHalo; trigger gt_DonatorsList; trigger gt_EventMutators; trigger gt_mutedcommunication; 
    trigger gt_CustomSkinsInfo; trigger gt_boneSpawn; trigger gt_PickupBones; trigger gt_sandboxkillrocks; trigger gt_sandboxkillminerals;
    trigger gt_WallMastery5CountDrones; trigger gt_WallMastery5DroneCharges; trigger gt_WallMastery5UnitTrackers; 
    trigger gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance; trigger gt_CustomSkin1UnlockmentbiowaveGodliskSpawn; trigger gt_CustomSkin1Unlockment;
    trigger gt_CustomSkin2Unlockment; trigger gt_CustomSkin3Unlockment; trigger gt_CustomSkin4Unlockment; 
    trigger gt_CustomSkin5Unlockment; trigger gt_CustomSkin6Unlockment; trigger gt_CustomSkin7Unlockment;
    trigger gt_choosePassivePrestigeLevel; trigger gt_droneCapacity; trigger gt_debugGodlisk;
    trigger gt_unbuildableportalzone;

    //--------------------------------------------------------------------------------------------------
    // Global Functions
    //--------------------------------------------------------------------------------------------------
    // unit gf_GetFocusTargetUnit () {
    //     int lv_CurrentIteration;
    //     int lv_MaxIterations;
    //     int lv_FocusTargetPlayer;
    //     unit lv_FocusTargetUnit;

    //     lv_CurrentIteration = 0;

    //     if (gv_dayNb < 17) {lv_MaxIterations = 25;} else {lv_MaxIterations = 5;}

    //     do {
    //         lv_FocusTargetPlayer = PlayerGroupPlayer(gv_probeGroupPlayer, RandomInt(1, PlayerGroupCount(gv_probeGroupPlayer)));
    //         lv_CurrentIteration += 1;
    //     }while ( (gv_focustarget[lv_FocusTargetPlayer] == null || !(UnitIsAlive(gv_focustarget[lv_FocusTargetPlayer])) ) && (lv_CurrentIteration < lv_MaxIterations));

    //     lv_FocusTargetUnit = gv_focustarget[lv_FocusTargetPlayer];

    //     return lv_FocusTargetUnit;
    // }

    // unit gf_GetWorkerFocusTarget() {
    //     unit lv_unitTarget;
    //     unitgroup lv_targetUnitGroup;

    //     lv_targetUnitGroup = UnitGroupEmpty();
        
    //     lv_targetUnitGroup = UnitGroupFilter(null, c_playerAny, UnitGroupAlliance(15, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        
    //     lv_unitTarget = UnitGroupRandomUnit(lv_targetUnitGroup, c_unitCountAlive);

    //     UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, UnitGetName(lv_unitTarget));

    //     return lv_unitTarget;
    // }

    unit gf_GetRandomValidFocusTargetUnit() {
        unit lv_unitTarget;
        unitgroup lv_targetUnitGroup;
        int init_i;

        lv_targetUnitGroup = UnitGroupEmpty();

        for (init_i = 0; init_i < 8; init_i += 1) {
            if ( (gv_focustarget[init_i] != null && UnitGetOwner(gv_focustarget[init_i]) != gv_theThingPlayer) ) {
                UnitGroupAdd(lv_targetUnitGroup, gv_focustarget[init_i]);
            }
        }

        lv_unitTarget = UnitGroupRandomUnit(lv_targetUnitGroup, c_unitCountAlive);

        return lv_unitTarget;
    }

    unit gf_GetFocusTargetUnit (unit lp_unit) {
        int lv_cout;
        unit lv_unitTarget;
        int lv_CurrentIteration;
        int lv_MaxIterations;

        lv_cout = -1;
        lv_CurrentIteration = 0;
        lv_MaxIterations = 25;

        while ((lv_cout == -1) && lv_CurrentIteration < lv_MaxIterations) {
            lv_unitTarget = UnitGroupRandomUnit(UnitGroup(null, PlayerGroupPlayer(gv_probeGroupPlayer, RandomInt(1, PlayerGroupCount(gv_probeGroupPlayer))), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
            lv_cout = AIPathingCostUnit(lp_unit, UnitGetPosition(lv_unitTarget), c_includeAllBuildings);
            lv_CurrentIteration += 1;
        }

        if (lv_CurrentIteration >= lv_MaxIterations) {
            lv_unitTarget = UnitGroupRandomUnit(UnitGroup(null, PlayerGroupPlayer(gv_probeGroupPlayer, RandomInt(1, PlayerGroupCount(gv_probeGroupPlayer))), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
        }

        return lv_unitTarget;
    }


    void gf_AttackPlayerIfCan (unit lp_unit, int lp_player) {
        // Variable Declarations
        int lv_cout;
        unit lv_unitTarget;

        // Variable Initialization
        lv_cout = -1;

        // Implementation
        while ((lv_cout == -1)) {
            lv_unitTarget = UnitGroupRandomUnit(UnitGroup(null, lp_player, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
            lv_cout = AIPathingCostUnit(lp_unit, UnitGetPosition(lv_unitTarget), c_includeAllBuildings);
        }
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_unitTarget)), c_orderQueueReplace);
    }

    void gf_AddMutator (int lp_mutatortype) {
        DialogSetSize(gv_mutatorSideDialog, ((gv_mutatordialogindex + 1) * 75), 100);
        libNtve_gf_CreateDialogItemImage(gv_mutatorSideDialog, 65, 65, c_anchorLeft, (gv_mutatordialogindex * 75), 0, StringToText(""), gv_mutatorimage[lp_mutatortype], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_mutatorselectedimage[lp_mutatortype] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (TextWithColor(gv_mutatorname[lp_mutatortype], gv_mutatorcolor[lp_mutatortype]) + (StringToText("<n/>") + gv_mutatordescription[lp_mutatortype])), PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_mutatorSideDialog, 65, 65, c_anchorLeft, (gv_mutatordialogindex * 75), 0, StringToText(""), "Assets\\Textures\\Mutators\\Mutator_Background.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_mutatorselectedimageframe[lp_mutatortype] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_mutatorcolor[lp_mutatortype], PlayerGroupAll());
        gv_mutatorEnabled[lp_mutatortype] = true;
        if (lp_mutatortype == 0) {
            TriggerEnable(gt_mutatorwheelofmisfortune, true);
        }
        TriggerEnable(gt_mutatorsentersregion, true);
        TriggerEnable(gt_mutatorsentersregionplayers, true);
        gv_mutatordialogindex += 1;
    }

    void gf_RemoveMutator (int lp_mutatortype) {
        int lv_i;

        DialogControlDestroy(gv_mutatorselectedimage[lp_mutatortype]);
        DialogControlDestroy(gv_mutatorselectedimageframe[lp_mutatortype]);
        // gv_mutatordialogindex -= 1;
        gv_mutatorEnabled[lp_mutatortype] = false;
        if (lp_mutatortype == 0) {
            TriggerEnable(gt_mutatorwheelofmisfortune, false);
        }

        // Destroy all mutator images and then recreate from start
        gv_mutatordialogindex = 0;
        for (lv_i = 0; lv_i <= gv_mutatorstotal; lv_i += 1) {
            DialogControlDestroy(gv_mutatorselectedimage[lv_i]);
            DialogControlDestroy(gv_mutatorselectedimageframe[lv_i]);
        }
        for (lv_i = 0; lv_i <= gv_mutatorstotal; lv_i += 1) {
            if (gv_mutatorEnabled[lv_i]) {
                gf_AddMutator(lv_i);
            }
        }
    }

    void gf_MutatorEstimateBonusDescription (int lp_mutatortype) {
        if (gv_mutatorbonuslevels[lp_mutatortype] != 0) {
            gv_mutatordescription[lp_mutatortype] = gv_mutatordescription[lp_mutatortype] + StringToText("<n/>Bonus levels: ") + IntToText(gv_mutatorbonuslevels[lp_mutatortype]);
        }
        if (gv_mutatorbonuswins[lp_mutatortype] != 0) {
            gv_mutatordescription[lp_mutatortype] = gv_mutatordescription[lp_mutatortype] + StringToText("<n/>Bonus wins: ") + IntToText(gv_mutatorbonuswins[lp_mutatortype]);
        }
    }

    void gf_CheckSavedSkinAvailability (int lp_player) {
        int init_i;

        if (!BankKeyExists(gv_playerbanks[lp_player], "Sec", "skn") || BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == "default") {
            return;
        }

        if (StringContains(BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn"), "e", c_stringBegin, c_stringNoCase)) {
            for (init_i = 0; init_i < gv_TotalEventSkins; init_i += 1) {
                if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == ("e" + IntToString(init_i))) {
                    IntLoopBegin(0, 50);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if (PlayerHandle(lp_player) == gv_CosmeticSkinEvent[init_i].lv_EventHandlers[IntLoopCurrent()] || gv_isadmin[lp_player]) {
                            libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_CosmeticSkinEvent[init_i].lv_skin);
                            UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                            if (gv_CosmeticSkinEvent[init_i].lv_isFlyer) {
                                UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                            }
                            return;
                        }
                    }
                    IntLoopEnd();
                    BankKeyRemove(gv_playerbanks[lp_player], "Sec", "skn");
                }
            }
        }

        if (StringContains(BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn"), "P", c_stringBegin, c_stringCase)) {
            for (init_i = 0; init_i < gv_TotalPrestigeSkins; init_i += 1) {
                if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == ("P" + IntToString(init_i))) {
                    if ((BankValueGetAsInt(gv_playerbanks[lp_player], "Sec", "PHR") >= gv_CosmeticSkinPrestige[init_i].lv_PrestigeRequirement && gv_CosmeticSkinPrestige[init_i].lv_PrestigeRequirement != 0) || gv_isadmin[lp_player]) {
                        libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_CosmeticSkinPrestige[init_i].lv_skin);
                        UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                        if (gv_CosmeticSkinPrestige[init_i].lv_isFlyer) {
                            UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                        }
                        return;
                    }
                    BankKeyRemove(gv_playerbanks[lp_player], "Sec", "skn");
                }
            }
        }

        if (StringContains(BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn"), "per", c_stringBegin, c_stringNoCase)) {
            for (init_i = 0; init_i <= gv_TotalPersonalSkins1; init_i += 1) {
                if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == "per1") {
                    if ((PlayerHandle(lp_player) == gv_personalskinHandlersEU[init_i] || PlayerHandle(lp_player) == gv_personalskinHandlersNA[init_i]) && gv_personalskin1Skins[init_i] != "") {
                        libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_personalskin1Skins[init_i]);
                        UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                        if (gv_personalskin1IsFlyer[init_i]) {
                            UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                        }
                        return;
                    }
                } else if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == "per2") {
                    if ((PlayerHandle(lp_player) == gv_personalskinHandlersEU[init_i] || PlayerHandle(lp_player) == gv_personalskinHandlersNA[init_i]) && gv_personalskin2Skins[init_i] != "") {
                        libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_personalskin2Skins[init_i]);
                        UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                        if (gv_personalskin2IsFlyer[init_i]) {
                            UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                        }
                        return;
                    }
                }
            }
            BankKeyRemove(gv_playerbanks[lp_player], "Sec", "skn");
        }


        if (StringContains(BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn"), "ks", c_stringBegin, c_stringNoCase)) {
            for (init_i = 0; init_i <= gv_TotalCustomSkins; init_i += 1) {
                if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == ("ks" + IntToString(init_i))) {
                    if (BankKeyExists(gv_playerbanks[lp_player], gv_DonorCustomSkins[init_i].lv_bankStorageSection, gv_DonorCustomSkins[init_i].lv_bankStorageKey)) {
                        libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_DonorCustomSkins[init_i].lv_skin);
                        UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                        if (gv_DonorCustomSkins[init_i].lv_isFlyer) {
                            UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                        }
                        return;
                    }
                }
            }
            BankKeyRemove(gv_playerbanks[lp_player], "Sec", "skn");
        }

        if (StringContains(BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn"), "ds", c_stringBegin, c_stringNoCase)) {
            for (init_i = 0; init_i <= gv_TotalDonorSkins; init_i += 1) {
                if (BankValueGetAsString(gv_playerbanks[lp_player], "Sec", "skn") == ("ds" + IntToString(init_i))) {
                    if (gv_DonateLevelPlayer[lp_player] >= gv_DonorSkins[init_i].lv_skinDonorLevel) {
                        libNtve_gf_SendActorMessageToUnit(gv_probe[lp_player], gv_DonorSkins[init_i].lv_skin);
                        UnitBehaviorRemove(gv_probe[lp_player], "FlyerHeightBehavior", 1);
                        if (gv_DonorCustomSkins[init_i].lv_isFlyer) {
                            UnitBehaviorAdd(gv_probe[lp_player], "FlyerHeightBehavior", gv_probe[lp_player], 1);
                        }
                        return;
                    }
                }
            }
            BankKeyRemove(gv_playerbanks[lp_player], "Sec", "skn");
        }

    }
    //--------------------------------------------------------------------------------------------------
    // Trigger: Creer bouton ready
    //--------------------------------------------------------------------------------------------------
    bool gt_Creerboutonready_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_i;
        int lv_j;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(200, 200, c_anchorBottom, 0, 50, true);
        gv_boutonReadyDialogue = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 20, 25, StringExternal("Param/Value/1CCC63A4"), Color(100,100,100), true, 1.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 90, StringToText(""), StringExternal("Param/Value/2AF91756"), "");
        gv_dialogButtonReady = DialogControlLastCreated();
        DialogSetVisible(gv_boutonReadyDialogue, PlayerGroupActive(), true);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Creerboutonready_Init () {
        gt_Creerboutonready = TriggerCreate("gt_Creerboutonready_Func");
        // TriggerAddEventChatMessage(gt_Creerboutonready, c_playerAny, "-RR", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Bouton Ready Dialogue
    //--------------------------------------------------------------------------------------------------
    bool gt_BoutonReadyDialogue_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_nbjoueursauvote;
        bool lv_allprobesvotedversus;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((gv_readyYesfait[EventPlayer()] == 0))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if ((EventDialogControl() == gv_dialogButtonReady)) {
            DialogSetVisible(gv_boutonReadyDialogue, PlayerGroupSingle(EventPlayer()), false);
            gv_variableYesrdy = (gv_variableYesrdy + 1);
            lv_nbjoueursauvote = 0;
            if ((gv_readyYesfait[EventPlayer()] == 0)) {
                gv_readyYesfait[EventPlayer()] = 1;
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_nbjoueursauvote = (lv_nbjoueursauvote + 1);
                }
                PlayerGroupLoopEnd();
                if ((gv_GameMode == "Versus") && (EventPlayer() == gv_theThingPlayer)) {
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(StringToText("The Thing"), Color(255.0, 0.0, 0.0)) + (StringExternal("Param/Value/DF27B3D0") + IntToText(gv_variableYesrdy) + StringExternal("Param/Value/F61BC304") + IntToText(lv_nbjoueursauvote))));
                }
                else {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), Color(100.00, 100.00, 100.00)) + (StringExternal("Param/Value/DF27B3D0") + IntToText(gv_variableYesrdy) + StringExternal("Param/Value/F61BC304") + IntToText(lv_nbjoueursauvote))));
                }

                if (gv_GameMode == "Versus") {
                    lv_allprobesvotedversus = true;
                    PlayerGroupLoopBegin(gv_probeGroupPlayer);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if (gv_readyYesfait[PlayerGroupLoopCurrent()] == 0) {
                            lv_allprobesvotedversus = false;
                            break;
                        }
                    }
                    PlayerGroupLoopEnd();

                    if (lv_allprobesvotedversus == true) {
                        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (TextWithColor(StringToText("Probes are ready!"), Color(0.0, 255.0, 0.0))));
                    }
                }

                if ((gv_variableYesrdy >= lv_nbjoueursauvote) && (gv_tempsChronoSt >= 4)) {
                    DialogDestroy(gv_boutonReadyDialogue);
                    TriggerExecute(gt_GameStartchronoexpire, true, false);
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_BoutonReadyDialogue_Init () {
        gt_BoutonReadyDialogue = TriggerCreate("gt_BoutonReadyDialogue_Func");
        TriggerAddEventDialogControl(gt_BoutonReadyDialogue, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Init (+ Creation De La Carte Map Init)
    //--------------------------------------------------------------------------------------------------
    bool gt_Init_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_xx;
        string[9] lv_unit;
        int init_i;


        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }


        lv_unit[1] = "MineralField";
        lv_unit[2] = "MineralField2";
        lv_unit[3] = "MineralField22";
        lv_unit[4] = "MineralField222";
        lv_unit[5] = "MineralField";
        lv_unit[6] = "MineralField2";
        lv_unit[7] = "MineralField22";
        lv_unit[8] = "MineralField222";
        if (gv_GameMode == "Versus") {
            lv_unit[1] = "MineralField2";
            lv_unit[5] = "MineralField222";
        }
        lv_xx = RandomInt(1, 4);
        UnitCreate(1, lv_unit[lv_xx], 0, 0, Point(75.0, 94.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        UnitCreate(1, lv_unit[(lv_xx + 1)], 0, 0, Point(70.0, 90.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        lv_xx = (lv_xx + 1);
        UnitCreate(1, lv_unit[lv_xx], 0, 0, Point(86.0, 94.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        UnitCreate(1, lv_unit[(lv_xx + 1)], 0, 0, Point(91.0, 90.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        lv_xx = (lv_xx + 1);
        UnitCreate(1, lv_unit[lv_xx], 0, 0, Point(67.0, 81.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        UnitCreate(1, lv_unit[(lv_xx + 1)], 0, 0, Point(71.0, 74.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        lv_xx = (lv_xx + 1);
        UnitCreate(1, lv_unit[lv_xx], 0, 0, Point(82.0, 70.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        UnitCreate(1, lv_unit[(lv_xx - 3)], 0, 0, Point(88.0, 74.0), libNtve_gf_RandomAngle());
        if (gv_GameMode != "Versus") {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, -100.0);
        }
        lv_xx = RandomInt(1, 1);
        if ((lv_xx == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "BattlecruiserHelios", 0, 1, Point(80.0, 88.0), Point(72.0, 70.0));
        }
        else {
            if ((lv_xx == 2)) {
                libNtve_gf_UnitCreateFacingPoint(1, "BattlecruiserHelios", 0, 1, Point(83.0, 90.0), Point(87.0, 70.0));
            }
            else {
                if ((lv_xx == 3)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "BattlecruiserHelios", 0, 1, Point(76.0, 90.0), Point(89.0, 70.0));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, "BattlecruiserHelios", 0, 1, Point(75.0, 90.0), Point(75.0, 70.0));
                }
            }
        }
        gv_hC3A9lios = UnitLastCreated();
        // GameSetSpeedValueMinimum(c_gameSpeedFaster);
        // GameSetSpeedValue(c_gameSpeedFaster);
        GameSetSpeedValue(c_gameSpeedNormal);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerGroupAdd(gv_probeGroupPlayer, PlayerGroupLoopCurrent());
            CameraLockInput(PlayerGroupLoopCurrent(), true);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(17), 70.0, false);
        }
        PlayerGroupLoopEnd();
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UISetResourceTradingMajorStep(c_resourceTypeMinerals, 1000);
        UISetResourceTradingMajorStep(c_resourceTypeVespene, 1000);
        UISetResourceTradingMajorStep(c_resourceTypeCustom, 1000);
        UISetResourceTradingMajorStep(c_resourceTypeTerrazine, 1000);
        UISetResourceTradingMinorStep(c_resourceTypeMinerals, 100);
        UISetResourceTradingMinorStep(c_resourceTypeVespene, 100);
        UISetResourceTradingMinorStep(c_resourceTypeCustom, 100);
        UISetResourceTradingMinorStep(c_resourceTypeTerrazine, 100);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CFF3B23A"));

        if (GameIsTestMap(false) == true) {
            TriggerExecute(gt_admin, false, false);
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                BankLoad("Banks", PlayerGroupLoopCurrent());
                gv_playerbanks[PlayerGroupLoopCurrent()] = BankLastCreated();
                PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
            }
        }
        PlayerGroupLoopEnd();

        CameraSetBounds(PlayerGroupAll(), RegionFromName("PlayableMap"), true);
        libNtve_gf_SetUpgradeLevelForPlayer(15, "ShowHideSpecialEffects", 1);
        for (init_i = 0; init_i <= 5; init_i += 1) {
            libNtve_gf_SetUpgradeLevelForPlayer((init_i), "ShowHideSpecialEffects", 1);
        }
        // Moved from "Creation de la carte"
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
        }
        PlayerGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, 0, null, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);

        return true;
    }   

    //--------------------------------------------------------------------------------------------------
    void gt_Init_Init () {
        gt_Init = TriggerCreate("gt_Init_Func");
        TriggerAddEventMapInit(gt_Init);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Bank Init
    //--------------------------------------------------------------------------------------------------
    bool gt_BankInit_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_statone;
        fixed lv_actualVers;
        fixed lv_cODID;
        fixed lv_stattwo;
        int lv_x;
        int lv_y;
        int lv_pl;
        int lv_pl2;
        fixed lv_plinitial;
        int lv_plcheck;
        fixed lv_shield;
        string auto26222686_ai;
        string auto26222686_ae;
        string auto25222696_ae;
        bool lv_valid;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        fixed lv_heal;

        // Variable Initialization
        lv_actualVers = 6.0;
        lv_x = 44444;
        lv_y = 79999;
        auto26222686_ai = "i";
        lv_valid = false;
        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));

        // Actions
        if (!runActions) {
            return true;
        }
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if (((PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-1796780") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-4620835") || (PlayerHandle(PlayerGroupLoopCurrent()) == "1-S2-1-5421277") || (PlayerHandle(PlayerGroupLoopCurrent()) == "1-S2-2-1555676"))) {
                    gv_isadmin[PlayerGroupLoopCurrent()] = true;
                }
                if ((
                    PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-2405916") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-4264761") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-403430")
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-871576")  || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-2489641")  || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1501244") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1621825") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3572396") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10072275") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-5953732") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-8797286") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-9852592") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-1718926") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10436716") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1505307") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10605912") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-2155596") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3611295") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-880604") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3295309") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10638093") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-467084") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10595482") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3170309") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-8727189") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3172120") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1375644") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-6787451") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-1870377") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10595351") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10632369") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-1889700") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-6390404") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10376898") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-9076476") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-2136192") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-2-1258513") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10539280") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-2478988") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1860503") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1860503") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10678675") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-6577744") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10484551") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3872060") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-1084767") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-4318815") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-9909474") 
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10413688") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-8986909") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-8961622")
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-11051683") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10668636") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10413688")
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10466245") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-11080436") || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10305478")
                || (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-10386602")
                ) {
                    gv_isbanned[PlayerGroupLoopCurrent()] = true;
                    BankRemove(gv_playerbanks[PlayerGroupLoopCurrent()]);
                    gv_playerbanks[PlayerGroupLoopCurrent()] = null;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/E7398D75") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/E98F68C9")));
                }
                else {
                    BankLoad("Banks", PlayerGroupLoopCurrent());
                    auto25222696_ae = "m";
                    lv_pl = 0;
                    lv_pl2 = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR2");
                    lv_plinitial = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PR");
                    lv_plcheck = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR");
                    while (lv_plinitial >= 40.0) {
                        lv_plinitial = (lv_plinitial / 1.2);
                        lv_plinitial = (lv_plinitial - 39);
                        lv_pl = lv_pl + 1;
                    }
                    if (((lv_pl + lv_pl2) != lv_plcheck) || ((lv_pl2 > 0) && lv_plcheck < 42.0)) {
                        gv_isbanned[PlayerGroupLoopCurrent()] = true;
                        gv_playerbanks[PlayerGroupLoopCurrent()] = null;
                        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/E7398D75") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/E98F68C9")));
                    }
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "VERS", 0.0);
                    if (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "CODID") == 17.0) {
                        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/E7398D75") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/E98F68C9")));
                        gv_saved[PlayerGroupLoopCurrent()] = false;
                        gv_isbanned[PlayerGroupLoopCurrent()] = true;
                        gv_playerbanks[PlayerGroupLoopCurrent()] = null;
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "CODID", 17.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "VERSION", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO", 0.0);
                    }
                    lv_cODID = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "CODID");
                    lv_statone = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL");
                    lv_stattwo = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE");
                    if (((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD") >= 52.0) || (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD") != (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED") / 4788.0)) || (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE") >= 52.0))) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/DF209895")));
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL", 0.0);
                    }
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") >= 51.0) && ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") * 1224.0) != BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVEXP"))) {
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO", 51.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVEXP", 62424.0);
                    }
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR") >= 1.0) && ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR") * 1655.0) != BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB"))) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/F134C5E1")));
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE", 0.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL", 0.0);
                    }
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR") >= 35.0) && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNQ") != 59120.0)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/D8AF3E6A")));
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR", 30.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB", (30.0 * 1655.0));
                        if ((lv_statone != 21634.0)) {
                            BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL", 0.0);
                        }
                        if ((lv_stattwo < 31.0)) {
                            BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE", 30.0);
                        }
                    }
                    auto26222686_ae = "s";
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") >= 201.0)) {
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO", 200.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVEXP", 244800.0);
                    }
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EXPP") < 0.0)) {
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EXPP", 0.0);
                    }
                    if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD") > 36.0)) {
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", 30.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "ZUHIB", (9322.0 * 13.0));
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", (30 * 4788));
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/38573720"));
                    }
                    if ((BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae)) != 0.0) || (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae)) != 0)) {
                        auto25222686_ai = StringToInt(StringReplace(PlayerHandle(PlayerGroupLoopCurrent()), "0", 1, 8));
                        IntLoopBegin(1, 35);
                        for ( ; !IntLoopDone() ; IntLoopStep() ) {
                            lv_shield = AbsF(ModF(IntToFixed(IntLoopCurrent())*10.0, AbsF(ModF((Round((ModF((ModF(auto25322686_ai, SquareRoot(5.0)) * ModF(86, SquareRoot(8.0)) * ModF(auto25322686_ae, SquareRoot(3.0)) * ModF(auto25232686_ai, SquareRoot(2.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(6.0)) * ModF(auto25233686_ai, SquareRoot(7.0)) * ModF(auto25233686_ae, SquareRoot(5.0)) * ModF(auto25333686_ai, SquareRoot(3.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(3.0)) * 10000.0)) / 1000.0), 10.0))));
                            if ((ModF(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae)), 10.0) == lv_shield) && (FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae)) / 10) == BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae)))) {
                                lv_valid = true;
                                break;
                            }
                        }
                        IntLoopEnd();
                        // Check for valid bank file only on non-test map (otherwise it can throw an error "divide by zero" on test file)
                        if (GameIsTestMap(false) == false) {
                            lv_heal = (Round((ModF((ModF(auto25322686_ai, SquareRoot(3.0)) * ModF(86, SquareRoot(2.0)) * ModF(auto25322686_ae, SquareRoot(7.0)) * ModF(auto25232686_ai, SquareRoot(8.0)) * ModF(auto25232686_ae, SquareRoot(17.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
                            if (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae)) == 35 || FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae)) / 10.0) == 35) {
                                if (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto26222686_ae)) != ((lv_shield/lv_heal)*3.4)) {
                                    lv_valid = false;
                                }
                            }
                        }

                        // if (lv_valid == false) {
                        //     gv_isbanned[PlayerGroupLoopCurrent()] = true;
                        //     UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/E7398D75") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/E98F68C9")));
                        // }
                    }
                    // Pre-apply reset for those who dont have skin yet
                    if (!(BankValueGetAsFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[0].lv_bankStorageSection, gv_DonorCustomSkins[0].lv_bankStorageKey)) && !(BankValueGetAsFlag(gv_playerbanks[PlayerGroupLoopCurrent()], "reset", "cs1"))) {
                        BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], "reset", "cs1", true);
                    }         
                    // Reset Godlisk skin for once to everyone that has it (at a time of rework)
                    if (BankValueGetAsFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[0].lv_bankStorageSection, gv_DonorCustomSkins[0].lv_bankStorageKey) && !(BankValueGetAsFlag(gv_playerbanks[PlayerGroupLoopCurrent()], "reset", "cs1"))) {
                        BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[0].lv_bankStorageSection, gv_DonorCustomSkins[0].lv_bankStorageKey, false);
                        BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], "reset", "cs1", true);
                    }

                    BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                    BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
                }
                // WIP Access to Mercenary role for non-donors (PunkT, Elodie and Serenity)
                if (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-3434195" || PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-4774849" || PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-7741735") {
                    gv_isTester[PlayerGroupLoopCurrent()] = true;
                }
            }
        }
        PlayerGroupLoopEnd();
        if (gv_GameMode == "Versus") {
            TriggerExecute(gt_DialogVersusChooseSide, true, false);
        }
        else {
            TriggerExecute(gt_InitDialogue, true, false);
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gv_passivePrestigeLevel[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR");
        }
        PlayerGroupLoopEnd();
        TriggerEnable(gt_choosePassivePrestigeLevel, true);

        // Unlock Custom Skin 7 if Mutated Donor
        TriggerExecute(gt_CustomSkin7Unlockment, false, false);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_BankInit_Init () {
        gt_BankInit = TriggerCreate("gt_BankInit_Func");
        TriggerAddEventTimeElapsed(gt_BankInit, 5.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: LevelsInitLife (m??fi)
    //--------------------------------------------------------------------------------------------------
    bool gt_LevelsInitLifemC3A9fi_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_vie;
        fixed lv_ajout;
        int lv_i;

        // Variable Initialization
        lv_vie = 2.0;
        lv_ajout = 2.0;
        lv_i = 1;

        // Actions
        if (!runActions) {
            return true;
        }

        while ((lv_vie > 0.0)) {
            lv_vie += lv_ajout;
            gv_zergLife[lv_i] = lv_vie;
            if ((ModI(lv_i, 2) == 0)) {
                lv_ajout *= 2.0;
                if ((lv_ajout > 8192.0)) {
                    lv_ajout = 8192.0;
                }
            }
            lv_i += 1;
        }
        lv_vie = 2.0;
        while ((lv_vie > 0.0) && (lv_i < 500)) {
            lv_vie += 4.0;
            gv_zergLife[lv_i] = 524287.0;
            lv_i += 1;
        }
        gv_levelLimit = lv_i;
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_LevelsInitLifemC3A9fi_Init () {
        gt_LevelsInitLifemC3A9fi = TriggerCreate("gt_LevelsInitLifemC3A9fi_Func");
        TriggerAddEventMapInit(gt_LevelsInitLifemC3A9fi);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomisationSpecial
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationSpecial_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_specialties[0].lv_level = 0;
        gv_specialties[0].lv_name = StringExternal("Param/Value/FBDC9050");
        gv_specialties[0].lv_behaviour = "FasterBeam";
        gv_specialties[0].lv_icon = "Assets\\Textures\\icon-mineral-nobg.dds";
        gv_specialties[0].lv_description = StringExternal("Param/Value/E59E145B");

        gv_specialties[1].lv_level = 0;
        gv_specialties[1].lv_name = StringExternal("Param/Value/B792F2CB");
        gv_specialties[1].lv_behaviour = "FasterBeam2";
        gv_specialties[1].lv_icon = "Assets\\Textures\\Buttons\\Red MineralZ22.dds";
        gv_specialties[1].lv_description = StringExternal("Param/Value/BCCE4023");

        gv_specialties[2].lv_level = 0;
        gv_specialties[2].lv_name = StringExternal("Param/Value/BC049606");
        gv_specialties[2].lv_behaviour = "FasterBeam22";
        gv_specialties[2].lv_icon = "Assets\\Textures\\Buttons\\Purple MineralZ22.dds";
        gv_specialties[2].lv_description = StringExternal("Param/Value/7D15E565");

        gv_specialties[3].lv_level = 0;
        gv_specialties[3].lv_name = StringExternal("Param/Value/A630050A");
        gv_specialties[3].lv_behaviour = "FasterBeam222";
        gv_specialties[3].lv_icon = "Assets\\Textures\\Buttons\\Green MineralZ22.dds";
        gv_specialties[3].lv_description = StringExternal("Param/Value/4AB04292");

        gv_specialties[4].lv_level = 49;
        gv_specialties[4].lv_name = StringExternal("Param/Value/608F7A6F");
        gv_specialties[4].lv_behaviour = "FasterBeam2222";
        gv_specialties[4].lv_icon = "Assets\\Textures\\Buttons\\REDCrystal_Vespene_Spec2.dds";
        gv_specialties[4].lv_description = StringExternal("Param/Value/ACD7918D");

        gv_specialties[5].lv_level = 49;
        gv_specialties[5].lv_name = StringExternal("Param/Value/F596EF56");
        gv_specialties[5].lv_behaviour = "FasterBeam22222";
        gv_specialties[5].lv_icon = "Assets\\Textures\\Buttons\\Blue_Vespene_Spec2.dds";
        gv_specialties[5].lv_description = StringExternal("Param/Value/C2B190F6");

        gv_specialties[6].lv_level = 49;
        gv_specialties[6].lv_name = StringExternal("Param/Value/56A28414");
        gv_specialties[6].lv_behaviour = "FasterBeam222222";
        gv_specialties[6].lv_icon = "Assets\\Textures\\Buttons\\Plasma_Vespene_Spec2.dds";
        gv_specialties[6].lv_description = StringExternal("Param/Value/36291D0E");

        gv_specialties[7].lv_level = 99;
        gv_specialties[7].lv_name = StringExternal("Param/Value/851EA086");
        gv_specialties[7].lv_behaviour = "SpecialityBLUEVespenePlasmaRed";
        gv_specialties[7].lv_icon = "Assets\\Textures\\Buttons\\BVPR_Spec4.dds";
        gv_specialties[7].lv_description = StringExternal("Param/Value/E88E89EA");


        while (gv_specialties[gv_totalspecialities].lv_behaviour != "") {
            gv_totalspecialities += 1;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationSpecial_Init () {
        gt_CustomisationSpecial = TriggerCreate("gt_CustomisationSpecial_Func");
        TriggerAddEventMapInit(gt_CustomisationSpecial);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomisationColors
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationColors_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_colors[0].lv_highNight = 0;
        gv_colors[0].lv_name = StringExternal("Param/Value/68E2AB29");
        gv_colors[0].lv_message = "SetTintColor 255,255,255";
        gv_colors[0].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[0].lv_color = Color(75.29, 75.29, 75.29);
        gv_colors[0].lv_icon = "Assets\\Textures\\genericglow64.dds";

        gv_colors[1].lv_highNight = 5;
        gv_colors[1].lv_name = StringExternal("Param/Value/549C399F");
        gv_colors[1].lv_message = "SetTintColor 255,128,255";
        gv_colors[1].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[1].lv_color = Color(100.00, 100.00, 100.00);
        gv_colors[1].lv_icon = "Assets\\Textures\\PINK circle.dds";

        gv_colors[2].lv_highNight = 5;
        gv_colors[2].lv_name = StringExternal("Param/Value/BABF9D2C");
        gv_colors[2].lv_message = "SetTintColor 0,255,255 1.000000";
        gv_colors[2].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[2].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[2].lv_icon = "Assets\\Textures\\BLUE circle.dds";

        gv_colors[3].lv_highNight = 5;
        gv_colors[3].lv_name = StringExternal("Param/Value/14BBCDC0");
        gv_colors[3].lv_message = "SetTintColor 255,0,0";
        gv_colors[3].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[3].lv_color = Color(100.00, 0.00, 0.00);
        gv_colors[3].lv_icon = "Assets\\Textures\\RED circle.dds";

        gv_colors[4].lv_highNight = 5;
        gv_colors[4].lv_name = StringExternal("Param/Value/5037D9CF");
        gv_colors[4].lv_message = "SetTintColor 0,255,0 1.000000";
        gv_colors[4].lv_message2 = "SetTintColor 0,255,0";
        gv_colors[4].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[4].lv_icon = "Assets\\Textures\\GREEN circle.dds";

        gv_colors[5].lv_highNight = 5;
        gv_colors[5].lv_name = StringExternal("Param/Value/13C7E628");
        gv_colors[5].lv_message = "SetTintColor 255,255,0";
        gv_colors[5].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[5].lv_color = Color(100.00, 100.00, 0.00);
        gv_colors[5].lv_icon = "Assets\\Textures\\YELLOW circle.dds";

        gv_colors[6].lv_highNight = 20;
        gv_colors[6].lv_name = StringExternal("Param/Value/1640B5F1");
        gv_colors[6].lv_message = "SetTintColor 255,128,0";
        gv_colors[6].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[6].lv_color = Color(100.00, 50.20, 0.00);
        gv_colors[6].lv_icon = "Assets\\Textures\\ORANGE circle.dds";

        gv_colors[7].lv_highNight = 20;
        gv_colors[7].lv_name = StringExternal("Param/Value/09E4BFF9");
        gv_colors[7].lv_message = "SetTintColor {215,0,215 2.000000}";
        gv_colors[7].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[7].lv_color = Color(87.84, 3.92, 85.88);
        gv_colors[7].lv_icon = "Assets\\Textures\\glow_purple1.dds";

        gv_colors[8].lv_highNight = 20;
        gv_colors[8].lv_name = StringExternal("Param/Value/11F337ED");
        gv_colors[8].lv_message = "SetTintColor {0,255,255 2.000000} 2.000000 Bounce";
        gv_colors[8].lv_message2 = "SetTintColor 255,255,255";
        gv_colors[8].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[8].lv_icon = "Assets\\Textures\\sm_corridor_sc2logoglow.dds";

        gv_colors[9].lv_highNight = 30;
        gv_colors[9].lv_name = StringExternal("Param/Value/CA134302");
        gv_colors[9].lv_message = "SetTintColor {0,255,0 2.000000} 2.000000 Bounce";
        gv_colors[9].lv_message2 = "SetTintColor 0,128,0";
        gv_colors[9].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[9].lv_icon = "Assets\\Textures\\glow_green1.dds";

        gv_colors[10].lv_highNight = 30;
        gv_colors[10].lv_name = StringExternal("Param/Value/42AF6A41");
        gv_colors[10].lv_message = "SetTintColor {255,128,0 2.000000} 2.000000 Bounce";
        gv_colors[10].lv_message2 = "SetTintColor {215,19,236 2.000000}";
        gv_colors[10].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[10].lv_icon = "Assets\\Textures\\glow_orange3.dds";

        gv_colors[11].lv_highNight = 35;
        gv_colors[11].lv_name = StringExternal("Param/Value/CF8A3ECE");
        gv_colors[11].lv_message = "SetTintColor {255,128,0 2.000000} 1.000000 Bounce";
        gv_colors[11].lv_message2 = "SetTintColor 255,0,0";
        gv_colors[11].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[11].lv_icon = "Assets\\Textures\\glow_amber.dds";

        gv_colors[12].lv_highNight = 35;
        gv_colors[12].lv_name = StringExternal("Param/Value/D41224BE");
        gv_colors[12].lv_message = "SetTintColor {128,0,255 2.000000} 2.000000 Bounce";
        gv_colors[12].lv_message2 = "SetTintColor 30,30,30";
        gv_colors[12].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[12].lv_icon = "Assets\\Textures\\genericglowfaded.dds";

        gv_colors[13].lv_highNight = 35;
        gv_colors[13].lv_name = StringExternal("Param/Value/A1487862");
        gv_colors[13].lv_message = "SetTintColor {255,255,0 2.000000} 2.000000 Bounce";
        gv_colors[13].lv_message2 = "SetTintColor 255,255,0";
        gv_colors[13].lv_color = Color(0.00, 100.00, 100.00);
        gv_colors[13].lv_icon = "Assets\\Textures\\glow_hot_yellow1.dds";


        while (gv_colors[gv_totalcolors].lv_message != "") {
            gv_totalcolors += 1;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationColors_Init () {
        gt_CustomisationColors = TriggerCreate("gt_CustomisationColors_Func");
        TriggerAddEventMapInit(gt_CustomisationColors);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomisationSkills
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationSkills_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_skills[0].lv_level = 0;
        gv_skills[0].lv_name = StringExternal("Param/Value/F52AE395");
        gv_skills[0].lv_description = StringExternal("Button/Tooltip/TossGrenadeTychus");
        gv_skills[0].lv_ability = "BonesTossGrenade";
        gv_skills[0].lv_icon = "Assets\\Textures\\btn-ability-terran-tychustossgrenade.dds";

        gv_skills[1].lv_level = 10;
        gv_skills[1].lv_name = StringExternal("Param/Value/207F4487");
        gv_skills[1].lv_description = StringExternal("Param/Value/861705AF");
        gv_skills[1].lv_ability = "MindBlast";
        gv_skills[1].lv_icon = "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds";

        gv_skills[2].lv_level = 25;
        gv_skills[2].lv_name = StringExternal("Param/Value/9FFF0DAD");
        gv_skills[2].lv_description = StringExternal("Param/Value/F6A0F99F");
        gv_skills[2].lv_ability = "SeekerMissile";
        gv_skills[2].lv_icon = "Assets\\Textures\\btn-techupgrade-terran-seekermissile.dds";

        gv_skills[3].lv_level = 50;
        gv_skills[3].lv_name = StringExternal("Param/Value/F5925C38");
        gv_skills[3].lv_description = StringExternal("Param/Value/3BEF4D5C");
        gv_skills[3].lv_ability = "KarassPsiStorm";
        gv_skills[3].lv_icon = "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds";

        gv_skills[4].lv_level = 75;
        gv_skills[4].lv_name = StringExternal("Param/Value/C60EE136");
        gv_skills[4].lv_description = StringExternal("Param/Value/F131D237");
        gv_skills[4].lv_ability = "HyperionYamatoSpecial";
        gv_skills[4].lv_icon = "Assets\\Textures\\btn-ability-terran-yamatogun-color.dds";

        gv_skills[5].lv_level = 101;
        gv_skills[5].lv_name = StringExternal("Param/Value/ECA81DCC");
        gv_skills[5].lv_description = StringExternal("Param/Value/5A2F13C5");
        gv_skills[5].lv_ability = "OdinNuclearStrike";
        gv_skills[5].lv_icon = "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds";

        gv_skills[6].lv_level = 200;
        gv_skills[6].lv_name = StringExternal("Param/Value/B292AA85");
        gv_skills[6].lv_description = StringExternal("Param/Value/6A3258C0");
        gv_skills[6].lv_ability = "Vortex";
        gv_skills[6].lv_icon = "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds";

        if (gv_GameMode != "Versus") {
            gv_secondaryskills[0].lv_ability = "EMP";
            gv_secondaryskills[0].lv_name = StringExternal("Button/Name/EMP");
            gv_secondaryskills[0].lv_description = StringExternal("Button/Tooltip/EMP");
            gv_secondaryskills[0].lv_icon = "Assets\\Textures\\btn-ability-terran-emp-color.dds";
            gv_secondaryskills[0].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirement0");
        
            gv_secondaryskills[1].lv_ability = "CryoGrenade";
            gv_secondaryskills[1].lv_name = StringExternal("Button/Name/CryoGrenade");
            gv_secondaryskills[1].lv_description = StringExternal("Button/Tooltip/CryoGrenade");
            gv_secondaryskills[1].lv_icon = "Assets\\Textures\\btn-upgrade-nova-btn-upgrade-nova-pulsegrenade.dds";
            gv_secondaryskills[1].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirement0");
        
            gv_secondaryskills[2].lv_ability = "Releasinghiddenenergy";
            gv_secondaryskills[2].lv_name = StringExternal("Button/Name/TrueArchon");
            gv_secondaryskills[2].lv_description = StringExternal("Button/Tooltip/TrueArchon");
            gv_secondaryskills[2].lv_icon = "Assets\\Textures\\talent-vorazun-level05-unlockdarkarchon.dds";
            gv_secondaryskills[2].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirement1");
        
            // gv_secondaryskills[3].lv_ability = "Releasinghiddenenergy2";
            // gv_secondaryskills[3].lv_name = StringExternal("Button/Name/AscendedTrueArchon");
            // gv_secondaryskills[3].lv_description = StringExternal("DOCSTR_TrueArchon");
            // gv_secondaryskills[3].lv_icon = "Assets\\Textures\\btn-unit-protoss-archon-dark.dds";
            // gv_secondaryskills[3].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirement2");
        }

        if (gv_GameMode == "Versus") {

            gv_skills[0].lv_level = 0;
            gv_skills[0].lv_name = StringExternal("Param/Value/F52AE395");
            gv_skills[0].lv_description = StringExternal("Button/Tooltip/TossShredderGrenadeVersus");
            gv_skills[0].lv_ability = "BonesTossGrenade";
            gv_skills[0].lv_icon = "Assets\\Textures\\btn-ability-terran-tychustossgrenade.dds";

            gv_skills[1].lv_level = 10;
            gv_skills[1].lv_name = StringExternal("Button/Name/SeekerMissileVersus");
            gv_skills[1].lv_description = StringExternal("Button/Tooltip/SeekerMissileVersus");
            gv_skills[1].lv_ability = "SeekerMissileVersus";
            gv_skills[1].lv_icon = "Assets\\Textures\\btn-ability-terran-huntermissile-color.dds";

            gv_skills[2].lv_level = 25;
            gv_skills[2].lv_name = StringExternal("Button/Name/FeedbackVersus");
            gv_skills[2].lv_description = StringExternal("Button/Tooltip/FeedbackVersus");
            gv_skills[2].lv_ability = "FeedbackVersus";
            gv_skills[2].lv_icon = "Assets\\Textures\\btn-ability-protoss-feedback-color.dds";

            gv_skills[3].lv_level = 50;
            gv_skills[3].lv_name = StringExternal("Button/Name/PsiStormVersus");
            gv_skills[3].lv_description = StringExternal("Button/Tooltip/PsiStormVersus");
            gv_skills[3].lv_ability = "PsiStormVersus";
            gv_skills[3].lv_icon = "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds";

            gv_skills[4].lv_level = 75;
            gv_skills[4].lv_name = StringExternal("Button/Name/SnipeVersus");
            gv_skills[4].lv_description = StringExternal("Button/Tooltip/SnipeVersus");
            gv_skills[4].lv_ability = "SnipeVersus";
            gv_skills[4].lv_icon = "Assets\\Textures\\btn-ability-terran-snipe-color.dds";

            gv_skills[5].lv_level = 101;
            gv_skills[5].lv_name = StringExternal("Button/Name/IrradiateVersus");
            gv_skills[5].lv_description = StringExternal("Button/Tooltip/IrradiateVersus");
            gv_skills[5].lv_ability = "IrradiateVersus";
            gv_skills[5].lv_icon = "Assets\\Textures\\btn-upgrade-swann-irradiate.dds";

            gv_skills[6].lv_level = 200;
            gv_skills[6].lv_name = StringExternal("Button/Name/VortexVersus");
            gv_skills[6].lv_description = StringExternal("Button/Tooltip/VortexVersus");
            gv_skills[6].lv_ability = "VortexVersus";
            gv_skills[6].lv_icon = "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds";


            gv_secondaryskills[0].lv_ability = "AbsorberShieldVersus";
            gv_secondaryskills[0].lv_name = StringExternal("Button/Name/AbsorberShieldVersus");
            gv_secondaryskills[0].lv_description = StringExternal("Button/Tooltip/AbsorberShieldVersus");
            gv_secondaryskills[0].lv_icon = "Assets\\Textures\\btn-ability-terran-defensivematrix.dds";
            gv_secondaryskills[0].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirement0");
        
            gv_secondaryskills[1].lv_ability = "TransfusionVersus";
            gv_secondaryskills[1].lv_name = StringExternal("Button/Name/TransfusionVersus");
            gv_secondaryskills[1].lv_description = StringExternal("Button/Tooltip/TransfusionVersus");
            gv_secondaryskills[1].lv_icon = "Assets\\Textures\\btn-ability-zerg-transfusion-color.dds";
            gv_secondaryskills[1].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirementVersus1");
        
            gv_secondaryskills[2].lv_ability = "EnergyNovaVersus";
            gv_secondaryskills[2].lv_name = StringExternal("Button/Name/EnergyNova2");
            gv_secondaryskills[2].lv_description = StringExternal("Button/Tooltip/EnergyNova2");
            gv_secondaryskills[2].lv_icon = "Assets\\Textures\\btn-tips-terran-energynova.dds";
            gv_secondaryskills[2].lv_requirements = StringExternal("DOCSTR_SecondarySkillRequirementVersus2");
        }

        while (gv_skills[gv_totalskills].lv_ability != "") {
            gv_totalskills += 1;
        }
        while (gv_secondaryskills[gv_totalsecondaryskills].lv_ability != "") {
            gv_totalsecondaryskills += 1;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationSkills_Init () {
        gt_CustomisationSkills = TriggerCreate("gt_CustomisationSkills_Func");
        TriggerAddEventMapInit(gt_CustomisationSkills);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Customisation Prestiges (prestige info)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationPrestiges_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }
        gv_prestiges[0].lv_prestigelevel = 0;
        gv_prestiges[0].lv_name = StringExternal("Param/Value/68E2AB29");
        gv_prestiges[0].lv_description = StringExternal("Param/Value/68E2AB29");
        gv_prestiges[0].lv_behavior = "";
        gv_prestiges[0].lv_icon = "Assets\\Textures\\genericglow64.dds";

        gv_prestiges[1].lv_prestigelevel = 1;
        gv_prestiges[1].lv_name = StringExternal("Behavior/Name/PlasmaCollector");
        gv_prestiges[1].lv_description = StringExternal("Behavior/Tooltip/PlasmaCollector");
        gv_prestiges[1].lv_behavior = "PlasmaCollector";
        gv_prestiges[1].lv_icon = "Assets\\Textures\\btn-lostviking-plasmamissile.dds";

        gv_prestiges[2].lv_prestigelevel = 1;
        gv_prestiges[2].lv_name = StringExternal("Behavior/Name/RedLazer");
        gv_prestiges[2].lv_description = StringExternal("Behavior/Tooltip/RedLazer");
        gv_prestiges[2].lv_behavior = "RedLazer";
        gv_prestiges[2].lv_icon = "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds";
        
        gv_prestiges[3].lv_prestigelevel = 1;
        gv_prestiges[3].lv_name = StringExternal("Behavior/Name/GasGatherer");
        gv_prestiges[3].lv_description = StringExternal("Behavior/Tooltip/GasGatherer");
        gv_prestiges[3].lv_behavior = "GasGatherer";
        gv_prestiges[3].lv_icon = "Assets\\Textures\\icon-gas-terran_nobg.dds";

        gv_prestiges[4].lv_prestigelevel = 2;
        gv_prestiges[4].lv_name = StringExternal("Behavior/Name/PsiStorm2");
        gv_prestiges[4].lv_description = StringExternal("Behavior/Tooltip/PsiStorm2");
        gv_prestiges[4].lv_behavior = "PsiStorm2";
        gv_prestiges[4].lv_icon = "Assets\\Textures\\btn-upgrade-artanis-healingpsionicstorm.dds";

        gv_prestiges[5].lv_prestigelevel = 3;
        gv_prestiges[5].lv_name = StringExternal("Behavior/Name/DamageAura");
        gv_prestiges[5].lv_description = StringExternal("Behavior/Tooltip/DamageAura");
        gv_prestiges[5].lv_behavior = "DamageAura";
        gv_prestiges[5].lv_icon = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds";

        gv_prestiges[6].lv_prestigelevel = 4;
        gv_prestiges[6].lv_name = StringExternal("Behavior/Name/AccumulativeReserves");
        gv_prestiges[6].lv_description = StringExternal("Behavior/Tooltip/AccumulativeReserves");
        gv_prestiges[6].lv_behavior = "AccumulativeReserves";
        gv_prestiges[6].lv_icon = "Assets\\Textures\\btn-upgrade-protoss-khaydarinamulet.dds";

        gv_prestiges[7].lv_prestigelevel = 5;
        gv_prestiges[7].lv_name = StringExternal("Behavior/Name/Hallucinator");
        gv_prestiges[7].lv_description = StringExternal("Behavior/Tooltip/Hallucinator");
        gv_prestiges[7].lv_behavior = "Hallucinator";
        gv_prestiges[7].lv_icon = "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds";

        gv_prestiges[8].lv_prestigelevel = 6;
        gv_prestiges[8].lv_name = StringExternal("Behavior/Name/ChronoAccelerator");
        gv_prestiges[8].lv_description = StringExternal("Behavior/Tooltip/ChronoAccelerator");
        gv_prestiges[8].lv_behavior = "ChronoAccelerator";
        gv_prestiges[8].lv_icon = "Assets\\Textures\\btn-ability-protoss-protoncharge-color.dds";

        gv_prestiges[9].lv_prestigelevel = 7;
        gv_prestiges[9].lv_name = StringExternal("Behavior/Name/CrazyMineralz");
        gv_prestiges[9].lv_description = StringExternal("Behavior/Tooltip/CrazyMineralz");
        gv_prestiges[9].lv_behavior = "CrazyMineralz";
        gv_prestiges[9].lv_icon = "Assets\\Textures\\btn-tips-richminerals.dds";

        gv_prestiges[10].lv_prestigelevel = 8;
        gv_prestiges[10].lv_name = StringExternal("Behavior/Name/SpeedUp");
        gv_prestiges[10].lv_description = StringExternal("Behavior/Tooltip/SpeedUp");
        gv_prestiges[10].lv_behavior = "SpeedUp";
        gv_prestiges[10].lv_icon = "Assets\\Textures\\btn-techupgrade-terran-immortalityprotocol.dds";
        
        // gv_prestiges[11].lv_prestigelevel = 9;
        // gv_prestiges[11].lv_name = StringExternal("Behavior/Name/HealerZone");
        // gv_prestiges[11].lv_description = StringExternal("Behavior/Tooltip/HealerZone");
        // gv_prestiges[11].lv_behavior = "HealerZone";
        // gv_prestiges[11].lv_icon = "Assets\\Textures\\btn-ability-terran-advancedhealingai.dds";
        gv_prestiges[11].lv_prestigelevel = 9;
        gv_prestiges[11].lv_name = StringExternal("Button/Name/CalldownRepairDrone");
        gv_prestiges[11].lv_description = StringExternal("Behavior/Tooltip/RepairDrones");
        gv_prestiges[11].lv_behavior = "RepairDrones";
        gv_prestiges[11].lv_icon = "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds";

        gv_prestiges[12].lv_prestigelevel = 10;
        gv_prestiges[12].lv_name = StringExternal("Behavior/Name/Destroyer");
        gv_prestiges[12].lv_description = StringExternal("Behavior/Tooltip/Destroyer");
        gv_prestiges[12].lv_behavior = "Destroyer";
        gv_prestiges[12].lv_icon = "Assets\\Textures\\btn-ability-stetmann-corruptorcausticspray.dds";

        gv_prestiges[13].lv_prestigelevel = 11;
        gv_prestiges[13].lv_name = StringExternal("Behavior/Name/GuardianShield2");
        gv_prestiges[13].lv_description = StringExternal("Behavior/Tooltip/GuardianShield2");
        gv_prestiges[13].lv_behavior = "GuardianShield2";
        gv_prestiges[13].lv_icon = "Assets\\Textures\\btn-ability-zeratul-warpprism-shieldboosters.dds";

        gv_prestiges[14].lv_prestigelevel = 12;
        gv_prestiges[14].lv_name = StringExternal("Behavior/Name/CoreInside");
        gv_prestiges[14].lv_description = StringExternal("Param/Value/1112A1A9");
        gv_prestiges[14].lv_behavior = "CoreInside";
        gv_prestiges[14].lv_icon = "Assets\\Textures\\Buttons\\Cores\\GreatCore.dds";


        while (gv_prestiges[gv_totalprestiges].lv_icon != "") {
            gv_totalprestiges += 1;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationPrestiges_Init () {
        gt_CustomisationPrestiges = TriggerCreate("gt_CustomisationPrestiges_Func");
        TriggerAddEventMapInit(gt_CustomisationPrestiges);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Customisation Roles (role info)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationRoles_Func (bool testConds, bool runActions) {
        int init_i;
        int lv_breakloop;
        // Actions
        if (!runActions) {
            return true;
        }

        for (init_i = 1; init_i <= 5; init_i += 1) {
            gv_roles[init_i][1].lv_wins = 0;
            gv_roles[init_i][2].lv_wins = 3;
            gv_roles[init_i][3].lv_wins = 8;
            gv_roles[init_i][4].lv_wins = 15;
            gv_roles[init_i][5].lv_wins = 25;
            gv_roles[init_i][6].lv_wins = 40;

            gv_roles[1][init_i].lv_name = StringExternal("Upgrade/Name/WallMastery" + IntToString(init_i));
            gv_roles[1][init_i].lv_description = StringExternal("Button/Tooltip/" + "WallMastery" + IntToString(init_i));
            gv_roles[1][init_i].lv_upgrade = "WallMastery" + IntToString(init_i);
            gv_roles[1][init_i].lv_role = "Wallrole";
            gv_roles[1][init_i].lv_roleicon = "Assets\\Textures\\btn-building-protoss-pylon.dds";

            gv_roles[2][init_i].lv_name = StringExternal("Upgrade/Name/CannonMastery" + IntToString(init_i));
            gv_roles[2][init_i].lv_description = StringExternal("Button/Tooltip/" + "CannonMastery" + IntToString(init_i));
            gv_roles[2][init_i].lv_upgrade = "CannonMastery" + IntToString(init_i);
            gv_roles[2][init_i].lv_role = "Cannonrole";
            gv_roles[2][init_i].lv_roleicon = "Assets\\Textures\\btn-building-protoss-photoncannon.dds";
            
            gv_roles[3][init_i].lv_name = StringExternal("Upgrade/Name/HealerMastery" + IntToString(init_i));
            gv_roles[3][init_i].lv_description = StringExternal("Button/Tooltip/" + "HealerMastery" + IntToString(init_i));
            gv_roles[3][init_i].lv_upgrade = "HealerMastery" + IntToString(init_i);
            gv_roles[3][init_i].lv_role = "Healerrole";
            gv_roles[3][init_i].lv_roleicon = "Assets\\Textures\\btn-building-protoss-fleetbeacon.dds";

            gv_roles[4][init_i].lv_name = StringExternal("Upgrade/Name/GeneratorMastery" + IntToString(init_i));
            gv_roles[4][init_i].lv_description = StringExternal("Button/Tooltip/" + "GeneratorMastery" + IntToString(init_i));
            gv_roles[4][init_i].lv_upgrade = "GeneratorMastery" + IntToString(init_i);
            gv_roles[4][init_i].lv_role = "Generatorrole";
            gv_roles[4][init_i].lv_roleicon = "Assets\\Textures\\btn-building-terran-fusioncore.dds";

            gv_roles[5][init_i].lv_name = StringExternal("Upgrade/Name/EconomyMastery" + IntToString(init_i));
            gv_roles[5][init_i].lv_description = StringExternal("Button/Tooltip/" + "EconomyMastery" + IntToString(init_i));
            gv_roles[5][init_i].lv_upgrade = "EconomyMastery" + IntToString(init_i);
            gv_roles[5][init_i].lv_role = "Economyrole";
            gv_roles[5][init_i].lv_roleicon = "Assets\\Textures\\Buttons\\Cores\\GreatestCore.dds";

            gv_roles[6][init_i].lv_name = StringExternal("Upgrade/Name/MercenaryMastery" + IntToString(init_i));
            gv_roles[6][init_i].lv_description = StringExternal("Button/Tooltip/" + "MercenaryMastery" + IntToString(init_i));
            gv_roles[6][init_i].lv_upgrade = "MercenaryMastery" + IntToString(init_i);
            gv_roles[6][init_i].lv_role = "Mercenaryrole";
            gv_roles[6][init_i].lv_roleicon = "Assets\\Textures\\btn-unit-collection-marine-mercenary.dds";
        }
        // Dual Masteries
        gv_roles[1][6].lv_name = StringExternal("Upgrade/Name/DualMasteryWallCannon");
        gv_roles[1][6].lv_upgrade = "DualMasteryWallCannon";
        gv_roles[1][6].lv_description = StringExternal("Button/Tooltip/" + "DualMasteryWallCannons");

        gv_roles[3][6].lv_name = StringExternal("Upgrade/Name/DualMasteryHealersGenerators");
        gv_roles[3][6].lv_upgrade = "DualMasteryHealersGenerators";
        gv_roles[3][6].lv_description = StringExternal("Button/Tooltip/" + "DualMasteryHealGen");
        //

        gv_roles[1][1].lv_masteryicon = "Assets\\Textures\\btn-upgrade-swann-regenerativebiosteel.dds";
        gv_roles[1][2].lv_masteryicon = "Assets\\Textures\\btn-ability-terran-defensivematrix.dds";
        gv_roles[1][3].lv_masteryicon = "Assets\\Textures\\btn-ability-protoss-hallucination.dds";
        gv_roles[1][4].lv_masteryicon = "Assets\\Textures\\btn-ability-stetmann-banelingmanashield.dds";
        gv_roles[1][5].lv_masteryicon = "Assets\\Textures\\btn-unit-terran-targetingdrone.dds";
        gv_roles[1][6].lv_masteryicon = "Assets\\Textures\\btn-unit-terran-perditionturret.dds";

        gv_roles[2][1].lv_masteryicon = "Assets\\Textures\\Buttons\\damageincreased1000.dds";
        gv_roles[2][2].lv_masteryicon = "Assets\\Textures\\btn-tips-laserdrillcontrol.dds";
        gv_roles[2][3].lv_masteryicon = "Assets\\Textures\\longrange_coop.dds";
        gv_roles[2][4].lv_masteryicon = "Assets\\Textures\\noblubox-icon-time-protoss.dds";
        gv_roles[2][5].lv_masteryicon = "Assets\\Textures\\btn-upgrade-mengsk-veterancy.dds";
        gv_roles[2][6].lv_masteryicon = "Assets\\Textures\\btn-unit-terran-perditionturret.dds";

        gv_roles[3][1].lv_masteryicon = "Assets\\Textures\\btn-building-terran-hivemindemulator.dds";
        gv_roles[3][2].lv_masteryicon = "Assets\\Textures\\btn-building-protoss-fleetbeacon.dds";
        gv_roles[3][3].lv_masteryicon = "Assets\\Textures\\btn-upgrade-swann-defensivematrix.dds";
        gv_roles[3][4].lv_masteryicon = "Assets\\Textures\\btn-research-zerg-hivemindemulator.dds";
        gv_roles[3][5].lv_masteryicon = "Assets\\Textures\\btn-upgrade-karax-fleetbeacon.dds";
        gv_roles[3][6].lv_masteryicon = "Assets\\Textures\\btn-ability-terran-advancedhealingai.dds";

        gv_roles[4][1].lv_masteryicon = "Assets\\Textures\\btn-ability-zeratul-chargedcrystal-psionicwinds.dds";
        gv_roles[4][2].lv_masteryicon = "Assets\\Textures\\btn-ability-protoss-voidrayprismaticalignment.dds";
        gv_roles[4][3].lv_masteryicon = "Assets\\Textures\\btn-ability-stetmann-stetelliteoverloadenergy.dds";
        gv_roles[4][4].lv_masteryicon = "Assets\\Textures\\btn-progression-hornerhan-13-junkerfusioncore.dds";
        gv_roles[4][5].lv_masteryicon = "Assets\\Textures\\btn-upgrade-protoss-phoenixrange.dds";
        gv_roles[4][6].lv_masteryicon = "Assets\\Textures\\btn-ability-terran-advancedhealingai.dds";

        gv_roles[5][1].lv_masteryicon = "Assets\\Textures\\nobluebox_trademenu.dds";
        gv_roles[5][2].lv_masteryicon = "Assets\\Textures\\talent-artanis-level03-warpgatecharges.dds";
        gv_roles[5][3].lv_masteryicon = "Assets\\Textures\\btn-building-protoss-nexus.dds";
        gv_roles[5][4].lv_masteryicon = "Assets\\Textures\\btn-building-terran-commandcenter.dds";
        gv_roles[5][5].lv_masteryicon = "Assets\\Textures\\Buttons\\Cores\\GreatestCore.dds";

        gv_roles[6][1].lv_masteryicon = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        gv_roles[6][2].lv_masteryicon = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        gv_roles[6][3].lv_masteryicon = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        gv_roles[6][4].lv_masteryicon = "Assets\\Textures\\btn-building-terran-merccompound.dds";
        gv_roles[6][5].lv_masteryicon = "Assets\\Textures\\btn-building-terran-merccompound.dds";

        init_i = 1;
        lv_breakloop = 0;
        while (gv_roles[init_i][1].lv_upgrade != "") {
            gv_totalroles += 1;
            init_i += 1;
            lv_breakloop += 1;
            if (lv_breakloop > 100) { // prevents accidental permanent "while" loop freezing game
                break;
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationRoles_Init () {
        gt_CustomisationRoles = TriggerCreate("gt_CustomisationRoles_Func");
        TriggerAddEventMapInit(gt_CustomisationRoles);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom skins info
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkinsInfo_Func (bool testConds, bool runActions) {
        int init_i;
        text[7] lv_donorLevelsText;
        // Actions
        if (!runActions) {
            return true;
        }

        // struct gs_DonorCustomSkins {
        //     bool lv_UnlockedByDefaultForAuthor;
        //     string lv_AuthorHandler;
        //     text lv_Name;
        //     text lv_PreUnlockRequirementDescription;
        //     text lv_PostUnlockRequirementDescription;
        //     text lv_AuthorCredits;
        //     string lv_Image;
        //     string lv_Skin;
        //     string lv_BankStorageSection;
        //     string lv_BankStorageKey;
        //     int lv_SkinAchievementDialog;
        // };

        

        gv_DonorCustomSkins[0].lv_name = StringToText("Godlisk");
        gv_DonorCustomSkins[0].lv_preUnlockRequirementDescription = StringToText("Kill ???");
        gv_DonorCustomSkins[0].lv_postUnlockRequirementDescription = StringToText("Kill The Godlisk on Nightmare+ difficulty");
        gv_DonorCustomSkins[0].lv_authorCredits = StringToText("By KarimKarfax");
        gv_DonorCustomSkins[0].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[0].lv_authorHandler = "2-S2-1-432065";

        gv_DonorCustomSkins[1].lv_name = StringToText("Golden Mothership");
        gv_DonorCustomSkins[1].lv_preUnlockRequirementDescription = StringToText("Kill ?? before Night 22 as the strongest");
        gv_DonorCustomSkins[1].lv_postUnlockRequirementDescription = StringToText("Kill all rocks before Night 22 as the strongests");
        gv_DonorCustomSkins[1].lv_authorCredits = StringToText("By KataStrophe");
        gv_DonorCustomSkins[1].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[1].lv_authorHandler = "2-S2-1-8876953";
        gv_DonorCustomSkins[1].lv_isFlyer = true;

        gv_DonorCustomSkins[2].lv_name = StringToText("Molten corgi");
        gv_DonorCustomSkins[2].lv_preUnlockRequirementDescription = StringToText("Survive ??? on Impossible difficulty");
        gv_DonorCustomSkins[2].lv_postUnlockRequirementDescription = StringToText("Survive 9 hours on Impossible difficulty");
        gv_DonorCustomSkins[2].lv_authorCredits = StringToText("By Emezer5");
        gv_DonorCustomSkins[2].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[2].lv_authorHandler = "2-S2-1-4512122";

        gv_DonorCustomSkins[3].lv_name = StringToText("Mortar Punisher");
        gv_DonorCustomSkins[3].lv_preUnlockRequirementDescription = StringToText("Kill 20 ??? in True Form");
        gv_DonorCustomSkins[3].lv_postUnlockRequirementDescription = StringToText("Kill 20 Leviathans in True Form");
        gv_DonorCustomSkins[3].lv_authorCredits = StringToText("By BillyTheKid");
        gv_DonorCustomSkins[3].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[3].lv_authorHandler = "2-S2-1-2651617";

        gv_DonorCustomSkins[4].lv_name = StringToText("Space Cow");
        gv_DonorCustomSkins[4].lv_preUnlockRequirementDescription = StringToText("Win Nightmare+ with 1 laser and without ???");
        gv_DonorCustomSkins[4].lv_postUnlockRequirementDescription = StringToText("Win Nightmare+ with 1 laser and without Robotic Cannons");
        gv_DonorCustomSkins[4].lv_authorCredits = StringToText("By KraveBlaze");
        gv_DonorCustomSkins[4].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[4].lv_authorHandler = "2-S2-1-8802045";

        gv_DonorCustomSkins[5].lv_name = StringToText("Talon Crystalwing");
        gv_DonorCustomSkins[5].lv_preUnlockRequirementDescription = StringToText("Solo Hell speedrun: kill the Nydusworm before the start of night 28 and win the game. This can be done with any Modifier, Role or Prestige you want");
        gv_DonorCustomSkins[5].lv_postUnlockRequirementDescription = StringToText("Solo Hell speedrun: kill the Nydusworm before the start of night 28 and win the game. This can be done with any Modifier, Role or Prestige you want");
        gv_DonorCustomSkins[5].lv_authorCredits = StringToText("By Philip_B");
        gv_DonorCustomSkins[5].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[5].lv_authorHandler = "2-S2-1-2986413";

        gv_DonorCustomSkins[6].lv_name = StringToText("Imperius");
        gv_DonorCustomSkins[6].lv_preUnlockRequirementDescription = StringToText("Become a Mutated Donor");
        gv_DonorCustomSkins[6].lv_postUnlockRequirementDescription = StringToText("Become a Mutated Donor");
        gv_DonorCustomSkins[6].lv_authorCredits = StringToText("By Dragonlord");
        gv_DonorCustomSkins[6].lv_unlockedByDefaultForAuthor = false;
        gv_DonorCustomSkins[6].lv_authorHandler = "2-S2-1-10280276";

        init_i = 0;
        while (gv_DonorCustomSkins[init_i].lv_authorHandler != "") {
            gv_DonorCustomSkins[init_i].lv_skin = "ModelSwap CustomSkin" + IntToString(init_i+1);
            gv_DonorCustomSkins[init_i].lv_bankStorageSection = "kev"; // used for storing skin unlockment
            gv_DonorCustomSkins[init_i].lv_bankStorageKey = "ks" + IntToString(init_i); // used for saving skin choice

            gv_DonorCustomSkins[init_i].lv_icon = "Assets\\Textures\\ui_battlenet_glue_coop_prestigebadge_max.dds";
            gv_DonorCustomSkins[init_i].lv_skinAchievementDialog = c_invalidDialogControlId;
            gv_DonorCustomSkins[init_i].lv_button = c_invalidDialogControlId;
            gv_DonorCustomSkins[init_i].lv_buttonImage = c_invalidDialogControlId;
            gv_DonorCustomSkins[init_i].lv_authorCredits = TextWithColor(gv_DonorCustomSkins[init_i].lv_authorCredits, Color(50.0, 255.0, 255.0));

            gv_TotalCustomSkins += 1;

            init_i += 1;
        }

        // lv_donorLevelsText[0] = TextWithColor(StringToText("Easy Donor"), Color(0.0, 255.0, 255.0)); 0 level is no donation
        lv_donorLevelsText[1] = TextWithColor(StringToText("Normal Donor"), Color(0.0, 255.0, 0.0));
        lv_donorLevelsText[2] = TextWithColor(StringToText("Elite Donor"), Color(255.0, 255.0, 0.0));
        lv_donorLevelsText[3] = TextWithColor(StringToText("Nightmare Donor"), Color(0.0, 255.0, 255.0));
        lv_donorLevelsText[4] = TextWithColor(StringToText("Hell Donor"), Color(255.0, 0.0, 0.0));
        lv_donorLevelsText[5] = TextWithColor(StringToText("Impossible Donor"), Color(255.0, 0.0, 255.0));
        lv_donorLevelsText[6] = TextWithColor(StringToText("Mutated Donor"), Color(255.0, 128.0, 0.0));


        // struct gs_DonorSkins {
        //     string lv_skin;
        //     string lv_icon;
        //     bool lv_isFlyer;
        //     int lv_skinDonorLevel;
        //     int lv_buttonImage;
        //     int lv_button;
        //     text lv_requirementDescription;
        // };

        init_i = 0;
        while (CatalogEntryIsValid(c_gameCatalogModel, ("SwapDonor" + IntToString(init_i)))) { // While SwapDonor0, SwapDonor1, SwapDonor2 etc. skins exist in data
            gv_DonorSkins[init_i].lv_skin = "ModelSwap SwapDonor" + IntToString(init_i);
            gv_DonorSkins[init_i].lv_skinDonorLevel = 4; // Skins are for "Hell Donors" by default - can be changed for all or each skin individually

            gv_DonorSkins[init_i].lv_icon = "Assets\\Textures\\ui_battlenet_glue_coop_prestigebadge_max.dds"; // Dummy icon same for each skin
            gv_DonorSkins[init_i].lv_button = c_invalidDialogControlId;
            gv_DonorSkins[init_i].lv_buttonImage = c_invalidDialogControlId;
            gv_DonorSkins[init_i].lv_isFlyer = false; // Not Flying by default. "False" is already pre-defined by default, just for readability. Can be changed individually
            gv_DonorSkins[init_i].lv_requirementDescription = StringToText("Unlocked at ") + lv_donorLevelsText[gv_DonorSkins[init_i].lv_skinDonorLevel] + StringToText(" level or higher");
            gv_DonorSkins[init_i].lv_bankKey = "ds" + IntToString(init_i);

            gv_TotalDonorSkins += 1;

            init_i += 1;
        }
        
        gv_DonorSkins[0].lv_name = StringToText("Dominion Laborer");
        gv_DonorSkins[1].lv_name = StringToText("Umojan Cyclone");
        gv_DonorSkins[2].lv_name = StringToText("Taldarim Carrier");
        gv_DonorSkins[2].lv_isFlyer = true;
        gv_DonorSkins[3].lv_name = StringToText("Frontiers Medic");

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkinsInfo_Init () {
        gt_CustomSkinsInfo = TriggerCreate("gt_CustomSkinsInfo_Func");
        TriggerAddEventMapInit(gt_CustomSkinsInfo);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Prestige Skins / Event Skins
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkins_Func (bool testConds, bool runActions) {
        int lv_i;
        int lv_x;
        int lv_y;
        int init_i;
        int lv_SkinsDialogLineCounter;
        // Actions
        if (!runActions) {
            return true;
        }


        for (init_i = 0; init_i <= 50; init_i += 1) {
            gv_CosmeticSkinPrestige[init_i].lv_Button = c_invalidDialogControlId;
            gv_CosmeticSkinPrestige[init_i].lv_ButtonImage = c_invalidDialogControlId;
            gv_CosmeticSkinPrestige[init_i].lv_PrestigeRequirement = 0;
            gv_CosmeticSkinPrestige[init_i].lv_name = StringToText("Unknown");
            gv_CosmeticSkinPrestige[init_i].lv_description = StringToText("To be Added...");
            gv_CosmeticSkinPrestige[init_i].lv_icon = "Assets\\Textures\\btn-command-cancel.dds";
            gv_CosmeticSkinPrestige[init_i].lv_bankkey = "P" + IntToString(init_i);
            gv_CosmeticSkinEvent[init_i].lv_Button = c_invalidDialogControlId;
            gv_CosmeticSkinEvent[init_i].lv_ButtonImage = c_invalidDialogControlId;
            gv_CosmeticSkinEvent[init_i].lv_name = StringToText("Unknown");
            gv_CosmeticSkinEvent[init_i].lv_description = StringToText("To be Added...");
            gv_CosmeticSkinEvent[init_i].lv_icon = "Assets\\Textures\\btn-command-cancel.dds";
            gv_CosmeticSkinEvent[init_i].lv_bankkey = "e" + IntToString(init_i);
        }
        
        gv_CosmeticSkinPrestige[0].lv_PrestigeRequirement = 10;
        gv_CosmeticSkinPrestige[0].lv_name = StringToText("Purifier Templar");
        gv_CosmeticSkinPrestige[0].lv_description = StringToText("Unlocked if you've reached Prestige " + IntToString(gv_CosmeticSkinPrestige[0].lv_PrestigeRequirement));
        gv_CosmeticSkinPrestige[0].lv_icon = "Assets\\Textures\\btn-unit-collection-purifier-hightemplar.dds";
        gv_CosmeticSkinPrestige[0].lv_skin = "ModelSwap SwapPurifierTemplar";

        gv_CosmeticSkinPrestige[1].lv_PrestigeRequirement = 20;
        gv_CosmeticSkinPrestige[1].lv_name = StringToText("Carbot Zergling");
        gv_CosmeticSkinPrestige[1].lv_description = StringToText("Unlocked if you've reached Prestige " + IntToString(gv_CosmeticSkinPrestige[1].lv_PrestigeRequirement));
        gv_CosmeticSkinPrestige[1].lv_icon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
        gv_CosmeticSkinPrestige[1].lv_skin = "ModelSwap SwapCarbot";

        gv_CosmeticSkinPrestige[2].lv_PrestigeRequirement = 30;
        gv_CosmeticSkinPrestige[2].lv_name = StringToText("Elite Taldarim Zealot");
        gv_CosmeticSkinPrestige[2].lv_description = StringToText("Unlocked if you've reached Prestige " + IntToString(gv_CosmeticSkinPrestige[2].lv_PrestigeRequirement));
        gv_CosmeticSkinPrestige[2].lv_icon = "Assets\\Textures\\btn-unit-protoss-alarak-taldarim-zealot-collection.dds";
        gv_CosmeticSkinPrestige[2].lv_skin = "ModelSwap SwapEliteTaldarimZealot";

        gv_CosmeticSkinPrestige[3].lv_PrestigeRequirement = 40;
        gv_CosmeticSkinPrestige[3].lv_name = StringToText("Death Goddess");
        gv_CosmeticSkinPrestige[3].lv_description = StringToText("Unlocked if you've reached Prestige " + IntToString(gv_CosmeticSkinPrestige[3].lv_PrestigeRequirement));
        gv_CosmeticSkinPrestige[3].lv_icon = "Assets\\Textures\\btn-unit-terran-merc-battlecruiser.dds";
        gv_CosmeticSkinPrestige[3].lv_skin = "ModelSwap SwapDeathGoddess";
        gv_CosmeticSkinPrestige[3].lv_isFlyer = true;

        gv_CosmeticSkinPrestige[4].lv_PrestigeRequirement = 50;
        gv_CosmeticSkinPrestige[4].lv_name = StringToText("Elite Taldarim Archon");
        gv_CosmeticSkinPrestige[4].lv_description = StringToText("Unlocked if you've reached Prestige " + IntToString(gv_CosmeticSkinPrestige[4].lv_PrestigeRequirement));
        gv_CosmeticSkinPrestige[4].lv_icon = "Assets\\Textures\\talent-vorazun-level09-darkarchonresearchbundle.dds";
        gv_CosmeticSkinPrestige[4].lv_skin = "ModelSwap SwapEliteTaldarimArchon";

        gv_CosmeticSkinEvent[0].lv_name = StringToText("Mecha Drone");
        gv_CosmeticSkinEvent[0].lv_description = StringToText("Unlocked for first 3 teams beating Nightmare n36 post patch 8.4");
        gv_CosmeticSkinEvent[0].lv_icon = "Assets\\Textures\\btn-unit-collection-blizzcon17-drone.dds";
        gv_CosmeticSkinEvent[0].lv_skin = "ModelSwap Swap36";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[0] = "2-S2-1-3434195";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[1] = "2-S2-1-6816503";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[2] = "2-S2-1-2486203";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[3] = "2-S2-1-432065";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[4] = "2-S2-1-7741735";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[5] = "2-S2-1-4963743";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[6] = "2-S2-2-1747037";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[7] = "2-S2-1-809720";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[8] = "2-S2-1-4772117";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[9] = "2-S2-1-8777112";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[10] = "2-S2-1-3359187";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[11] = "2-S2-2-1135632";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[12] = "2-S2-1-2586937";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[13] = "2-S2-1-4349015";
        gv_CosmeticSkinEvent[0].lv_EventHandlers[14] = "2-S2-1-7317868";

        gv_CosmeticSkinEvent[1].lv_name = StringToText("Mecha Hybrid");
        gv_CosmeticSkinEvent[1].lv_description = StringToText("Unlocked for first 5 teams beating Impossible difficulty");
        gv_CosmeticSkinEvent[1].lv_icon = "Assets\\Textures\\wireframe-partparcel-hybrid-moebiushybrid.dds";
        gv_CosmeticSkinEvent[1].lv_skin = "ModelSwap SwapImpossible";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[0] = "2-S2-1-432065";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[1] = "2-S2-1-4996699";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[2] = "2-S2-1-4772117";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[3] = "2-S2-1-1030178";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[4] = "2-S2-1-1195224";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[5] = "2-S2-1-9983537";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[6] = "2-S2-1-8409975";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[7] = "2-S2-1-7794011";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[8] = "2-S2-1-2171888";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[9] = "2-S2-1-4262675";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[10] = "2-S2-1-3680336";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[11] = "2-S2-1-2429853";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[12] = "2-S2-1-482532";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[13] = "2-S2-1-3193295";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[14] = "2-S2-2-594823";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[15] = "2-S2-1-4963743";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[16] = "2-S2-1-4319543";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[17] = "2-S2-1-809720";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[18] = "2-S2-1-7410316";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[19] = "2-S2-1-4403442";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[20] = "2-S2-1-3434195";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[21] = "2-S2-1-5648271";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[22] = "2-S2-1-2586937";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[23] = "2-S2-1-7741735";
        gv_CosmeticSkinEvent[1].lv_EventHandlers[24] = "2-S2-2-1789482";

        // string[51] gv_personalskin1Handlers;
        // string[51] gv_personalskin1Skins;
        // string[51] gv_personalskin2Skins;
        // bool[51] gv_personalskin1IsFlyer

        gv_personalskinHandlersEU[0] = "2-S2-1-432065";
        gv_personalskinHandlersNA[0] = "1-S2-1-8578992";
        gv_personalskin1Skins[0] = "ModelSwap SwapKarim";
        gv_personalskin2Skins[0] = "ModelSwap SwapKarim2";

        gv_personalskinHandlersEU[1] = "2-S2-2-1135632";
        gv_personalskinHandlersNA[1] = "none";
        gv_personalskin1Skins[1] = "ModelSwap SwapBMaks";

        gv_personalskinHandlersEU[2] = "2-S2-2-594823";
        gv_personalskinHandlersNA[2] = "none";
        gv_personalskin1Skins[2] = "ModelSwap SwapRazdvaraz";

        gv_personalskinHandlersEU[3] = "2-S2-1-9983537";
        gv_personalskinHandlersNA[3] = "none";
        gv_personalskin1Skins[3] = "ModelSwap SwapUnari";

        gv_personalskinHandlersEU[4] = "2-S2-1-3434195";
        gv_personalskinHandlersNA[4] = "none";
        gv_personalskin1Skins[4] = "ModelSwap SwapPunkt";

        gv_personalskinHandlersEU[5] = "2-S2-1-2486203";
        gv_personalskinHandlersNA[5] = "none";
        gv_personalskin1Skins[5] = "ModelSwap SwapAnanas";

        gv_personalskinHandlersEU[6] = "2-S2-1-4963743";
        gv_personalskinHandlersNA[6] = "none";
        gv_personalskin1Skins[6] = "ModelSwap SwapHikari";

        gv_personalskinHandlersEU[7] = "2-S2-1-7741735";
        gv_personalskinHandlersNA[7] = "none";
        gv_personalskin1Skins[7] = "ModelSwap SwapSerenity";
        gv_personalskin2Skins[7] = "ModelSwap SwapSerenity2";
        gv_personalskin2IsFlyer[7] = true;

        gv_personalskinHandlersEU[8] = "2-S2-1-4772117";
        gv_personalskinHandlersNA[8] = "none";
        gv_personalskin1Skins[8] = "ModelSwap SwapCurino";

        gv_personalskinHandlersEU[9] = "2-S2-1-4319543";
        gv_personalskinHandlersNA[9] = "1-S2-1-9668573";
        gv_personalskin1Skins[9] = "ModelSwap SwapWickedWolf";
        gv_personalskin2Skins[9] = "ModelSwap SwapWickedWolf2";

        gv_personalskinHandlersEU[10] = "2-S2-1-1030178";
        gv_personalskinHandlersNA[10] = "none";
        gv_personalskin1Skins[10] = "ModelSwap Swapwr0s";

        gv_personalskinHandlersEU[11] = "2-S2-1-809720";
        gv_personalskinHandlersNA[11] = "none";
        gv_personalskin1Skins[11] = "ModelSwap SwapKath";

        gv_personalskinHandlersEU[12] = "2-S2-1-3975502";
        gv_personalskinHandlersNA[12] = "none";
        gv_personalskin1Skins[12] = "ModelSwap SwapMagyarerik";

        gv_personalskinHandlersEU[13] = "2-S2-1-2630458";
        gv_personalskinHandlersNA[13] = "none";
        gv_personalskin1Skins[13] = "ModelSwap SwapCommoner";

        gv_personalskinHandlersEU[14] = "2-S2-1-2816955";
        gv_personalskinHandlersNA[14] = "none";
        gv_personalskin1Skins[14] = "ModelSwap SwapAltGamz";

        gv_personalskinHandlersEU[15] = "2-S2-1-3680336";
        gv_personalskinHandlersNA[15] = "none";
        gv_personalskin1Skins[15] = "ModelSwap SwapSwift";

        gv_personalskinHandlersEU[16] = "2-S2-1-4785388";
        gv_personalskinHandlersNA[16] = "none";
        gv_personalskin1Skins[16] = "ModelSwap SwapHappyBee";

        gv_personalskinHandlersEU[17] = "2-S2-1-1240617";
        gv_personalskinHandlersNA[17] = "none";
        gv_personalskin1Skins[17] = "ModelSwap SwapGlacio";
        gv_personalskin2Skins[17] = "ModelSwap SwapGlacio2";

        gv_personalskinHandlersEU[18] = "2-S2-1-10622812";
        gv_personalskinHandlersNA[18] = "none";
        gv_personalskin1Skins[18] = "ModelSwap SwapFrosty";

        gv_personalskinHandlersEU[19] = "2-S2-1-4996699";
        gv_personalskinHandlersNA[19] = "none";
        gv_personalskin1Skins[19] = "ModelSwap SwapKiller";

        gv_personalskinHandlersEU[20] = "2-S2-1-4969946";
        gv_personalskinHandlersNA[20] = "none";
        gv_personalskin1Skins[20] = "ModelSwap SwapStormy";

        gv_personalskinHandlersEU[21] = "2-S2-1-2117741";
        gv_personalskinHandlersNA[21] = "none";
        gv_personalskin1Skins[21] = "ModelSwap SwapHoudini";

        gv_personalskinHandlersEU[22] = "2-S2-1-4512122";
        gv_personalskinHandlersNA[22] = "none";
        gv_personalskin1Skins[22] = "ModelSwap SwapEmezer";
        gv_personalskin2Skins[22] = "ModelSwap SwapEmezer2";

        gv_personalskinHandlersEU[23] = "2-S2-1-8876953";
        gv_personalskinHandlersNA[23] = "none";
        gv_personalskin1Skins[23] = "ModelSwap SwapKataStrophe";
        gv_personalskin2Skins[23] = "ModelSwap SwapKataStrophe2";

        gv_personalskinHandlersEU[24] = "2-S2-1-2651617";
        gv_personalskinHandlersNA[24] = "none";
        gv_personalskin1Skins[24] = "ModelSwap SwapBillyTheKid";
        gv_personalskin2Skins[24] = "ModelSwap SwapBillyTheKid2";

        gv_personalskinHandlersEU[25] = "2-S2-1-10280276";
        gv_personalskinHandlersNA[25] = "none";
        gv_personalskin1Skins[25] = "ModelSwap SwapDragonLord";
        gv_personalskin2Skins[25] = "ModelSwap SwapDragonLord2";

        gv_personalskinHandlersEU[26] = "2-S2-1-8802045";
        gv_personalskinHandlersNA[26] = "none";
        gv_personalskin1Skins[26] = "ModelSwap SwapKraveBlaze";
        gv_personalskin1IsFlyer[26] = true;
        gv_personalskin2Skins[26] = "ModelSwap SwapKraveBlaze2";

        gv_personalskinHandlersEU[27] = "2-S2-1-10782253";
        gv_personalskinHandlersNA[27] = "none";
        gv_personalskin1Skins[27] = "ModelSwap SwapShynoxke";
        gv_personalskin2Skins[27] = "ModelSwap SwapShynoxke2";

        gv_personalskinHandlersEU[28] = "2-S2-1-2986413";
        gv_personalskinHandlersNA[28] = "none";
        gv_personalskin1Skins[28] = "ModelSwap SwapPhilipB";
        gv_personalskin2Skins[28] = "ModelSwap SwapPhilipB2";

        gv_personalskinHandlersEU[29] = "2-S2-1-5594043";
        gv_personalskinHandlersNA[29] = "none";
        gv_personalskin1Skins[29] = "ModelSwap SwapJustus";

        gv_personalskinHandlersEU[30] = "2-S2-1-7477982";
        gv_personalskinHandlersNA[30] = "none";
        gv_personalskin1Skins[30] = "ModelSwap SwapPraj";

        gv_personalskinHandlersEU[31] = "2-S2-2-1789482";
        gv_personalskinHandlersNA[31] = "none";
        gv_personalskin1Skins[31] = "ModelSwap SwapBaldi";
        gv_personalskin2Skins[31] = "ModelSwap SwapBaldi2";

        gv_personalskinHandlersEU[32] = "2-S2-1-5456075";
        gv_personalskinHandlersNA[32] = "none";
        gv_personalskin1Skins[32] = "ModelSwap SwapOverMyMind";
        gv_personalskin2Skins[32] = "ModelSwap SwapOverMyMind2";

        gv_personalskinHandlersEU[33] = "2-S2-1-10060672";
        gv_personalskinHandlersNA[33] = "none";
        gv_personalskin1Skins[33] = "ModelSwap SwapShniper";

        gv_personalskinHandlersEU[34] = "2-S2-1-2064549";
        gv_personalskinHandlersNA[34] = "none";
        gv_personalskin1Skins[34] = "ModelSwap SwapTonic";
        gv_personalskin2Skins[34] = "ModelSwap SwapTonic2";

        gv_personalskinHandlersEU[35] = "2-S2-1-4409095";
        gv_personalskinHandlersNA[35] = "none";
        gv_personalskin1Skins[35] = "ModelSwap SwapWhiteDuckee";
        gv_personalskin2Skins[35] = "ModelSwap SwapWhiteDuckee2";

        gv_personalskinHandlersEU[36] = "2-S2-1-4772882";
        gv_personalskinHandlersNA[36] = "none";
        gv_personalskin1Skins[36] = "ModelSwap SwapOrion";

        gv_personalskinHandlersEU[37] = "2-S2-1-3617614";
        gv_personalskinHandlersNA[37] = "none";
        gv_personalskin1Skins[37] = "ModelSwap SwapToro";
        gv_personalskin2Skins[37] = "ModelSwap SwapToro2";

        gv_personalskinHandlersEU[38] = "2-S2-1-7901869"; // yatagarasu
        gv_personalskinHandlersNA[38] = "none";
        gv_personalskin1Skins[38] = "ModelSwap SwapYata";
        // gv_personalskin2Skins[38] = "ModelSwap SwapYata2";
        
        gv_personalskinHandlersEU[39] = "2-S2-1-560458"; // skavejo
        gv_personalskinHandlersNA[39] = "none";
        gv_personalskin1Skins[39] = "ModelSwap SwapSka";
        gv_personalskin2Skins[39] = "ModelSwap SwapSka2";

        while (gv_CosmeticSkinPrestige[gv_TotalPrestigeSkins].lv_icon != "Assets\\Textures\\btn-command-cancel.dds") {
            gv_TotalPrestigeSkins += 1;
        }

        while (gv_CosmeticSkinEvent[gv_TotalEventSkins].lv_icon != "Assets\\Textures\\btn-command-cancel.dds") {
            gv_TotalEventSkins += 1;
        }

        init_i = 0;
        while (gv_personalskin1Skins[init_i] != "") {
            gv_TotalPersonalSkins1 += 1;
            if (gv_personalskin2Skins[init_i] != "") {
                gv_TotalPersonalSkins2 += 1;
            }
            init_i += 1;
        }
        init_i = 0;

        // for (init_i = 0; init_i <= 50; init_i += 1) {
        //     if (gv_personalskin1Skins[init_i] != "") {
        //         gv_TotalPersonalSkins1 += 1;
        //     }

        //     if (gv_personalskin2Skins[init_i] != "") {
        //         gv_TotalPersonalSkins2 += 1;
        //     }
        // }


        DialogCreate(450, 800, c_anchorLeft, 20, -150, true);
        gv_CosmeticSkinDialog = DialogLastCreated();
        DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupAll(), false);

        lv_SkinsDialogLineCounter = 1;
        lv_x = 55;
        lv_y = 30;

        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTopLeft, lv_x, lv_y, StringToText(""), Color(100,100,100), false, 2.0);
        lv_y += 20;

        // Default + 2 personal skins
        libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), "Assets\\Textures\\btn-unit-protoss-probe.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText("Default<n/>Change to your default chosen Worker skin"), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        gv_CosmeticSkinDefaultButton = DialogControlLastCreated();
        lv_x += 64;
        libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), "Assets\\Textures\\btn-number-1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText("Personal Skin 1<n/>Unlocked by making Donation"), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        gv_personalskin1Button = DialogControlLastCreated();
        DialogControlSetEnabled(gv_personalskin1Button, PlayerGroupAll(), false);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            IntLoopBegin(0, gv_TotalPersonalSkins1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((PlayerHandle(PlayerGroupLoopCurrent()) == gv_personalskinHandlersEU[IntLoopCurrent()] || PlayerHandle(PlayerGroupLoopCurrent()) == gv_personalskinHandlersNA[IntLoopCurrent()]) && gv_personalskin1Skins[IntLoopCurrent()] != "") {
                    DialogControlSetEnabled(gv_personalskin1Button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
            IntLoopEnd();
        }
        PlayerGroupLoopEnd();

        lv_x += 64;
        libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), "Assets\\Textures\\btn-number-2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText("Personal Skin 2<n/>Unlocked by making Donation"), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        gv_personalskin2Button = DialogControlLastCreated();
        DialogControlSetEnabled(gv_personalskin2Button, PlayerGroupAll(), false);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            IntLoopBegin(0, gv_TotalPersonalSkins1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((PlayerHandle(PlayerGroupLoopCurrent()) == gv_personalskinHandlersEU[IntLoopCurrent()] || PlayerHandle(PlayerGroupLoopCurrent()) == gv_personalskinHandlersNA[IntLoopCurrent()]) && gv_personalskin2Skins[IntLoopCurrent()] != "") {
                    DialogControlSetEnabled(gv_personalskin2Button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
            IntLoopEnd();
        }
        PlayerGroupLoopEnd();
        //

        libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 100, 60, c_anchorBottomRight, 30, 90, StringToText("Save current choice to transfer between games"), StringToText("Save"), "");
        gv_CosmeticSkinDialogSaveButton = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 100, 60, c_anchorBottomRight, 30, 25, StringToText(""), StringToText("Close"), "");
        gv_CosmeticSkinDialogCloseButton = DialogControlLastCreated();
        lv_x = 55;
        lv_y += 90;
        lv_SkinsDialogLineCounter = 1;

        libNtve_gf_CreateDialogItemLabel(gv_CosmeticSkinDialog, 400, 100, c_anchorTopLeft, lv_x, lv_y, StringToText("Prestige Skins"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_TotalPrestigeSkins; lv_i += 1) {
            if (ModI(lv_SkinsDialogLineCounter, 6) == 0) {
                lv_y += 70;
                lv_x = 55;
            }
            libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), gv_CosmeticSkinPrestige[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_CosmeticSkinPrestige[lv_i].lv_ButtonImage = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, gv_CosmeticSkinPrestige[lv_i].lv_name + StringToText("<n/>") + gv_CosmeticSkinPrestige[lv_i].lv_description, StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_CosmeticSkinPrestige[lv_i].lv_Button = DialogControlLastCreated();
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR") >= gv_CosmeticSkinPrestige[lv_i].lv_PrestigeRequirement && gv_CosmeticSkinPrestige[lv_i].lv_PrestigeRequirement != 0) || gv_isadmin[PlayerGroupLoopCurrent()]) {
                    DialogControlSetEnabled(gv_CosmeticSkinPrestige[lv_i].lv_Button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
            PlayerGroupLoopEnd();
            lv_x += 64;
            lv_SkinsDialogLineCounter += 1;
        }

        lv_x = 55;
        lv_y += 90;
        lv_SkinsDialogLineCounter = 1;

        libNtve_gf_CreateDialogItemLabel(gv_CosmeticSkinDialog, 400, 100, c_anchorTopLeft, lv_x, lv_y, StringToText("Event Skins"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_TotalEventSkins; lv_i += 1) {
            if (ModI(lv_SkinsDialogLineCounter, 6) == 0) {
                lv_y += 70;
                lv_x = 55;
            }
            libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), gv_CosmeticSkinEvent[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_CosmeticSkinEvent[lv_i].lv_ButtonImage = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, gv_CosmeticSkinEvent[lv_i].lv_name + StringToText("<n/>") + gv_CosmeticSkinEvent[lv_i].lv_description, StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_CosmeticSkinEvent[lv_i].lv_Button = DialogControlLastCreated();
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                IntLoopBegin(0, 50);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if ((PlayerHandle(PlayerGroupLoopCurrent()) == gv_CosmeticSkinEvent[lv_i].lv_EventHandlers[IntLoopCurrent()] && gv_CosmeticSkinEvent[lv_i].lv_EventHandlers[IntLoopCurrent()] != "") || gv_isadmin[PlayerGroupLoopCurrent()]) {
                        DialogControlSetEnabled(gv_CosmeticSkinEvent[lv_i].lv_Button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                }
                IntLoopEnd();
            }
            PlayerGroupLoopEnd();
            lv_x += 64;
            lv_SkinsDialogLineCounter += 1;
        }

        lv_x = 55;
        lv_y += 90;
        lv_SkinsDialogLineCounter = 1;

        libNtve_gf_CreateDialogItemLabel(gv_CosmeticSkinDialog, 400, 100, c_anchorTopLeft, lv_x, lv_y, StringToText("Custom Skins"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_TotalCustomSkins; lv_i += 1) {
            if (ModI(lv_SkinsDialogLineCounter, 6) == 0) {
                lv_y += 70;
                lv_x = 55;
            }
            libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), gv_DonorCustomSkins[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_DonorCustomSkins[lv_i].lv_buttonImage = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, gv_DonorCustomSkins[lv_i].lv_name + StringToText("<n/>") + gv_DonorCustomSkins[lv_i].lv_preUnlockRequirementDescription + StringToText("<n/>") + gv_DonorCustomSkins[lv_i].lv_authorCredits, StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_DonorCustomSkins[lv_i].lv_button = DialogControlLastCreated();
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if (BankValueGetAsFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[lv_i].lv_bankStorageSection, gv_DonorCustomSkins[lv_i].lv_bankStorageKey) || gv_isadmin[PlayerGroupLoopCurrent()] || (gv_DonorCustomSkins[lv_i].lv_unlockedByDefaultForAuthor && (PlayerHandle(PlayerGroupLoopCurrent()) == gv_DonorCustomSkins[lv_i].lv_authorHandler))) {
                    DialogControlSetEnabled(gv_DonorCustomSkins[lv_i].lv_button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    libNtve_gf_SetDialogItemTooltip(gv_DonorCustomSkins[lv_i].lv_button, gv_DonorCustomSkins[lv_i].lv_name + StringToText("<n/>") + gv_DonorCustomSkins[lv_i].lv_postUnlockRequirementDescription + StringToText("<n/>") + gv_DonorCustomSkins[lv_i].lv_authorCredits, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                }
            }
            PlayerGroupLoopEnd();
            lv_x += 64;
            lv_SkinsDialogLineCounter += 1;
        }

        lv_x = 55;
        lv_y += 90;
        lv_SkinsDialogLineCounter = 1;

        libNtve_gf_CreateDialogItemLabel(gv_CosmeticSkinDialog, 400, 100, c_anchorTopLeft, lv_x, lv_y, StringToText("Donor Skins"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_TotalDonorSkins; lv_i += 1) {
            if (ModI(lv_SkinsDialogLineCounter, 6) == 0) {
                lv_y += 70;
                lv_x = 55;
            }
            libNtve_gf_CreateDialogItemImage(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, StringToText(""), gv_DonorSkins[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_DonorSkins[lv_i].lv_buttonImage = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_CosmeticSkinDialog, 64, 64, c_anchorTopLeft, (lv_x), lv_y, gv_DonorSkins[lv_i].lv_name + StringToText("<n/>") + gv_DonorSkins[lv_i].lv_requirementDescription, StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_DonorSkins[lv_i].lv_button = DialogControlLastCreated();
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((gv_DonateLevelPlayer[PlayerGroupLoopCurrent()] >= gv_DonorSkins[lv_i].lv_skinDonorLevel) || gv_isadmin[PlayerGroupLoopCurrent()]) {
                    DialogControlSetEnabled(gv_DonorSkins[lv_i].lv_button, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
            PlayerGroupLoopEnd();
            lv_x += 64;
            lv_SkinsDialogLineCounter += 1;
        }
        
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkins_Init () {
        gt_CustomSkins = TriggerCreate("gt_CustomSkins_Func");
        // TriggerAddEventMapInit(gt_CustomSkins);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Donators List
    //--------------------------------------------------------------------------------------------------
    bool gt_DonatorsList_Func (bool testConds, bool runActions) {
        int init_i;
        int lv_j;
        // Actions
        if (!runActions) {
            return true;
        }

        for (init_i = 0; init_i <= 6; init_i += 1) {
            gv_Donators[init_i].lv_DonateLevel = init_i+1; 
            // 1 - Normal Donor, 2 - Elite Donor, 3 - Nightmare Donor, 4 - Hell Donor, 5 - Impossible Donor, 6 - Mutated Donor
            // + 1 because all players will start with "0" by default, so that they dont automatically become "Normal Donors"
        }

        // Normal Donors
        gv_Donators[0].lv_DonatorsHandlers[0] = "none";

        // Elite Donors
        gv_Donators[1].lv_DonatorsHandlers[0] = "2-S2-1-2630458"; // Commoner / Jubei
        gv_Donators[1].lv_DonatorsHandlers[1] = "2-S2-1-7477982"; // ViZe (Praj)
        gv_Donators[1].lv_DonatorsHandlers[2] = "2-S2-1-10060672"; // Shniper
        gv_Donators[1].lv_DonatorsHandlers[3] = "2-S2-1-4772882"; // Orion
        gv_Donators[1].lv_DonatorsHandlers[4] = "2-S2-1-7901869"; // Yatagarasu

        // Nightmare Donors
        gv_Donators[2].lv_DonatorsHandlers[0] = "2-S2-1-5594043"; // IlIllIIIllIl / CyroniX#21384 / Justus
        gv_Donators[2].lv_DonatorsHandlers[1] = "2-S2-1-2064549"; // Tonic

        // Hell Donors
        gv_Donators[3].lv_DonatorsHandlers[0] = "2-S2-1-1240617"; // Glacio
        gv_Donators[3].lv_DonatorsProbeName[0] = "WALL-E"; // Glacio

        gv_Donators[3].lv_DonatorsHandlers[1] = "2-S2-1-3975502"; // Magyarerik
        gv_Donators[3].lv_DonatorsProbeName[1] = "EriK"; // Magyarerik

        gv_Donators[3].lv_DonatorsHandlers[2] = "2-S2-1-4409095"; // White Duckee ( Lucky )
        gv_Donators[3].lv_DonatorsProbeName[2] = "White Duckee"; // White Duckee ( Lucky )

        gv_Donators[3].lv_DonatorsHandlers[3] = "2-S2-1-5456075"; // ProbeMind (OverMyMind)
        gv_Donators[3].lv_DonatorsProbeName[3] = "OverMyMind"; // ProbeMind (OverMyMind)

        // Impossible Donors
        gv_Donators[4].lv_DonatorsHandlers[0] = "2-S2-1-8802045";
        gv_Donators[4].lv_DonatorsProbeName[0] = "KraveBlaze"; // KraveBlaze

        gv_Donators[4].lv_DonatorsHandlers[1] = "2-S2-1-8876953";
        gv_Donators[4].lv_DonatorsProbeName[1] = "Trailblazer"; // Katastrophe

        gv_Donators[4].lv_DonatorsHandlers[2] = "2-S2-1-560458"; // Skavejo
        gv_Donators[4].lv_DonatorsProbeName[2] = "Ska";

        gv_Donators[4].lv_DonatorsHandlers[3] = "none";

        // Mutated Donors
        gv_Donators[5].lv_DonatorsHandlers[0] = "2-S2-1-432065";
        gv_Donators[5].lv_DonatorsProbeName[0] = "KarimKarfax"; // KarimKarfax

        gv_Donators[5].lv_DonatorsHandlers[1] = "2-S2-1-4512122";
        gv_Donators[5].lv_DonatorsProbeName[1] = "emezer5"; // Emezer5

        gv_Donators[5].lv_DonatorsHandlers[2] = "2-S2-1-2651617";
        gv_Donators[5].lv_DonatorsProbeName[2] = "BillyTheKid"; // BillyTheKid

        gv_Donators[5].lv_DonatorsHandlers[3] = "2-S2-1-10782253";
        gv_Donators[5].lv_DonatorsProbeName[3] = "Shynoxke"; // Shynoxke

        gv_Donators[5].lv_DonatorsHandlers[4] = "2-S2-1-2986413"; // Philip_B
        gv_Donators[5].lv_DonatorsProbeName[4] = "G.O.A.T.";

        gv_Donators[5].lv_DonatorsHandlers[5] = "2-S2-1-10280276";
        gv_Donators[5].lv_DonatorsProbeName[5] = "Dragonlord"; // Dragonlord

        gv_Donators[5].lv_DonatorsHandlers[6] = "2-S2-1-4620835";
        gv_Donators[5].lv_DonatorsProbeName[6] = "Corporal";

        gv_Donators[5].lv_DonatorsHandlers[7] = "2-S2-2-1789482";
        gv_Donators[5].lv_DonatorsProbeName[7] = "Baldi Business"; // Baldi

        gv_Donators[5].lv_DonatorsHandlers[8] = "2-S2-1-3617614"; // ElToro
        gv_Donators[5].lv_DonatorsProbeName[8] = "Toro"; // ElToro


        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            for (init_i = 0; init_i <= 6; init_i += 1) {
                for (lv_j = 0; lv_j < 101; lv_j += 1) {
                    if (PlayerHandle(PlayerGroupLoopCurrent()) == gv_Donators[init_i].lv_DonatorsHandlers[lv_j]) {
                        gv_DonateLevelPlayer[PlayerGroupLoopCurrent()] = init_i+1;
                        gv_DonateProbeNamePlayer[PlayerGroupLoopCurrent()] = gv_Donators[init_i].lv_DonatorsProbeName[lv_j];
                    }
                }
            }
        }
        PlayerGroupLoopEnd();

        gv_donateLevelTips[1] = StringExternal("DOCSTR_DonorTipsNormal");
        gv_donateLevelTips[2] = StringExternal("DOCSTR_DonorTipsElite");
        gv_donateLevelTips[3] = StringExternal("DOCSTR_DonorTipsNightmare");
        gv_donateLevelTips[4] = StringExternal("DOCSTR_DonorTipsHell");
        gv_donateLevelTips[5] = StringExternal("DOCSTR_DonorTipsImpossible");
        gv_donateLevelTips[6] = StringExternal("DOCSTR_DonorTipsMutated");
        gv_donateLevelTipsTitles[1] = "Normal Donor";
        gv_donateLevelTipsTitles[2] = "Elite Donor";
        gv_donateLevelTipsTitles[3] = "Nightmare Donor";
        gv_donateLevelTipsTitles[4] = "Hell Donor";
        gv_donateLevelTipsTitles[5] = "Impossible Donor";
        gv_donateLevelTipsTitles[6] = "Mutated Donor";
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DonatorsList_Init () {
        gt_DonatorsList = TriggerCreate("gt_DonatorsList_Func");
        TriggerAddEventMapInit(gt_DonatorsList);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Lobby role picks & Prestige level
    //--------------------------------------------------------------------------------------------------
    bool gt_lobbyrole_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        // 0001 any
        // 0002 wall
        // 0003 cannon
        // 0004 healer
        // 0005 generator
        // 0006 economy
        if (gv_GameMode != "Default") {return false;}
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0001")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Any";
            }
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0002")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Wall";
            }
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0003")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Cannon";
            }
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0004")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Healer";
            }
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0005")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Generator";
            }
            if ((GameAttributePlayerValue("2", PlayerGroupLoopCurrent()) == "0006")) {
                gv_lobbyrole[PlayerGroupLoopCurrent()] = "Economy";
            }

        }
        PlayerGroupLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_lobbyrole_Init () {
        gt_lobbyrole = TriggerCreate("gt_lobbyrole_Func");
        TriggerAddEventMapInit(gt_lobbyrole);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomisationSkin
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationSkin_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_skins[0].lv_night = 0;
        gv_skins[0].lv_name = StringExternal("Param/Value/DABFD399");
        gv_skins[0].lv_description = StringExternal("Param/Value/99D12936");
        gv_skins[0].lv_icon = "Assets\\Textures\\btn-unit-protoss-probe.dds";
        gv_skins[0].lv_skin = "ModelSwap Probe";
        gv_skins[0].lv_difficulty = StringExternal("DOCSTR_difficultynights_easy");

        gv_skins[1].lv_night = 10;
        gv_skins[1].lv_name = StringExternal("Param/Value/EE7CF79A");
        gv_skins[1].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/HardShield3") + StringToText("<n/><n/>") + StringExternal("Param/Value/FEE01315");
        gv_skins[1].lv_icon = "Assets\\Textures\\btn-unit-TERRAN-SCV.dds";
        gv_skins[1].lv_skin = "ModelSwap SCV";
        gv_skins[1].lv_comportement = "HardShield3";
        gv_skins[1].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[2].lv_night = 12;
        gv_skins[2].lv_name = StringExternal("Param/Value/0E4F2D0C");
        gv_skins[2].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/QuickWarp") + StringToText("<n/><n/>") + StringExternal("Param/Value/FEE01315");
        gv_skins[2].lv_icon = "Assets\\Textures\\btn-unit-protoss-sentry.dds";
        gv_skins[2].lv_skin = "ModelSwap Sentry";
        gv_skins[2].lv_comportement = "QuickWarp";
        gv_skins[2].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[3].lv_night = 15;
        gv_skins[3].lv_name = StringExternal("Param/Value/5DBF91CB");
        gv_skins[3].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/GreatBoost2") + StringToText("<n/><n/>") + StringExternal("Param/Value/FEE01315");
        gv_skins[3].lv_icon = "Assets\\Textures\\btn-unit-terran-reaper.dds";
        gv_skins[3].lv_skin = "ModelSwap Reaper";
        gv_skins[3].lv_comportement = "GreatBoost2";
        gv_skins[3].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[4].lv_night = 20;
        gv_skins[4].lv_name = StringExternal("Param/Value/F9F00820");
        gv_skins[4].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/HardShield") + StringToText("<n/><n/>") + StringExternal("Param/Value/FEE01315");
        gv_skins[4].lv_icon = "Assets\\Textures\\btn-unit-protoss-stalker.dds";
        gv_skins[4].lv_skin = "ModelSwap Stalker";
        gv_skins[4].lv_comportement = "HardShield";
        gv_skins[4].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[5].lv_night = 25;
        gv_skins[5].lv_name = StringExternal("Param/Value/903501C3");
        gv_skins[5].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/GreatBoost") + StringToText("<n/><n/>") + StringExternal("Param/Value/FEE01315");
        gv_skins[5].lv_icon = "Assets\\Textures\\btn-unit-protoss-hightemplar.dds";
        gv_skins[5].lv_skin = "ModelSwap HighTemplar";
        gv_skins[5].lv_comportement = "GreatBoost";
        gv_skins[5].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[6].lv_night = 30;
        gv_skins[6].lv_name = StringExternal("Param/Value/9B61A9A1");
        gv_skins[6].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/UltimateRage");
        gv_skins[6].lv_icon = "Assets\\Textures\\btn-unit-protoss-mothership.dds";
        gv_skins[6].lv_skin = "ModelSwap Mothership";
        gv_skins[6].lv_comportement = "UltimateRage";
        gv_skins[6].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[7].lv_night = 35;
        gv_skins[7].lv_name = StringExternal("Param/Value/8F5D37AB");
        gv_skins[7].lv_description = StringToText("<n/>") + StringExternal("Behavior/Tooltip/HardShield22");
        gv_skins[7].lv_icon = "Assets\\Textures\\btn-unit-protoss-ARCHON.dds";
        gv_skins[7].lv_skin = "ModelSwap Archon";
        gv_skins[7].lv_comportement = "HardShield22";
        gv_skins[7].lv_difficulty = StringExternal("DOCSTR_difficultynights_normal");

        gv_skins[8].lv_night = 35;
        gv_skins[8].lv_name = StringExternal("Param/Value/4D16AC10");
        gv_skins[8].lv_description = StringExternal("Behavior/Tooltip/BonusZeratulskin");
        gv_skins[8].lv_icon = "Assets\\Textures\\btn-unit-protoss-zeratul.dds";
        gv_skins[8].lv_skin = "ModelSwap Zeratul";
        gv_skins[8].lv_comportement = "BonusZeratulskin";
        gv_skins[8].lv_difficulty = StringExternal("DOCSTR_difficultynights_elite");

        gv_skins[9].lv_night = 35;
        gv_skins[9].lv_name = StringExternal("Param/Value/DEDA8D2D");
        gv_skins[9].lv_description = StringExternal("Behavior/Tooltip/BonusTassadarskin");
        gv_skins[9].lv_icon = "Assets\\Textures\\btn-unit-protoss-tassadar.dds";
        gv_skins[9].lv_skin = "ModelSwap Tassadar";
        gv_skins[9].lv_comportement = "BonusTassadarskin";
        gv_skins[9].lv_difficulty = StringExternal("DOCSTR_difficultynights_elite");

        gv_skins[10].lv_night = 35;
        gv_skins[10].lv_name = StringExternal("Param/Value/DAA5205D");
        gv_skins[10].lv_description = StringExternal("Behavior/Tooltip/HardShield222");
        gv_skins[10].lv_icon = "Assets\\Textures\\btn-unit-protoss-archon-dark.dds";
        gv_skins[10].lv_skin = "ModelSwap Archon";
        gv_skins[10].lv_comportement = "HardShield222";
        gv_skins[10].lv_difficulty = StringExternal("DOCSTR_difficultynights_elite");

        gv_skins[11].lv_night = 35;
        gv_skins[11].lv_name = StringExternal("Param/Value/C6C2FC63");
        gv_skins[11].lv_description = StringExternal("Param/Value/20EFBD5F");
        gv_skins[11].lv_icon = "Assets\\Textures\\btn-unit-protoss-zeratuldarkarchonhero.dds";
        gv_skins[11].lv_skin = "ModelSwap DarkVoice";
        gv_skins[11].lv_comportement = "BonusNightmareArchon";
        gv_skins[11].lv_difficulty = StringExternal("DOCSTR_difficultynights_nightmare");

        gv_skins[12].lv_night = 99;
        gv_skins[12].lv_name = StringExternal("Param/Value/EEB6CE2E");
        gv_skins[12].lv_description = StringExternal("Param/Value/DA1A8B3B");
        gv_skins[12].lv_icon = "Assets\\Textures\\btn-unit-collection-purifier-archon.dds";
        gv_skins[12].lv_skin = "ModelSwap DarkVoice1";
        gv_skins[12].lv_comportement = "HardShield2222";
        gv_skins[12].lv_difficulty = StringExternal("DOCSTR_difficultynights_nightmare");

        gv_skins[13].lv_night = 99;
        gv_skins[13].lv_name = StringToText("???");
        gv_skins[13].lv_description = StringToText("???");
        gv_skins[13].lv_icon = "Assets\\Textures\\Buttons\\btn-unit-protoss-purifier_zera_icon.dds";
        gv_skins[13].lv_skin = "ModelSwap PurifierZeratul";
        gv_skins[13].lv_comportement = "HardShield22222";
        gv_skins[13].lv_difficulty = StringExternal("DOCSTR_difficultynights_impossible");


        while (gv_skins[gv_totalskins].lv_skin != "SetShowing 1") {
            gv_totalskins += 1;
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationSkin_Init () {
        gt_CustomisationSkin = TriggerCreate("gt_CustomisationSkin_Func");
        TriggerAddEventMapInit(gt_CustomisationSkin);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Customisation Mutators
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomisationMutators_Func (bool testConds, bool runActions) {
        int lv_i;
        // Actions
        if (!runActions) {
            return true;
        }

        // gv_mutatortypes: 0 - Negative, 1 - Neutral, 2 - Positive, 3 - Event
        // If not stated gv_mutatortype, default is 0 (Negative)
        // If not stated gv_mutatorcolor, default is Color(100.00, 0.00, 0.00) (Red)
        gv_mutatorname[0] = StringToText("Wheel of Misfortune");
        gv_mutatordescription[0] = StringToText("Random Mutators are added periodically to a maximum of ");
        gv_mutatorimage[0] = "Assets\\Textures\\Mutators\\Mutator_WheelOfMisfortune.dds";
        gv_mutatorbonuslevels[0] = 8;
        gv_mutatorbonuswins[0] = 1;

        gv_mutatorname[1] = StringToText("Tough Beasts");
        gv_mutatordescription[1] = StringToText("Enemy units take less damage, but move slower");
        gv_mutatorimage[1] = "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level3.dds";
        gv_mutatorbonuslevels[1] = 2;

        gv_mutatorname[2] = StringToText("Black Death");
        gv_mutatordescription[2] = StringToText("Some enemies spread a deadly Plague upon death");
        gv_mutatorimage[2] = "Assets\\Textures\\Mutators\\Mutator_Plague.dds";
        gv_mutatorbonuslevels[2] = 4;

        gv_mutatorname[3] = StringToText("We Move Unseen");
        gv_mutatordescription[3] = StringToText("All enemies are permanently cloaked");
        gv_mutatorimage[3] = "Assets\\Textures\\Mutators\\Mutator_WeMoveUnseen.dds";
        gv_mutatorbonuslevels[3] = 2;
        gv_mutatorupgrade[3] = "WeMoveUnseen";

        gv_mutatorname[4] = StringToText("Creepfestation");
        gv_mutatordescription[4] = StringToText("Enemy ground units spread creep");
        gv_mutatorimage[4] = "Assets\\Textures\\btn-ability-zerg-creepspread.dds";
        gv_mutatorbonuslevels[4] = 1;

        gv_mutatorname[5] = StringToText("Speed Freaks");
        gv_mutatordescription[5] = StringToText("Enemies move and attack faster");
        gv_mutatorimage[5] = "Assets\\Textures\\btn-ability-protoss-shadowcharge.dds";
        gv_mutatorbonuslevels[5] = 2;

        gv_mutatorname[6] = StringToText("Mutated Swarm");
        gv_mutatordescription[6] = StringToText("Swarm units are mutating with increased stats");
        gv_mutatorimage[6] = "Assets\\Textures\\btn-ability-zerg-dehaka-essencecollector.dds";
        gv_mutatorbonuslevels[6] = 2;

        gv_mutatorname[7] = StringToText("Seismic Activity");
        gv_mutatordescription[7] = StringToText("Earthquakes can occur, damaging all player structures on the map");
        gv_mutatorimage[7] = "Assets\\Textures\\btn-upgrade-zerg-burrowcharge.dds";
        gv_mutatorbonuslevels[7] = 2;

        gv_mutatorname[8] = StringToText("Utter Darkness");
        gv_mutatordescription[8] = StringToText("Vision Radius is drastically reduced");
        gv_mutatorimage[8] = "Assets\\Textures\\Mutators\\Mutator_UtterDarkness.dds";
        gv_mutatorupgrade[8] = "UtterDarkness";
        gv_mutatorbonuslevels[8] = 2;

        gv_mutatorname[9] = StringToText("Low Oxygen");
        gv_mutatordescription[9] = StringToText("Bio units are slowly dying, lacking oxygen");
        gv_mutatorimage[9] = "Assets\\Textures\\Mutators\\Mutator_LowOxygen.dds";
        gv_mutatorbonuslevels[9] = 1;
        gv_mutatorupgrade[9] = "LowOxygenMutatorLackofOxygenDummy";

        gv_mutatorname[10] = StringToText("Lost Relic");
        gv_mutatordescription[10] = StringToText("One of the Ancient Relics was lost");
        gv_mutatorimage[10] = "Assets\\Textures\\btn-tips-protossrelic.dds";
        gv_mutatorWheelAcceptable[10] = false;
        gv_mutatorbonuslevels[10] = 1;

        gv_mutatorname[11] = StringToText("Hardened Rocks");
        gv_mutatordescription[11] = StringToText("All rocks have twice as much HP");
        gv_mutatorimage[11] = "Assets\\Textures\\btn-tips-rocks.dds";
        gv_mutatorWheelAcceptable[11] = false;
        gv_mutatortype[11] = 1;

        gv_mutatorname[12] = StringToText("Alien Incubation");
        gv_mutatordescription[12] = StringToText("Some enemy units spawn aliens upon death");
        gv_mutatorimage[12] = "Assets\\Textures\\btn-upgrade-zerg-stukov-infestedspawnbroodling.dds";
        gv_mutatorbonuslevels[12] = 2;

        gv_mutatorname[13] = StringToText("Rich Minerals");
        gv_mutatordescription[13] = StringToText("Minerals are enriched to give additional resources");
        gv_mutatorimage[13] = "Assets\\Textures\\btn-ability-protoss-entomb.dds";
        gv_mutatortype[13] = 2;

        gv_mutatorname[14] = StringToText("Energy Field");
        gv_mutatordescription[14] = StringToText("Healers require 20% less energy to operate");
        gv_mutatorimage[14] = "Assets\\Textures\\btn-ability-stetmann-stetelliteoverloadenergy.dds";
        gv_mutatortype[14] = 2;
        gv_mutatorupgrade[14] = "EnergyField";

        gv_mutatorname[15] = StringToText("Resource Rocks");
        gv_mutatordescription[15] = StringToText("Rocks may contain additional resources");
        gv_mutatorimage[15] = "Assets\\Textures\\btn-tips-rocks.dds";
        gv_mutatortype[15] = 2;
        gv_mutatorWheelAcceptable[15] = false;

        gv_mutatorname[16] = StringToText("Rock Dissolution");
        gv_mutatordescription[16] = StringToText("Rocks erode over time");
        gv_mutatorimage[16] = "Assets\\Textures\\btn-ability-zerg-poisonnova.dds";
        gv_mutatorbonuslevels[16] = 2;

        gv_mutatorname[17] = StringToText("Fragile");
        gv_mutatordescription[17] = StringToText("Everything takes more damage");
        gv_mutatorimage[17] = "Assets\\Textures\\btn-ability-dehaka-morearmordamage.dds";
        gv_mutatortype[17] = 1;

        gv_mutatorname[18] = StringToText("Lone Wolf");
        gv_mutatordescription[18] = StringToText("All your offensive units & buildings take less & deal more damage");
        gv_mutatorimage[18] = "Assets\\Textures\\talent-tychus-level14-ultimategear2.dds";
        gv_mutatortype[18] = 2;

        gv_mutatorname[19] = StringToText("Christmas Bonus");
        gv_mutatordescription[19] = StringToText("Increases level and wins rewards for victory");
        gv_mutatorimage[19] = "Assets\\Textures\\giftexchange_coop.dds";
        gv_mutatortype[19] = 3;
        gv_mutatorbonuslevels[19] = 4;
        gv_mutatorbonuswins[19] = 1;

        gv_mutatorname[20] = StringToText("Augmented zergs");
        gv_mutatordescription[20] = StringToText("Enemies periodically receive various buffs");
        gv_mutatorimage[20] = "Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds";
        gv_mutatorbonuslevels[20] = 2;

        // gv_mutatorname[21] = StringToText("Resource Starvation");
        // gv_mutatordescription[21] = StringToText("Ore fields naturally deplete over time");
        // gv_mutatorimage[21] = "Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds";
        // gv_mutatorbonuslevels[21] = 1;


        // gv_mutatorname[21] = StringToText("No One Escapes Death");
        // gv_mutatordescription[21] = StringToText("Leaving or losing the game will substract estimated amount of levels&wins");
        // gv_mutatorimage[21] = "Assets\\Textures\\war3_deathscream.dds";
        // gv_mutatorbonuslevels[21] = 1;

        // gv_mutatorname[9] = StringToText("Elite Reinforcements");
        // gv_mutatordescription[9] = StringToText("Elite Reinforcements mutator");
        // gv_mutatorimage[9] = "wemoveunseen.dds";

        // gv_mutatorname[10] = StringToText("Anomalous Planet");
        // gv_mutatordescription[10] = StringToText("Anomalous Planet activity detected. Upcoming events are unpredictable.");
        // gv_mutatorimage[10] = "Assets\\Textures\\bv_planet1.dds";

        // gv_mutatorname[7] = StringToText("Char Reinforcements");
        // gv_mutatordescription[7] = StringToText("Char Reinforcements mutator");
        // gv_mutatorimage[7] = "wemoveunseen.dds";

        for (lv_i = 0; lv_i <= 100; lv_i += 1) {
            if (gv_mutatortype[lv_i] == 0) {
                gv_mutatorcolor[lv_i] = Color(100.00, 0.00, 0.00);
            }
            if (gv_mutatortype[lv_i] == 1) {
                gv_mutatorcolor[lv_i] = Color(100.00, 86.27, 0.00);
            }
            if (gv_mutatortype[lv_i] == 2) {
                gv_mutatorcolor[lv_i] = Color(0.00, 100.00, 0.00);
            }
            if (gv_mutatortype[lv_i] == 3) {
                gv_mutatorcolor[lv_i] = Color(0.00, 0.00, 100.00);
            }
        }

        gv_mutatorstotal = 20; // Last inclusive; Wheel Of Misfortune not included

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomisationMutators_Init () {
        gt_CustomisationMutators = TriggerCreate("gt_CustomisationMutators_Func");
        TriggerAddEventMapInit(gt_CustomisationMutators);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Dialogue (main dialogue)
    //--------------------------------------------------------------------------------------------------
    bool gt_Dialogue_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;
        int lv_y;
        int lv_int;
        fixed[7] lv_helldone;
        int[7] lv_pl;
        int[7] lv_pl2;
        fixed[7] lv_plinitial;
        int[7] lv_imdone;
        fixed[7] lv_impc;
        int[7] lv_ww;
        int[7] lv_cwz;
        int[7] lv_hws;
        int[7] lv_gnw;
        int[7] lv_eow;
        int[7] lv_lx;
        color lv_prestigecolor;
        fixed[7] lv_sndone;
        string lv_helldonetext;
        string lv_imdonetext;
        string lv_sndonetext;
        string lv_impossibledonetext;
        string auto261222686_ai;
        string auto261222686_ae;
        string auto251222696_ae;
        fixed lv_hv;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        text lv_ez;
        text lv_nrml;
        text lv_elit;
        text lv_nightmr;
        text lv_hll;
        text lv_mpssble;
        text lv_lv;
        text lv_wn;

        // Variable Initialization
        lv_x = 100;
        lv_y = 40;
        auto261222686_ai = "i";
        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));


        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(750, 650, c_anchorCenter, 0, 65, true);
        gv_dialog = DialogLastCreated();
        DialogSetImageVisible(gv_dialog, false);
        libNtve_gf_CreateDialogItemImage(gv_dialog, 750, 650, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 70, 50, c_anchorBottomRight, 0, 0, IntToText(0), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", gv_probeGroupPlayer);
        gv_chronoTexte = DialogControlLastCreated();
        auto261222686_ae = "s";
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, 30, lv_y, StringExternal("Param/Value/3032ED49"), Color(100.00, 100.00, 100.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringToText(""), Color(100,100,100), false, 2.0);
        lv_x += 145;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/6D2AA39C"), Color(50.20, 100.00, 0.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("DOCSTR_SelectionScreenWorker"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_x += 115;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/83922C63"), Color(0.00, 100.00, 100.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("DOCSTR_SelectionScreenSkills"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_x += 100;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/CBE7348E"), Color(100.00, 100.00, 0.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("DOCSTR_SelectionScreenSpeciality"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_x += 120;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/989292EC"), Color(20.00, 0.00, 255.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("DOCSTR_SelectionScreenPrestige"), ColorWithAlpha(0,0,0,0), false, 2.0);
        // lv_x += 120;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/ED1B5712"), Color(255.00, 0.00, 0.00), false, 2.0);
        // lv_x += 50;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringToText("Impossible"), Color(255.00, 0.00, 255.00), false, 2.0);
        // lv_x += 115;
        // libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/343358CB"), Color(100.00, 100.00, 0.00), false, 2.0);
        lv_y += 60;
        lv_x = 50;
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_isbanned[PlayerGroupLoopCurrent()] != true) {
                auto251222696_ae = "m";
                lv_pl[PlayerGroupLoopCurrent()] = 0;
                lv_pl2[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR2");
                lv_plinitial[PlayerGroupLoopCurrent()] = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PR");
                lv_helldone[PlayerGroupLoopCurrent()] = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HLO");
                lv_sndone[PlayerGroupLoopCurrent()] = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "ZUHIB");
                lv_impc[PlayerGroupLoopCurrent()] = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto261222686_ai+auto251222696_ae+"val"));
                lv_imdone[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto261222686_ai+auto251222696_ae+auto261222686_ae));
                while (lv_plinitial[PlayerGroupLoopCurrent()] >= 40.0) {
                    lv_plinitial[PlayerGroupLoopCurrent()] = (lv_plinitial[PlayerGroupLoopCurrent()] / 1.2);
                    lv_plinitial[PlayerGroupLoopCurrent()] = (lv_plinitial[PlayerGroupLoopCurrent()] - 39);
                    lv_pl[PlayerGroupLoopCurrent()] = lv_pl[PlayerGroupLoopCurrent()] + 1;
                }
            }
        }
        PlayerGroupLoopEnd();
        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if (gv_isbanned[PlayerGroupLoopCurrent()] == false) {
                    lv_ww[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "a");
                    lv_cwz[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "e");
                    lv_hws[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "i");
                    lv_gnw[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "f");
                    lv_eow[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "o");
                }
                libNtve_gf_CreateDialogItemImage(gv_dialog, 30, 30, c_anchorTopLeft, (lv_x-35), (lv_y-8), StringToText(""), "Assets\\Textures\\ui_console_icon_help_flat.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_roleimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText("Games won As:<n/>") + StringExternal("Param/Value/262043CE") + TextWithColor(IntToText(lv_ww[PlayerGroupLoopCurrent()]/4), Color(0.0, 249.0, 255.0)) + StringToText("<n/>") + StringExternal("Param/Value/4B30933E") + TextWithColor(IntToText(lv_cwz[PlayerGroupLoopCurrent()]/7), Color(255.0, 0.0, 255.0)) + StringToText("<n/>") + StringExternal("Param/Value/55328CB3") + TextWithColor(IntToText(lv_hws[PlayerGroupLoopCurrent()]/9), Color(0.0, 255.0, 0.0)) + StringToText("<n/>") + StringExternal("Param/Value/4B752AFB") + TextWithColor(IntToText(lv_gnw[PlayerGroupLoopCurrent()]/5), Color(255.0, 0.0, 0.0)) + StringToText("<n/>") + StringExternal("Param/Value/64CC0768") + TextWithColor(IntToText(lv_eow[PlayerGroupLoopCurrent()]/13), Color(255.0, 255.0, 0.0)), PlayerGroupAll());
                lv_y += 65;
            }
            PlayerGroupLoopEnd();
        }
        lv_y = 100;
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_prestigecolor = Color(100.0, 100.0, 100.0);
            lv_helldonetext = "";
            lv_sndonetext = "";
            lv_imdonetext = "";
            if (gv_isbanned[PlayerGroupLoopCurrent()] == false) {
                lv_lv = TextWithColor(StringToText("Level: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO"), c_fixedPrecisionAny), Color(30.0, 255.0, 30.0));
                lv_wn = TextWithColor(StringToText("Wins: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS"), c_fixedPrecisionAny), Color(192.0, 192.0, 0.0));
                lv_nrml = TextWithColor(StringToText("Normal: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD"), c_fixedPrecisionAny), Color(0.0, 255.0, 0.0));
                lv_elit = TextWithColor(StringToText("Elite: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE"), c_fixedPrecisionAny), Color(255.0, 255.0, 0.0));
                lv_nightmr = TextWithColor(StringToText("Nightmare: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR"), c_fixedPrecisionAny), Color(0.0, 0.0, 255.0));
                lv_hll = TextWithColor(StringToText("Hell: ")+FixedToText(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HL"), c_fixedPrecisionAny), Color(255.0, 0.0, 0.0));
                lv_mpssble = TextWithColor(StringToText("Impossible: ")+IntToText(BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "ims")), Color(255.0, 0.0, 255.0));
                if (lv_sndone[PlayerGroupLoopCurrent()] == 121186.0) {
                    lv_sndonetext = "<n/>Night 36 completed";
                    lv_prestigecolor = Color(20.0, 0.0, 170.0);
                }
                if (lv_helldone[PlayerGroupLoopCurrent()] == 25265.0) {
                    lv_helldonetext = "<n/>Hell completed";
                    lv_prestigecolor = Color(255.0, 0.0, 0.0);
                }
                if (lv_imdone[PlayerGroupLoopCurrent()] == 35) {
                    lv_imdonetext = "<n/>Impossible completed";
                    lv_prestigecolor = Color(255.0, 0.0, 255.0);
                    auto25222686_ai = StringToInt(StringReplace(PlayerHandle(PlayerGroupLoopCurrent()), "0", 1, 8));
                    lv_hv = (Round((ModF((ModF(auto25322686_ai, SquareRoot(2.0)) * ModF(86, SquareRoot(3.0)) * ModF(auto25322686_ae, SquareRoot(6.0)) * ModF(auto25232686_ai, SquareRoot(5.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
                    if (lv_impc[PlayerGroupLoopCurrent()] == lv_hv) {
                        lv_imdonetext = "<n/>Impossible completed...";
                    }
                }
                if (lv_pl[PlayerGroupLoopCurrent()] >= 40) {
                    libNtve_gf_CreateDialogItemImage(gv_dialog, 48, 48, c_anchorTopLeft, (lv_x-8), lv_y-20, StringToText(""), "Assets\\Textures\\Buttons\\p40_48x48.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    libNtve_gf_CreateDialogItemLabel(gv_dialog, 40, 50, c_anchorTopLeft, (lv_x), lv_y, FixedToText((lv_pl[PlayerGroupLoopCurrent()]+IntToFixed(lv_pl2[PlayerGroupLoopCurrent()])), c_fixedPrecisionAny), lv_prestigecolor, false, 2.0);
                }
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringToText(" ") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringToText("<n/>") + StringExternal("Param/Value/32720125") + FixedToText((lv_pl[PlayerGroupLoopCurrent()]+IntToFixed(lv_pl2[PlayerGroupLoopCurrent()])), c_fixedPrecisionAny) + TextWithColor(StringToText(lv_imdonetext), Color(255.0, 0.0, 255.0)) + TextWithColor(StringToText(lv_helldonetext), Color(255.0, 0.0, 0.0)) + TextWithColor(StringToText(lv_sndonetext), Color(20.0, 0.0, 170.0)) + StringToText("<n/>") + StringToText("<n/>") + lv_lv + StringToText("<n/>") + lv_wn + StringToText("<n/>") + lv_nrml + StringToText("<n/>") + lv_elit + StringToText("<n/>") + lv_nightmr + StringToText("<n/>") + lv_hll + StringToText("<n/>") + lv_mpssble, PlayerGroupAll());
            }
            lv_y += 65;
        }
        PlayerGroupLoopEnd();
        lv_y = 100;
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateDialogItemLabel(gv_dialog, 200, 50, c_anchorTopLeft, (lv_x+40), lv_y, (TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(PlayerHandle(PlayerGroupLoopCurrent())), PlayerGroupAll());
            lv_y += 65;
        }
        PlayerGroupLoopEnd();
        lv_x += 205;
        lv_y = 80;

        //
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialog, 50, 50, c_anchorTopLeft, lv_x, lv_y, gv_skins[0].lv_name, gv_skins[0].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_workerimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_y += 65;
        }
        PlayerGroupLoopEnd();

        lv_x += 85;
        lv_y = 80;
        //
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) { // -35, -8
            libNtve_gf_CreateDialogItemImage(gv_dialog, 50, 50, c_anchorTopLeft, lv_x, lv_y, gv_skills[0].lv_name, gv_skills[0].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_skillimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_y += 65;
        }
        PlayerGroupLoopEnd();

        lv_x += 53;
        lv_y = 80;

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialog, 50, 50, c_anchorTopLeft, lv_x, lv_y, gv_secondaryskills[0].lv_name, gv_secondaryskills[0].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_secondaryskillimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_y += 65;
        }
        PlayerGroupLoopEnd();

        lv_x += 95;
        lv_y = 80;

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialog, 50, 50, c_anchorTopLeft, lv_x, lv_y, gv_specialties[0].lv_name, gv_specialties[0].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_specialityimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_y += 65;
        }
        PlayerGroupLoopEnd();

        lv_x += 108;
        lv_y = 80;
        //
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialog, 50, 50, c_anchorTopLeft, lv_x, lv_y, gv_prestiges[0].lv_name, gv_prestiges[0].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_prestigeimage[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_y += 65;
        }
        PlayerGroupLoopEnd();

        lv_x += 84;
        lv_y = 85;

        lv_x += 84;
        lv_y = 85;

        TimerStart(gv_chronoSt, IntToFixed(gv_tempsChronoSt), false, c_timeGame);
        TriggerExecute(gt_Creerboutonready, true, false);
        if (gv_GameMode != "Versus") {
            TriggerExecute(gt_CreerVotedifficultymode, true, false);
            TriggerExecute(gt_CreerVotemutatormode, true, false);
        }

        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            TriggerExecute(gt_roledialog, true, false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Dialogue_Init () {
        gt_Dialogue = TriggerCreate("gt_Dialogue_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: MapProperty gauche
    //--------------------------------------------------------------------------------------------------
    bool gt_MapPropertygauche_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;
        int lv_y;

        // Variable Initialization
        lv_x = 40;
        lv_y = 50;

        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(410, 650, c_anchorCenter, -575, 65, true);
        gv_dialogMap = DialogLastCreated();
        DialogSetImageVisible(gv_dialogMap, false);
        libNtve_gf_CreateDialogItemImage(gv_dialogMap, 410, 650, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_dialogMap, 390, 50, c_anchorTopLeft, 20, 40, StringExternal("Param/Value/D555F804"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialogMap, 390, 400, c_anchorTopLeft, 20, 80, StringExternal(gv_gamemodestring), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialogMap, 390, 400, c_anchorTopLeft, 20, 270, StringExternal("Param/Value/3EF538C7"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_y += 300;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/16CC4582"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_prestiges[IntLoopCurrent()].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_prestiges[IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/28355811") + IntToText(gv_prestiges[IntLoopCurrent()].lv_prestigelevel) + StringExternal("Param/Value/DEA3F9C0") + gv_prestiges[IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectPrestigeBTN[IntLoopCurrent()] = DialogControlLastCreated();
            lv_x += 64;
        }
        IntLoopEnd();
        lv_y += 64;
        lv_x = 40;
        IntLoopBegin(5, 9);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_prestiges[IntLoopCurrent()].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_prestiges[IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/28355811") + IntToText(gv_prestiges[IntLoopCurrent()].lv_prestigelevel) + StringExternal("Param/Value/DEA3F9C0") + gv_prestiges[IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectPrestigeBTN[IntLoopCurrent()] = DialogControlLastCreated();
            lv_x += 64;
        }
        IntLoopEnd();
        lv_y += 64;
        lv_x = 40;
        IntLoopBegin(10, 14);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_prestiges[IntLoopCurrent()].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogMap, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_prestiges[IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/28355811") + IntToText(gv_prestiges[IntLoopCurrent()].lv_prestigelevel) + StringExternal("Param/Value/DEA3F9C0") + gv_prestiges[IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectPrestigeBTN[IntLoopCurrent()] = DialogControlLastCreated();
            lv_x += 64;
        }
        IntLoopEnd();

        if (gv_GameMode == "Default" || gv_GameMode == "SandBox") {
            libNtve_gf_CreateDialogItemLabel(gv_dialogMap, 390, 50, c_anchorBottomLeft, 20, 30, StringExternal("Param/Value/4B8BFB54"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemImage(gv_dialogMap, 35, 35, c_anchorBottomRight, 20, 20, StringExternal("Param/Value/69859B44"), "Assets\\Textures\\ui_console_icon_help_flat.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);    
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_MapPropertygauche_Init () {
        gt_MapPropertygauche = TriggerCreate("gt_MapPropertygauche_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomDialog
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomDialog_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;
        int lv_y;
        int lv_i;
        int lv_DialogLineCounter;

        // Variable Initialization
        lv_x = 55;
        lv_y = 30;

        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(570, 650, c_anchorCenter, 655, 65, true);
        gv_dialogCustom = DialogLastCreated();
        DialogSetImageVisible(gv_dialogCustom, false);
        libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 570, 650, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/DBAF3936"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_totalspecialities; lv_i += 1) {
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, (lv_x-27), lv_y, (gv_specialties[lv_i].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/8D112D91") + IntToText(gv_specialties[lv_i].lv_level) + StringExternal("Param/Value/2C267899") + gv_specialties[lv_i].lv_description), gv_specialties[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, (lv_x-27), lv_y, (gv_specialties[lv_i].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/8D112D91") + IntToText(gv_specialties[lv_i].lv_level) + StringExternal("Param/Value/DEA3F9C0") + gv_specialties[lv_i].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectSpecialBtn[lv_i] = DialogControlLastCreated();
            lv_x += 64;
        }

        lv_x = 55;
        lv_y += 70;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D2D854B9"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_totalskills; lv_i += 1) {
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_skills[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_skills[lv_i].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/8D112D91") + IntToText(gv_skills[lv_i].lv_level) + StringExternal("Param/Value/DEA3F9C0") + gv_skills[lv_i].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectSkillBTN[lv_i] = DialogControlLastCreated();
            lv_x += 64;
        }

        lv_x = 55;
        lv_y += 70;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("DOCSTR_SecondarySkill"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        for (lv_i = 0; lv_i < gv_totalsecondaryskills; lv_i += 1) {
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_secondaryskills[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_secondaryskills[lv_i].lv_name + StringExternal("Param/Value/DEA3F9C0") + gv_secondaryskills[lv_i].lv_requirements + StringExternal("Param/Value/DEA3F9C0") + gv_secondaryskills[lv_i].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectSecondarySkillBTN[lv_i] = DialogControlLastCreated();
            lv_x += 64;
        }

        lv_y += 70;
        lv_x = 55;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/B22CE5E8"), Color(100,100,100), false, 2.0);
        lv_y += 20;
        IntLoopBegin(0, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_colors[IntLoopCurrent()].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_colors[IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/E139AFA3") + IntToText(gv_colors[IntLoopCurrent()].lv_highNight) + StringExternal("Param/Value/7CC0BD5E")), StringToText(""), "");
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_colors[IntLoopCurrent()].lv_color, PlayerGroupAll());
            gv_objectColorBTN[IntLoopCurrent()] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
            lv_x += 64;
        }
        IntLoopEnd();
        lv_y += 64;
        lv_x = 55;
        IntLoopBegin(7, 13);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_colors[IntLoopCurrent()].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_colors[IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/E139AFA3") + IntToText(gv_colors[IntLoopCurrent()].lv_highNight) + StringExternal("Param/Value/5AF356DB")), StringToText(""), "");
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_colors[IntLoopCurrent()].lv_color, PlayerGroupAll());
            gv_objectColorBTN[IntLoopCurrent()] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
            lv_x += 64;
        }
        IntLoopEnd();
        lv_x = 55;
        lv_y += 70;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/056EF696"), Color(100,100,100), false, 2.0);
        lv_y += 20;


        lv_DialogLineCounter = 1;
        // Probe Skins
        for (lv_i = 0; lv_i < gv_totalskins; lv_i += 1) {
            if (ModI(lv_DialogLineCounter, 8) == 0) {
                lv_y += 76;
                lv_x = 55;
            }
            libNtve_gf_CreateDialogItemImage(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_skins[lv_i].lv_icon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_dialogCustom, 64, 64, c_anchorTopLeft, lv_x, lv_y, (gv_skins[lv_i].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/E139AFA3") + IntToText(gv_skins[lv_i].lv_night) + StringToText(" ") + gv_skins[lv_i].lv_difficulty + StringExternal("Param/Value/02C97E46") + StringExternal("Param/Value/DEA3F9C0") + gv_skins[lv_i].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectSkinBTN[lv_i] = DialogControlLastCreated();
            lv_x += 64;
            lv_DialogLineCounter += 1;
        }

        TriggerExecute(gt_CustomSetLevel, true, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomDialog_Init () {
        gt_CustomDialog = TriggerCreate("gt_CustomDialog_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Dialog Versus - Choose Side Dialog
    //--------------------------------------------------------------------------------------------------
    bool gt_DialogVersusChooseSide_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(550, 500, c_anchorCenter, 0, 0, true);
        gv_DialogVersusChooseDialog = DialogLastCreated();
        DialogSetImageVisible(gv_DialogVersusChooseDialog, false);
        DialogSetVisible(gv_DialogVersusChooseDialog, PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(gv_DialogVersusChooseDialog, 550, 500, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_DialogVersusChooseDialog, 350, 50, c_anchorTop, 25, 15, StringExternal("Param/Value/93B0D1FC"), Color(100,100,100), true, 2.0);
        
        libNtve_gf_CreateDialogItemImage(gv_DialogVersusChooseDialog, 200, 300, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\probeportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(gv_DialogVersusChooseDialog, 200, 300, c_anchorTopRight, 50, 50, StringToText(""), "Assets\\Textures\\hybridzergportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        
        libNtve_gf_CreateDialogItemButton(gv_DialogVersusChooseDialog, 200, 50, c_anchorBottomLeft, 50, 50, StringExternal(""), StringExternal("Probe"), "");
        gv_DialogVersusButtonProbe = DialogControlLastCreated();
        
        libNtve_gf_CreateDialogItemButton(gv_DialogVersusChooseDialog, 200, 50, c_anchorBottomRight, 50, 50, StringExternal(""), StringExternal("The Thing"), "");
        gv_DialogVersusButtonThing = DialogControlLastCreated();

        libNtve_gf_CreateDialogItemLabel(gv_DialogVersusChooseDialog, 70, 50, c_anchorBottomRight, 0, 0, IntToText(0), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", gv_probeGroupPlayer);
        gv_chronoTexteversus = DialogControlLastCreated();

        TimerStart(gv_versuschronoSt, IntToFixed(gv_tempsChronoSide), false, c_timeGame);
        TriggerEnable(gt_DialogueChronoVersusSide, true);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DialogVersusChooseSide_Init () {
        gt_DialogVersusChooseSide = TriggerCreate("gt_DialogVersusChooseSide_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Choose Side Dialog Click
    //--------------------------------------------------------------------------------------------------
    bool gt_DialogVersusChooseSideClick_Func (bool testConds, bool runActions) {
        int lv_nbjoueursauvote;
        bool lv_startgamevalid;
        string lv_side;
        color lv_sidecolor;
        text lv_messageText;

        // Actions
        if (!runActions) {
            return true;
        }

        if ((EventDialogControl() != gv_DialogVersusButtonProbe) && (EventDialogControl() != gv_DialogVersusButtonThing)) {
            return false;
        }

        lv_side = "";

        if ((EventDialogControl() == gv_DialogVersusButtonProbe)) {
            gv_playerside[EventPlayer()] = 1;
            lv_side = "Probe";
            lv_sidecolor = Color(0.0, 255.0, 0.0);
        }
        if ((EventDialogControl() == gv_DialogVersusButtonThing)) {
            gv_playerside[EventPlayer()] = 2;
            lv_side = "The Thing";
            lv_sidecolor = Color(255.0, 0.0, 0.0);
        }

        DialogControlSetEnabled(gv_DialogVersusButtonProbe, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_DialogVersusButtonThing, PlayerGroupSingle(EventPlayer()), false);

        if (gv_variableVotedSide[EventPlayer()] == false) {
            lv_messageText = TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringToText(" wants to be ") + TextWithColor(StringToText(lv_side), lv_sidecolor);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, lv_messageText);
            gv_variableVotedSide[EventPlayer()] = true;
        }

        lv_startgamevalid = true;
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_variableVotedSide[PlayerGroupLoopCurrent()] == false) {
                lv_startgamevalid = false;
                break;
            }
        }
        PlayerGroupLoopEnd();

        if (lv_startgamevalid == true) {
            DialogDestroy(gv_DialogVersusChooseDialog);
            TriggerExecute(gt_EvaluateSidesAndStart, true, false);
            TriggerEnable(TriggerGetCurrent(), false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DialogVersusChooseSideClick_Init () {
        gt_DialogVersusChooseSideClick = TriggerCreate("gt_DialogVersusChooseSideClick_Func");
        TriggerAddEventDialogControl(gt_DialogVersusChooseSideClick, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Creer Vote difficulty  mode
    //--------------------------------------------------------------------------------------------------
    bool gt_CreerVotedifficultymode_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(625, 300, c_anchorTop, 0, 55, true);
        gv_votedifficultyModeDialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 625, 50, c_anchorTop, 50, 25, StringExternal("Param/Value/063BF8AF"), Color(100,100,100), true, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, 70, StringExternal("Param/Value/6E4AD335"), StringExternal("Param/Value/6E0BFB1F"), "");
        gv_dialogButtonVoteeasy = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, 140, StringToText(""), StringExternal("Param/Value/9694F568"), "");
        gv_dialogButtonVotenormal = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, 210, StringExternal("Param/Value/D94D6E2E"), StringExternal("Param/Value/1B6A0B21"), "");
        gv_dialogButtonVoteelite = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopRight, 50, 70, StringExternal("Param/Value/D31FAC53"), StringExternal("Param/Value/D76F4EBD"), "");
        gv_dialogButtonVotenightmare = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopRight, 50, 140, StringExternal("Param/Value/BFE72668"), StringExternal("Param/Value/ED1B5712"), "");
        gv_dialogButtonVotehell = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopRight, 50, 210, StringExternal("DOCSTR_ImpossibleTooltip"), StringExternal("DOCSTR_Impossible"), "");
        gv_dialogButtonVoteImpossible = DialogControlLastCreated();
        DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupActive(), true);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CreerVotedifficultymode_Init () {
        gt_CreerVotedifficultymode = TriggerCreate("gt_CreerVotedifficultymode_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Creer Vote Modifier mode
    //--------------------------------------------------------------------------------------------------
    bool gt_CreerVotemutatormode_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(400, 320, c_anchorTop, -500, 35, true);
        gv_votemutatorModeDialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTop, 80, 25, StringExternal("Param/Value/3AC41A7C"), Color(100,100,100), true, 2.0);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 25, StringExternal("Param/Value/08280679"), StringExternal("Param/Value/928FA653"), "");
        gv_dialogButtonVotebossrandomizer = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 85, StringExternal("Param/Value/07A162B2"), StringExternal("Param/Value/98237486"), "");
        gv_dialogButtonVotenightshift = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 145, StringExternal("Param/Value/2C500D8A"), StringExternal("Param/Value/10096978"), "");
        gv_dialogButtonVotemutators = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 205, StringExternal("DOCSTR_ModifierHardcoreDescription"), StringExternal("DOCSTR_ModifierHardcoreName"), "");
        gv_dialogButtonVoteHardcore = DialogControlLastCreated();
        DialogSetVisible(gv_votemutatorModeDialogue, PlayerGroupActive(), true);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CreerVotemutatormode_Init () {
        gt_CreerVotemutatormode = TriggerCreate("gt_CreerVotemutatormode_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Role dialogue
    //--------------------------------------------------------------------------------------------------
    bool gt_roledialog_Func (bool testConds, bool runActions) {
        int lv_x;
        int lv_y;

        // Variable Initialization
        lv_x = 40;
        lv_y = 50;

        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(420, 355, c_anchorTop, 510, 0, true); // original 5 role's x = 360, x_offset = 480
        gv_pickroledialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTop, 0, 25, StringExternal("Param/Value/EC1AFE1B"), Color(100,100,100), true, 2.0);
        libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 35, 35, c_anchorBottomRight, 25, 25, StringExternal("Param/Value/DC26FD20"), "Assets\\Textures\\ui_console_icon_help_flat.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[1][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[1][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[1][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("Param/Value/C5FD1E5E") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[1][IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[1][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();
        // Dual Mastery 1
        libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, (lv_x+30), lv_y, StringToText(""), gv_roles[1][6].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, (lv_x+30), lv_y, (gv_roles[1][6].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[1][6].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringToText("Wall and Cannon Roles") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[1][6].lv_description), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        gv_objectRoleBTN[1][6] = DialogControlLastCreated();
        gv_objectRoleBTN[2][6] = DialogControlLastCreated();
        //
        lv_y = 50;
        lv_x += 60;
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[2][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[2][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[2][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("Param/Value/CA36EB0D") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[2][IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[2][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();
        lv_y = 50;
        lv_x += 60;
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[3][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[3][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[3][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("Param/Value/D1F855F0") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[3][IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[3][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();
        // Dual Mastery 2
        libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, (lv_x+30), lv_y, StringToText(""), gv_roles[3][6].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, (lv_x+30), lv_y, (gv_roles[3][6].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[3][6].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringToText("Healer and Generator Roles") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[3][6].lv_description), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
        gv_objectRoleBTN[3][6] = DialogControlLastCreated();
        gv_objectRoleBTN[4][6] = DialogControlLastCreated();
        //
        lv_y = 50;
        lv_x += 60;
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[4][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[4][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[4][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("Param/Value/F032DFF0") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[4][IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[4][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();
        lv_y = 50;
        lv_x += 60;
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[5][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[5][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[5][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("Param/Value/DB5C6F55") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[5][IntLoopCurrent()].lv_description), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[5][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();
        lv_y = 50;
        lv_x += 60;
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemImage(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, StringToText(""), gv_roles[6][IntLoopCurrent()].lv_masteryicon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(gv_pickroledialogue, 45, 45, c_anchorTopLeft, lv_x, lv_y, (gv_roles[6][IntLoopCurrent()].lv_name + StringExternal("Param/Value/DEA3F9C0") + StringExternal("DOCSTR_AdvancedPlayers") + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/AD2820C7") + IntToText(gv_roles[6][IntLoopCurrent()].lv_wins) + StringExternal("Param/Value/BADFCBCA") +  StringExternal("DOCSTR_MercenaryRole") + StringExternal("Param/Value/DEA3F9C0") + gv_roles[6][IntLoopCurrent()].lv_description) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("DOCSTR_EarlyAccess"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
            gv_objectRoleBTN[6][IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 46;
        }
        IntLoopEnd();

        DialogSetVisible(gv_pickroledialogue, PlayerGroupActive(), true);
        TriggerExecute(gt_lobbypickings, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_roledialog_Init () {
        gt_roledialog = TriggerCreate("gt_roledialog_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Vote Difficulty Mode Dialog
    //--------------------------------------------------------------------------------------------------
    bool gt_VoteDifficultyModeDialog_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((EventDialogControl() == gv_dialogButtonVoteeasy) && (gv_dialogButtonVoteeasy != c_invalidDialogControlId)) {
            if ((gv_voteddifficulty[0][EventPlayer()] == false)) {
                    DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/14A38642")));
                    gv_voteddifficulty[0][EventPlayer()] = true;
                    gv_voteddifficulty[1][EventPlayer()] = false;
                    gv_voteddifficulty[2][EventPlayer()] = false;
                    gv_voteddifficulty[3][EventPlayer()] = false;
                    gv_voteddifficulty[4][EventPlayer()] = false;
                    gv_voteddifficulty[5][EventPlayer()] = false;
            }
        }

        if ((EventDialogControl() == gv_dialogButtonVotenormal) && (gv_dialogButtonVotenormal != c_invalidDialogControlId)) {
            if ((gv_voteddifficulty[1][EventPlayer()] == false)) {
                    DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                    gv_voteddifficulty[0][EventPlayer()] = false;
                    gv_voteddifficulty[1][EventPlayer()] = true;
                    gv_voteddifficulty[2][EventPlayer()] = false;
                    gv_voteddifficulty[3][EventPlayer()] = false;
                    gv_voteddifficulty[4][EventPlayer()] = false;
                    gv_voteddifficulty[5][EventPlayer()] = false;
            }
        }

        if ((EventDialogControl() == gv_dialogButtonVoteelite) && (gv_dialogButtonVoteelite != c_invalidDialogControlId)) {
            if ((gv_voteddifficulty[2][EventPlayer()] == false)) {
                    DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/17EFE3F4")));
                    gv_voteddifficulty[0][EventPlayer()] = false;
                    gv_voteddifficulty[1][EventPlayer()] = false;
                    gv_voteddifficulty[2][EventPlayer()] = true;
                    gv_voteddifficulty[3][EventPlayer()] = false;
                    gv_voteddifficulty[4][EventPlayer()] = false;
                    gv_voteddifficulty[5][EventPlayer()] = false;
            }
        }

        if ((gv_dialogButtonVotenightmare != c_invalidDialogControlId) && (EventDialogControl() == gv_dialogButtonVotenightmare)) {
            if ((gv_voteddifficulty[3][EventPlayer()] == false)) {
                DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/FE50BAEB")));
                    gv_voteddifficulty[0][EventPlayer()] = false;
                    gv_voteddifficulty[1][EventPlayer()] = false;
                    gv_voteddifficulty[2][EventPlayer()] = false;
                    gv_voteddifficulty[3][EventPlayer()] = true;
                    gv_voteddifficulty[4][EventPlayer()] = false;
                    gv_voteddifficulty[5][EventPlayer()] = false;
            }
        }

        if ((EventDialogControl() == gv_dialogButtonVotehell) && (gv_dialogButtonVotehell != c_invalidDialogControlId)) {
            if ((gv_voteddifficulty[4][EventPlayer()] == false)) {
                    DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/AAD98FD7")));
                    gv_voteddifficulty[0][EventPlayer()] = false;
                    gv_voteddifficulty[1][EventPlayer()] = false;
                    gv_voteddifficulty[2][EventPlayer()] = false;
                    gv_voteddifficulty[3][EventPlayer()] = false;
                    gv_voteddifficulty[4][EventPlayer()] = true;
                    gv_voteddifficulty[5][EventPlayer()] = false;
            }
        }

        if ((EventDialogControl() == gv_dialogButtonVoteImpossible) && (gv_dialogButtonVoteImpossible != c_invalidDialogControlId)) {
            if ((gv_voteddifficulty[5][EventPlayer()] == false)) {
                    DialogSetVisible(gv_votedifficultyModeDialogue, PlayerGroupSingle(EventPlayer()), false);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("DOCSTR_VoteForImpossible")));
                    gv_voteddifficulty[0][EventPlayer()] = false;
                    gv_voteddifficulty[1][EventPlayer()] = false;
                    gv_voteddifficulty[2][EventPlayer()] = false;
                    gv_voteddifficulty[3][EventPlayer()] = false;
                    gv_voteddifficulty[4][EventPlayer()] = false;
                    gv_voteddifficulty[5][EventPlayer()] = true;
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VoteDifficultyModeDialog_Init () {
        gt_VoteDifficultyModeDialog = TriggerCreate("gt_VoteDifficultyModeDialog_Func");
        TriggerAddEventDialogControl(gt_VoteDifficultyModeDialog, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Vote Modifier Mode Dialog
    //--------------------------------------------------------------------------------------------------
    bool gt_VotemutatorModeDialog_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_nbjoueursauvote;
        int lv_nbjoueursauvote2;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_nbjoueursauvote = (lv_nbjoueursauvote + 1);
        }
        PlayerGroupLoopEnd();
        lv_nbjoueursauvote2 = (lv_nbjoueursauvote / 2);

        // Vote for night shift
        if ((EventDialogControl() == gv_dialogButtonVotenightshift) && (gv_dialogButtonVotenightshift != c_invalidDialogControlId)) {
            if ((gv_votednightshift[EventPlayer()] == false)) {
                DialogControlSetVisible(gv_dialogButtonVotenightshift, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0FD6D0EB")));
                gv_votednightshift[EventPlayer()] = true;
                gv_modifiersvotedbyplayer[EventPlayer()] += 1;
            }
        }

        // Vote for boss randomizer
        if ((EventDialogControl() == gv_dialogButtonVotebossrandomizer) && (gv_dialogButtonVotebossrandomizer != c_invalidDialogControlId)) {
            if ((gv_votedrandomizer[EventPlayer()] == false)) {
                DialogControlSetVisible(gv_dialogButtonVotebossrandomizer, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0EA8DDD3")));
                gv_votedrandomizer[EventPlayer()] = true;
                gv_modifiersvotedbyplayer[EventPlayer()] += 1;
            }
        }

        // Vote for Hardcore
        if ((EventDialogControl() == gv_dialogButtonVoteHardcore) && (gv_dialogButtonVoteHardcore != c_invalidDialogControlId)) {
            if ((gv_votedHardcore[EventPlayer()] == false)) {
                DialogControlSetVisible(gv_dialogButtonVoteHardcore, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringToText(" has voted for the ") + StringExternal("DOCSTR_ModifierHardcoreName")));
                gv_votedHardcore[EventPlayer()] = true;
                gv_modifiersvotedbyplayer[EventPlayer()] += 1;
            }
        }

        // Vote for Mutators
        if ((EventDialogControl() == gv_dialogButtonVotemutators) && (gv_dialogButtonVotemutators != c_invalidDialogControlId)) {
            if ((gv_votedmutators[EventPlayer()] == false)) {
                DialogControlSetVisible(gv_dialogButtonVotemutators, PlayerGroupSingle(EventPlayer()), false);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/31838B18")));
                gv_votedmutators[EventPlayer()] = true;
                gv_modifiersvotedbyplayer[EventPlayer()] += 1;
            }
        }

        // Hide 'Modifiers' dialog when all modifiers are voted
        if ((gv_modifiersvotedbyplayer[EventPlayer()] == 4)) {
            DialogSetVisible(gv_votemutatorModeDialogue, PlayerGroupSingle(EventPlayer()), false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VotemutatorModeDialog_Init () {
        gt_VotemutatorModeDialog = TriggerCreate("gt_VotemutatorModeDialog_Func");
        TriggerAddEventDialogControl(gt_VotemutatorModeDialog, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Set Level
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSetLevel_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_nIVO;
        fixed lv_nightVH;
        fixed lv_nightEM;
        fixed lv_nightNM;
        fixed lv_victories;
        fixed lv_kasDKIGPo;
        fixed lv_kasDKIGPp;
        fixed lv_kasDKIGPr;
        fixed lv_ezbeaten;
        fixed lv_plinitial;
        fixed lv_pl;
        fixed lv_hbeat;
        int lv_ww;
        int lv_cwz;
        int lv_hws;
        int lv_gnw;
        int lv_eow;
        fixed lv_shield;
        string auto26222686_ai;
        string auto26222686_ae;
        string auto25222696_ae;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        fixed lv_heal;
        fixed lv_healval;
        int lv_i;
        int init_i;

        // Variable Initialization
        auto26222686_ai = "i";
        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gv_specialityChoose[PlayerGroupLoopCurrent()] = gv_specialties[0].lv_behaviour;
            libNtve_gf_SetDialogItemColor(gv_objectSpecialBtn[0], Color(22*100/255,128*100/255,0), gv_probeGroupPlayer);
            gv_colorChoose[PlayerGroupLoopCurrent()][1] = gv_colors[0].lv_message;
            gv_colorChoose[PlayerGroupLoopCurrent()][2] = gv_colors[0].lv_message2;
            DialogControlFadeTransparency(gv_objectColorBTN[0], PlayerGroupAll(), 0.0, 0.0);
            gv_skillChoose[PlayerGroupLoopCurrent()] = gv_skills[0].lv_ability;
            libNtve_gf_SetDialogItemColor(gv_objectSkillBTN[0], Color(22*100/255,128*100/255,0), gv_probeGroupPlayer);
            gv_SecondaryskillChoose[PlayerGroupLoopCurrent()] = gv_secondaryskills[0].lv_ability;
            libNtve_gf_SetDialogItemColor(gv_objectSecondarySkillBTN[0], Color(22*100/255,128*100/255,0), gv_probeGroupPlayer);
            gv_skinChoose[PlayerGroupLoopCurrent()] = 0;
            libNtve_gf_SetDialogItemColor(gv_objectSkinBTN[0], Color(22*100/255,128*100/255,0), gv_probeGroupPlayer);
            if ((gv_isbanned[PlayerGroupLoopCurrent()] == false)) {
                BankLoad("Banks", PlayerGroupLoopCurrent());
            }
            lv_nIVO = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO");
            lv_pl = 0;
            lv_plinitial = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PR");
            while (lv_plinitial >= 40.0) {
                lv_plinitial = (lv_plinitial / 1.2);
                lv_plinitial = (lv_plinitial - 39);
                lv_pl = lv_pl + 1;
            }
            lv_nightVH = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD");
            lv_nightEM = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL");
            lv_nightNM = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR");
            lv_kasDKIGPo = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "ZUHIB");
            lv_kasDKIGPp = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNQ");
            lv_kasDKIGPr = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB");
            lv_victories = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS");
            lv_ww = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "a");
            lv_cwz = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "e");
            lv_hws = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "i");
            lv_gnw = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "f");
            lv_eow = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "o");
            lv_ezbeaten = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EASY");
            lv_hbeat = BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HLO");
            auto26222686_ae = "s";
            auto25222686_ai = StringToInt(StringReplace(PlayerHandle(PlayerGroupLoopCurrent()), "0", 1, 8));
            lv_shield = AbsF(ModF(35.0*10.0, AbsF(ModF((Round((ModF((ModF(auto25322686_ai, SquareRoot(5.0)) * ModF(86, SquareRoot(8.0)) * ModF(auto25322686_ae, SquareRoot(3.0)) * ModF(auto25232686_ai, SquareRoot(2.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(6.0)) * ModF(auto25233686_ai, SquareRoot(7.0)) * ModF(auto25233686_ae, SquareRoot(5.0)) * ModF(auto25333686_ai, SquareRoot(3.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(3.0)) * 10000.0)) / 1000.0), 10.0))));
            lv_heal = (Round((ModF((ModF(auto25322686_ai, SquareRoot(3.0)) * ModF(86, SquareRoot(2.0)) * ModF(auto25322686_ae, SquareRoot(7.0)) * ModF(auto25232686_ai, SquareRoot(8.0)) * ModF(auto25232686_ae, SquareRoot(17.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
            lv_healval = (Round((ModF((ModF(auto25322686_ai, SquareRoot(2.0)) * ModF(86, SquareRoot(3.0)) * ModF(auto25322686_ae, SquareRoot(6.0)) * ModF(auto25232686_ai, SquareRoot(5.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
            if (gv_isadmin[PlayerGroupLoopCurrent()] == true) {
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    DialogControlSetEnabled(gv_objectRoleBTN[1][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[2][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[3][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[4][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[5][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[6][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[1][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    DialogControlSetEnabled(gv_objectRoleBTN[3][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                IntLoopEnd();
            }
            else {
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if (((lv_ww/4) < gv_roles[1][IntLoopCurrent()].lv_wins) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                        DialogControlSetEnabled(gv_objectRoleBTN[1][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[1][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    if (((lv_cwz/7) < gv_roles[2][IntLoopCurrent()].lv_wins) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                        DialogControlSetEnabled(gv_objectRoleBTN[2][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[2][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    if (((lv_hws/9) < gv_roles[3][IntLoopCurrent()].lv_wins) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                        DialogControlSetEnabled(gv_objectRoleBTN[3][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[3][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    if (((lv_gnw/5) < gv_roles[4][IntLoopCurrent()].lv_wins) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                        DialogControlSetEnabled(gv_objectRoleBTN[4][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[4][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    if (((lv_eow/13) < gv_roles[5][IntLoopCurrent()].lv_wins) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                        DialogControlSetEnabled(gv_objectRoleBTN[5][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[5][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    if (gv_DonateLevelPlayer[PlayerGroupLoopCurrent()] >= 4 || gv_isTester[PlayerGroupLoopCurrent()]) { // Hell Donor or higher for WIP Mercenary role
                        DialogControlSetEnabled(gv_objectRoleBTN[6][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectRoleBTN[6][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                }
                IntLoopEnd();
                // Dual Masteries
                if (((lv_ww/4) < gv_roles[1][6].lv_wins) || (((lv_cwz/7) < gv_roles[2][6].lv_wins)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    DialogControlSetEnabled(gv_objectRoleBTN[1][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                else {
                    DialogControlSetEnabled(gv_objectRoleBTN[1][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                if (((lv_hws/9) < gv_roles[3][6].lv_wins) || (((lv_gnw/5) < gv_roles[4][6].lv_wins)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    DialogControlSetEnabled(gv_objectRoleBTN[3][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                else {
                    DialogControlSetEnabled(gv_objectRoleBTN[3][6], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
            }
            IntLoopBegin(0, gv_totalspecialities-1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_nIVO < IntToFixed(gv_specialties[IntLoopCurrent()].lv_level)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    DialogControlSetEnabled(gv_objectSpecialBtn[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                if ((lv_hbeat != 25265.0)) {
                    if (!gv_isadmin[PlayerGroupLoopCurrent()]) {
                        DialogControlSetEnabled(gv_objectSpecialBtn[7], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                }
            }
            IntLoopEnd();
            IntLoopBegin(0, gv_totalcolors-1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_nightVH < IntToFixed(gv_colors[IntLoopCurrent()].lv_highNight)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    DialogControlSetEnabled(gv_objectColorBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
            }
            IntLoopEnd();
            IntLoopBegin(0, gv_totalskills-1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_nIVO < IntToFixed(gv_skills[IntLoopCurrent()].lv_level)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    DialogControlSetEnabled(gv_objectSkillBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
            }
            IntLoopEnd();
            IntLoopBegin(0, gv_totalprestiges-1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_pl < IntToFixed(gv_prestiges[IntLoopCurrent()].lv_prestigelevel)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    if (!gv_isadmin[PlayerGroupLoopCurrent()]) {
                        DialogControlSetEnabled(gv_objectPrestigeBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                }
            }
            IntLoopEnd();
            IntLoopBegin(0, gv_totalskins-1);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_nightVH < IntToFixed(gv_skins[IntLoopCurrent()].lv_night)) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                    if (!gv_isadmin[PlayerGroupLoopCurrent()]) {
                        DialogControlSetEnabled(gv_objectSkinBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                    }
                    else {
                        DialogControlSetEnabled(gv_objectSkinBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                    }
                }
                else {
                    DialogControlSetEnabled(gv_objectSkinBTN[IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);   
                }
            }
            IntLoopEnd();
            auto25222696_ae = "m";
            if ((lv_ezbeaten == 35.0)) {
                DialogControlSetEnabled(gv_objectSkinBTN[1], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                DialogControlSetEnabled(gv_objectSkinBTN[2], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                DialogControlSetEnabled(gv_objectSkinBTN[3], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                DialogControlSetEnabled(gv_objectSkinBTN[4], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                DialogControlSetEnabled(gv_objectSkinBTN[5], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
            if (!(lv_nightEM == 21634.0) || (gv_isbanned[PlayerGroupLoopCurrent()] == true)) {
                DialogControlSetEnabled(gv_objectSkinBTN[8], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                DialogControlSetEnabled(gv_objectSkinBTN[9], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                DialogControlSetEnabled(gv_objectSkinBTN[10], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
            if (!((lv_kasDKIGPp == 59120.0) && (lv_kasDKIGPr >= 57925))) {
                DialogControlSetEnabled(gv_objectSkinBTN[11], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
            if ((lv_kasDKIGPo == (9322.0 * 13.0)) && (lv_nIVO >= 101.0) && (lv_kasDKIGPp == 59120.0) && (gv_isbanned[PlayerGroupLoopCurrent()] == false)) {
                DialogControlSetEnabled(gv_objectSkinBTN[12], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }

            if ((lv_nIVO >= 200.0 && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto26222686_ae)) == (lv_shield/lv_heal)*3.4) && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+"val")) == lv_healval))) {
                DialogControlSetEnabled(gv_objectSkinBTN[13], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }

            // Secondary skills
            // Versus secondary skills
            if (gv_GameMode == "Versus") {
                if ((lv_nightEM == 21634.0) && (gv_isbanned[PlayerGroupLoopCurrent()] == false)) {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[1], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[1], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                if (lv_nightNM >= 35 && gv_isbanned[PlayerGroupLoopCurrent()] == false) {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[2], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[2], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
            }
            else {
                // Other modes secondary skills
                if ((lv_nightEM == 21634.0) && (gv_isbanned[PlayerGroupLoopCurrent()] == false)) {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[2], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[2], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
                if ((lv_nIVO >= 200.0 && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto26222686_ae)) == (lv_shield/lv_heal)*3.4) && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+"val")) == lv_healval))) {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[3], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    DialogControlSetEnabled(gv_objectSecondarySkillBTN[3], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
            }

            // Check for best worker
            for (init_i = gv_totalskins; init_i > 0; init_i -= 1) {
                if (DialogControlIsEnabled(gv_objectSkinBTN[init_i], PlayerGroupLoopCurrent())) {
                    gv_bestworkerforplayer[PlayerGroupLoopCurrent()] = init_i;
                    break;
                }
            }
            // lv_i = 0;
            // while (DialogControlIsEnabled(gv_objectSkinBTN[lv_i], PlayerGroupLoopCurrent()) && (gv_objectSkinBTN[lv_i] != c_invalidDialogControlId)) {
            //     if (gv_objectSkinBTN[lv_i+1] == c_invalidDialogControlId) {
            //         break;
            //     }
            //     lv_i += 1;
            // }
            // gv_bestworkerforplayer[PlayerGroupLoopCurrent()] = lv_i;

            for (init_i = 0; init_i < gv_totalskins; init_i += 1) {
                DialogControlFadeTransparency(gv_objectSkinBTN[init_i], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectSkinBTN[init_i], Color(100,100,100), PlayerGroupSingle(PlayerGroupLoopCurrent()));
            }
            gv_skinChoose[PlayerGroupLoopCurrent()] = gv_bestworkerforplayer[PlayerGroupLoopCurrent()];
            libNtve_gf_SetDialogItemImage(gv_workerimage[PlayerGroupLoopCurrent()], gv_skins[gv_bestworkerforplayer[PlayerGroupLoopCurrent()]].lv_icon, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_workerimage[PlayerGroupLoopCurrent()], gv_skins[gv_bestworkerforplayer[PlayerGroupLoopCurrent()]].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_objectSkinBTN[gv_bestworkerforplayer[PlayerGroupLoopCurrent()]], Color(22*100/255,128*100/255,0), PlayerGroupSingle(PlayerGroupLoopCurrent()));
            DialogControlFadeTransparency(gv_objectSkinBTN[gv_bestworkerforplayer[PlayerGroupLoopCurrent()]], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 80.0);
        }
        PlayerGroupLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSetLevel_Init () {
        gt_CustomSetLevel = TriggerCreate("gt_CustomSetLevel_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: CustomDialogClick
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomDialogClick_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_int;
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }
        for (init_i = 0; init_i < gv_totalspecialities; init_i += 1) {
            if ((gv_objectSpecialBtn[init_i] == EventDialogControl())) {
                lv_int = 1;
            }
        }
        for (init_i = 0; init_i < gv_totalcolors; init_i += 1) {
            if ((gv_objectColorBTN[init_i] == EventDialogControl())) {
                lv_int = 2;
            }
        }
        for (init_i = 0; init_i < gv_totalskills; init_i += 1) {
            if ((gv_objectSkillBTN[init_i] == EventDialogControl())) {
                lv_int = 3;
            }
        }
        for (init_i = 0; init_i < gv_totalsecondaryskills; init_i += 1) {
            if ((gv_objectSecondarySkillBTN[init_i] == EventDialogControl())) {
                lv_int = 4;
            }
        }
        for (init_i = 0; init_i < gv_totalskins; init_i += 1) {
            if ((gv_objectSkinBTN[init_i] == EventDialogControl())) {
                lv_int = 5;
            }
        }
        for (init_i = 0; init_i < gv_totalprestiges; init_i += 1) {
            if ((gv_objectPrestigeBTN[init_i] == EventDialogControl())) {
                lv_int = 6;
            }
        }
        for (init_i = 1; init_i <= gv_totalroles; init_i += 1) {
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((gv_objectRoleBTN[init_i][IntLoopCurrent()] == EventDialogControl())) {
                    lv_int = 6+init_i;
                    break;
                }
            }
            IntLoopEnd();
        }

        if ((lv_int == 1)) {
            for (init_i = 0; init_i < gv_totalspecialities; init_i += 1) {
                DialogControlFadeTransparency(gv_objectSpecialBtn[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectSpecialBtn[init_i], Color(50.20, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
                if ((gv_objectSpecialBtn[init_i] == EventDialogControl())) {
                    gv_specialityChoose[EventPlayer()] = gv_specialties[init_i].lv_behaviour;
                    libNtve_gf_SetDialogItemImage(gv_specialityimage[EventPlayer()], gv_specialties[init_i].lv_icon, PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_specialityimage[EventPlayer()], gv_specialties[init_i].lv_name, PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_objectSpecialBtn[init_i], Color(22*100/255,128*100/255,0), PlayerGroupSingle(EventPlayer()));
                    DialogControlFadeTransparency(gv_objectSpecialBtn[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
        }

        if ((lv_int == 2)) {
            for (init_i = 0; init_i < gv_totalcolors; init_i += 1) {
                DialogControlFadeTransparency(gv_objectColorBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 50.0);
                if ((gv_objectColorBTN[init_i] == EventDialogControl())) {
                    gv_colorChoose[EventPlayer()][1] = gv_colors[init_i].lv_message;
                    gv_colorChoose[EventPlayer()][2] = gv_colors[init_i].lv_message2;
                    DialogControlFadeTransparency(gv_objectColorBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                }
            }
        }

        if ((lv_int == 3)) {
            for (init_i = 0; init_i < gv_totalskills; init_i += 1) {
                DialogControlFadeTransparency(gv_objectSkillBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectSkillBTN[init_i], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                if ((gv_objectSkillBTN[init_i] == EventDialogControl())) {
                    gv_skillChoose[EventPlayer()] = gv_skills[init_i].lv_ability;
                    libNtve_gf_SetDialogItemImage(gv_skillimage[EventPlayer()], gv_skills[init_i].lv_icon, PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_skillimage[EventPlayer()], gv_skills[init_i].lv_name, PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_objectSkillBTN[init_i], Color(28*100/255,167*100/255,234*100/255), PlayerGroupSingle(EventPlayer()));
                    DialogControlFadeTransparency(gv_objectSkillBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
        }

        if ((lv_int == 4)) {
            for (init_i = 0; init_i < gv_totalsecondaryskills; init_i += 1) {
                DialogControlFadeTransparency(gv_objectSecondarySkillBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectSecondarySkillBTN[init_i], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                if ((gv_objectSecondarySkillBTN[init_i] == EventDialogControl())) {
                    gv_SecondaryskillChoose[EventPlayer()] = gv_secondaryskills[init_i].lv_ability;
                    libNtve_gf_SetDialogItemImage(gv_secondaryskillimage[EventPlayer()], gv_secondaryskills[init_i].lv_icon, PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_secondaryskillimage[EventPlayer()], gv_secondaryskills[init_i].lv_name, PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_objectSecondarySkillBTN[init_i], Color(28*100/255,167*100/255,234*100/255), PlayerGroupSingle(EventPlayer()));
                    DialogControlFadeTransparency(gv_objectSecondarySkillBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
        }

        if ((lv_int == 5)) {
            for (init_i = 0; init_i < gv_totalskins; init_i += 1) {
                DialogControlFadeTransparency(gv_objectSkinBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectSkinBTN[init_i], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                if ((gv_objectSkinBTN[init_i] == EventDialogControl())) {
                    gv_skinChoose[EventPlayer()] = init_i;
                    libNtve_gf_SetDialogItemImage(gv_workerimage[EventPlayer()], gv_skins[init_i].lv_icon, PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_workerimage[EventPlayer()], gv_skins[init_i].lv_name, PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_objectSkinBTN[init_i], Color(22*100/255,128*100/255,0), PlayerGroupSingle(EventPlayer()));
                    DialogControlFadeTransparency(gv_objectSkinBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
        }

        if ((lv_int == 6)) {
            for (init_i = 0; init_i < gv_totalprestiges; init_i += 1) {
                DialogControlFadeTransparency(gv_objectPrestigeBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                libNtve_gf_SetDialogItemColor(gv_objectPrestigeBTN[init_i], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                if ((gv_objectPrestigeBTN[init_i] == EventDialogControl())) {
                    gv_prestigeChoose[EventPlayer()] = init_i;
                    libNtve_gf_SetDialogItemImage(gv_prestigeimage[EventPlayer()], gv_prestiges[init_i].lv_icon, PlayerGroupAll());
                    libNtve_gf_SetDialogItemTooltip(gv_prestigeimage[EventPlayer()], gv_prestiges[init_i].lv_name, PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(gv_objectPrestigeBTN[init_i], Color(50,50,50), PlayerGroupSingle(EventPlayer()));
                    DialogControlFadeTransparency(gv_objectPrestigeBTN[init_i], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
        }

        if ((lv_int >= 7) && (lv_int <= gv_totalroles+6)) {
            libNtve_gf_SetDialogItemImage(gv_roleimage[EventPlayer()], gv_roles[lv_int-6][1].lv_roleicon, PlayerGroupAll());
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                for (init_i = 1; init_i <= gv_totalroles; init_i += 1) {
                    if (((lv_int-6) == init_i) && ((DialogControlIsEnabled(gv_objectRoleBTN[init_i][IntLoopCurrent()], EventPlayer()) == true))) {
                        DialogControlFadeTransparency(gv_objectRoleBTN[init_i][IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                    }
                    else {
                        DialogControlFadeTransparency(gv_objectRoleBTN[init_i][IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                    }
                }
            }
            IntLoopEnd();

            // Dual Masteries
            if (((lv_int == 7) || (lv_int == 8)) && ((DialogControlIsEnabled(gv_objectRoleBTN[1][6], EventPlayer()) == true))) {
                DialogControlFadeTransparency(gv_objectRoleBTN[1][6], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
            }
            else {
                DialogControlFadeTransparency(gv_objectRoleBTN[1][6], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
            }

            if (((lv_int == 9) || (lv_int == 10)) && ((DialogControlIsEnabled(gv_objectRoleBTN[3][6], EventPlayer()) == true))) {
                DialogControlFadeTransparency(gv_objectRoleBTN[3][6], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
            }
            else {
                DialogControlFadeTransparency(gv_objectRoleBTN[3][6], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
            }
            //
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((gv_objectRoleBTN[lv_int-6][IntLoopCurrent()] == EventDialogControl())) {
                    gv_roleChoose[EventPlayer()] = lv_int-6;
                }
            }
            IntLoopEnd();
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomDialogClick_Init () {
        gt_CustomDialogClick = TriggerCreate("gt_CustomDialogClick_Func");
        TriggerAddEventDialogControl(gt_CustomDialogClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: lobby pickings
    //--------------------------------------------------------------------------------------------------
    bool gt_lobbypickings_Func (bool testConds, bool runActions) {
        int init_i;
        int lv_int;
        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Any") {
                lv_int = 0;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Wall") {
                lv_int = 6;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Cannon") {
                lv_int = 7;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Healer") {
                lv_int = 8;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Generator") {
                lv_int = 9;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Economy") {
                lv_int = 10;
            }
            if (gv_lobbyrole[PlayerGroupLoopCurrent()] == "Mercenary") {
                lv_int = 11;
            }
            if (lv_int >= 6) {
                libNtve_gf_SetDialogItemImage(gv_roleimage[PlayerGroupLoopCurrent()], gv_roles[lv_int-5][1].lv_roleicon, PlayerGroupAll());
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    for (init_i = 1; init_i <= gv_totalroles; init_i += 1) {
                        if ((lv_int-5) == init_i) {
                            DialogControlFadeTransparency(gv_objectRoleBTN[init_i][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 80.0);
                        }
                        else {
                            DialogControlFadeTransparency(gv_objectRoleBTN[init_i][IntLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 0.0);
                        }
                    }
                }
                IntLoopEnd();
                gv_roleChoose[PlayerGroupLoopCurrent()] = lv_int-5;
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_lobbypickings_Init () {
        gt_lobbypickings = TriggerCreate("gt_lobbypickings_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: InitDialogue
    //--------------------------------------------------------------------------------------------------
    bool gt_InitDialogue_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        TriggerExecute(gt_MapPropertygauche, true, false);
        TriggerExecute(gt_Dialogue, true, false);
        TriggerExecute(gt_CustomDialog, true, false);
        TriggerExecute(gt_CustomSkins, false, false);
        DialogSetVisible(gv_dialogCustom, PlayerGroupAll(), true);
        DialogSetVisible(gv_dialogMap, PlayerGroupActive(), true);
        DialogSetVisible(gv_dialog, PlayerGroupAll(), true);
        TriggerEnable(gt_DialogueChrono, true);

        if (GameIsTestMap(false) == true) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gv_skinChoose[PlayerGroupLoopCurrent()] = 13;
                DialogControlFadeTransparency(gv_objectSkinBTN[13], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 80.0);
                gv_specialityChoose[PlayerGroupLoopCurrent()] = gv_specialties[7].lv_behaviour;
                DialogControlFadeTransparency(gv_objectSpecialBtn[7], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 80.0);
                gv_skillChoose[PlayerGroupLoopCurrent()] = gv_skills[6].lv_ability;
                DialogControlFadeTransparency(gv_objectSkillBTN[6], PlayerGroupSingle(PlayerGroupLoopCurrent()), 0.0, 80.0);
            }
            PlayerGroupLoopEnd();
        }

        // Versus - Hide Probe dialogues for The Thing
        if (gv_GameMode == "Versus") {
            DialogSetVisible(gv_dialogCustom, PlayerGroupSingle(gv_theThingPlayer), false);
            DialogSetVisible(gv_dialogMap, PlayerGroupSingle(gv_theThingPlayer), false);
            DialogSetVisible(gv_dialog, PlayerGroupSingle(gv_theThingPlayer), false);
            DialogSetVisible(gv_pickroledialogue, PlayerGroupSingle(gv_theThingPlayer), false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_InitDialogue_Init () {
        gt_InitDialogue = TriggerCreate("gt_InitDialogue_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - The Thing Hybrid Dialogue (Versus)
    //--------------------------------------------------------------------------------------------------
    bool gt_TheThingDialogue_Func (bool testConds, bool runActions) {

        DialogCreate(850, 600, c_anchorCenter, 0, 40, true);
        gv_dialogversusthething = DialogLastCreated();
        DialogSetImageVisible(gv_dialogversusthething, false);
        DialogSetVisible(gv_dialogversusthething, gv_probeGroupPlayer, false);
        DialogSetVisible(gv_dialogversusthething, PlayerGroupSingle(gv_theThingPlayer), true);
        libNtve_gf_CreateDialogItemImage(gv_dialogversusthething, 850, 600, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_help_frame_tips_new_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_dialogversusthething, 650, 50, c_anchorTopLeft, 50, 50, StringToText("BETA - The Thing progression - to be added..."), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialogversusthething, 650, 50, c_anchorTopLeft, 50, 100, StringToText("BETA - expect bugs and balance issues. Still feel free to report them..."), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_dialogversusthething, 650, 50, c_anchorTopLeft, 50, 150, StringToText("BETA - No stats given on win/loss"), Color(100,100,100), false, 2.0);

        libNtve_gf_CreateDialogItemLabel(gv_dialogversusthething, 70, 50, c_anchorBottomRight, 0, 0, IntToText(0), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefCenterSize24Bold", PlayerGroupSingle(gv_theThingPlayer));
        gv_chronoTexteversusThing = DialogControlLastCreated();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_TheThingDialogue_Init () {
        gt_TheThingDialogue = TriggerCreate("gt_TheThingDialogue_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Evaluate Sides and Start Dialogues
    //--------------------------------------------------------------------------------------------------
    bool gt_EvaluateSidesAndStart_Func (bool testConds, bool runActions) {
        int lv_totalvotes;
        int lv_probevotes;
        int lv_thingvotes;
        int lv_randomchosenthing;

        TimerPause(gv_versuschronoSt, true);

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_playerside[PlayerGroupLoopCurrent()] == 1) {
                lv_probevotes = lv_probevotes + 1;
                if (PlayerGroupHasPlayer(gv_ProbeGroupVoted, PlayerGroupLoopCurrent()) == false) {
                    PlayerGroupAdd(gv_ProbeGroupVoted, PlayerGroupLoopCurrent());
                }
            }
            if (gv_playerside[PlayerGroupLoopCurrent()] == 2) {
                lv_thingvotes = lv_thingvotes + 1;
                if (PlayerGroupHasPlayer(gv_ThingGroupVoted, PlayerGroupLoopCurrent()) == false) {
                    PlayerGroupAdd(gv_ThingGroupVoted, PlayerGroupLoopCurrent());
                }
            }
            lv_totalvotes = lv_totalvotes + 1;
        }
        PlayerGroupLoopEnd();

        if (lv_thingvotes == 0 || lv_totalvotes == lv_probevotes) {
            lv_randomchosenthing = PlayerGroupPlayer(gv_ProbeGroupVoted, RandomInt(1, PlayerGroupCount(gv_ProbeGroupVoted)));
            gv_playerside[lv_randomchosenthing] = 2;
        }

        if (lv_thingvotes > 1) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gv_playerside[PlayerGroupLoopCurrent()] = 1;
            }
            PlayerGroupLoopEnd();

            lv_randomchosenthing = PlayerGroupPlayer(gv_ThingGroupVoted, RandomInt(1, PlayerGroupCount(gv_ThingGroupVoted)));
            gv_playerside[lv_randomchosenthing] = 2;

        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_playerside[PlayerGroupLoopCurrent()] == 2) {
                gv_theThingPlayer = PlayerGroupLoopCurrent();
                PlayerGroupRemove(gv_probeGroupPlayer, PlayerGroupLoopCurrent());
                PlayerGroupAdd(gv_zergGroupPlayer, PlayerGroupLoopCurrent());
                break;
            }
        }
        PlayerGroupLoopEnd();

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetAlliance(gv_theThingPlayer, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerGroupLoopEnd();
        libNtve_gf_SetAlliance(gv_theThingPlayer, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);

        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(gv_theThingPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_theThingPlayer, false))) + StringToText(" is ") + TextWithColor(StringToText("The Thing!"), Color(255.0, 0.0, 0.0))));
        
        TriggerExecute(gt_InitDialogue, true, false);
        TriggerExecute(gt_TheThingDialogue, true, false);

        DialogDestroy(gv_DialogVersusChooseDialog);
        TriggerEnable(gt_DialogueChronoVersusSide, false);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvaluateSidesAndStart_Init () {
        gt_EvaluateSidesAndStart = TriggerCreate("gt_EvaluateSidesAndStart_Func");
        TriggerAddEventTimer(gt_EvaluateSidesAndStart, gv_versuschronoSt);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: DialogueChrono
    //--------------------------------------------------------------------------------------------------
    bool gt_DialogueChrono_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_tempsChronoSt -= 1;
        libNtve_gf_SetDialogItemText(gv_chronoTexte, IntToText(gv_tempsChronoSt), PlayerGroupAll());

        if (gv_GameMode == "Versus") {
            libNtve_gf_SetDialogItemText(gv_chronoTexteversusThing, IntToText(gv_tempsChronoSt), PlayerGroupSingle(gv_theThingPlayer)); 
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DialogueChrono_Init () {
        gt_DialogueChrono = TriggerCreate("gt_DialogueChrono_Func");
        TriggerEnable(gt_DialogueChrono, false);
        TriggerAddEventTimePeriodic(gt_DialogueChrono, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: DialogueChrono - Versus Choose Side Dialog
    //--------------------------------------------------------------------------------------------------
    bool gt_DialogueChronoVersusSide_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_tempsChronoSide -= 1;
        libNtve_gf_SetDialogItemText(gv_chronoTexteversus, IntToText(gv_tempsChronoSide), PlayerGroupAll());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DialogueChronoVersusSide_Init () {
        gt_DialogueChronoVersusSide = TriggerCreate("gt_DialogueChronoVersusSide_Func");
        TriggerEnable(gt_DialogueChronoVersusSide, false);
        TriggerAddEventTimePeriodic(gt_DialogueChronoVersusSide, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: GameStart, chrono expire
    //--------------------------------------------------------------------------------------------------
    bool gt_GameStartchronoexpire_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_z;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        DialogDestroy(gv_boutonReadyDialogue);
        DialogDestroy(gv_votedifficultyModeDialogue);
        DialogDestroy(gv_votemutatorModeDialogue);
        DialogDestroy(gv_pickroledialogue);
        if (gv_GameMode == "Versus") {
            DialogDestroy(gv_dialogversusthething);
        }
        TimerPause(gv_chronoSt, true);
        TriggerEnable(gt_DialogueChrono, false);
        DialogSetVisible(gv_dialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_dialogMap, PlayerGroupAll(), false);
        DialogSetVisible(gv_dialogCustom, PlayerGroupAll(), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9C8FAECE"));
        TriggerExecute(gt_Creationdelacarte, true, false);
        TriggerExecute(gt_StartGameprobesinit, true, false);
        Wait(2.0, c_timeGame);
        if (gv_damageBonus < 40) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/645AF5A8"));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_NoMercy"));
        }
        // Moved to "Start game probes init"
        // TriggerExecute(gt_Tableau, true, false);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraLockInput(PlayerGroupLoopCurrent(), false);
            lv_z = (lv_z + 1);
        }
        PlayerGroupLoopEnd();
        if ((lv_z == 1)) {
            TriggerEnable(gt_SolomodeDuplicate, true);
        }

        if (gv_MutatorsEnabled) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Estimated total levels for victory: ") + IntToText(gv_totalestimatedlevels) + StringToText("<n/>Estimated total wins for victory: ") + IntToText(gv_totalestimatedwins));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_GameStartchronoexpire_Init () {
        gt_GameStartchronoexpire = TriggerCreate("gt_GameStartchronoexpire_Func");
        TriggerAddEventTimer(gt_GameStartchronoexpire, gv_chronoSt);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Creation de la carte (Game Start)
    //--------------------------------------------------------------------------------------------------
    bool gt_Creationdelacarte_Func (bool testConds, bool runActions) {
        int lv_nbjoueursauvote;
        int lv_nbjoueursauvote2;
        int init_i;
        text lv_modifiermessage;
        int lv_modifiernumber;
        int lv_randomint;

        // Variable Declarations

        lv_modifiermessage = StringToText("None");
        lv_modifiernumber = 0;

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerExecute(gt_EventMutators, true, false);
        
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_nbjoueursauvote = (lv_nbjoueursauvote + 1);
            if ((gv_voteddifficulty[0][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevoteeasy = (gv_variablevoteeasy + 1);
            }
            if ((gv_voteddifficulty[1][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotenormal = (gv_variablevotenormal + 1);
            }
            if ((gv_voteddifficulty[2][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevoteelite = (gv_variablevoteelite + 1);
            }
            if ((gv_voteddifficulty[3][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotenightmare = (gv_variablevotenightmare + 1);
            }
            if ((gv_voteddifficulty[4][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotehell = (gv_variablevotehell + 1);
            }
            if ((gv_voteddifficulty[5][PlayerGroupLoopCurrent()] == true)) {
                gv_variablevoteimpossible = (gv_variablevoteimpossible + 1);
            }
            if ((gv_votedrandomizer[PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotebossrandomizer = (gv_variablevotebossrandomizer + 1);
            }
            if ((gv_votednightshift[PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotenightshift = (gv_variablevotenightshift + 1);
            }
            if ((gv_votedmutators[PlayerGroupLoopCurrent()] == true)) {
                gv_variablevotemutators = (gv_variablevotemutators + 1);
            }
            if ((gv_votedHardcore[PlayerGroupLoopCurrent()] == true)) {
                gv_variablevoteHardcore = (gv_variablevoteHardcore + 1);
            }

        }
        PlayerGroupLoopEnd();
        lv_nbjoueursauvote2 = (lv_nbjoueursauvote / 2);

        if ((gv_variablevoteeasy > lv_nbjoueursauvote2)) {
            gv_damageBonus = -100;
            gv_difficulty = "Easy";
            gv_tempsJourInitial = gv_tempsJourInitial + 50.0;
            gv_tempsJour = 60.0;
            gv_variablevoteeasy = 5;
            TechTreeUpgradeAddLevel(15, "EasyDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[0]);
            gv_win2levels = 1;
            gv_win1levels = 0;
            gv_difficultyminmutators = 1;
            gv_difficultymaxmutators = 2;
            gv_selectedDifficultyNumber = 0; // for "extra units spawn (check Zerg Invasion trigger)"
            gv_enabledshareDay = 20;
        }

        if ((gv_variablevoteelite > lv_nbjoueursauvote2)) {
            gv_damageBonus = 10;
            gv_difficulty = "Elite";
            gv_tempsJour = 20.0;
            gv_variablevoteelite = 5;
            gv_win2levels = 4;
            gv_win1levels = 2;
            TechTreeUpgradeAddLevel(15, "EliteDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[2]);
            gv_difficultyminmutators = 2;
            gv_difficultymaxmutators = 3;
            gv_selectedDifficultyNumber = 2; // for "extra units spawn (check Zerg Invasion trigger)"
            gv_enabledshareDay = 18;
        }

        if ((gv_variablevotenightmare > lv_nbjoueursauvote2)) {
            gv_variablevotenightmare = 5;
            gv_difficulty = "Nightmare";
            gv_winbonus = gv_winbonus + 1.0;
            gv_damageBonus = 20;
            gv_tempsJourInitial = gv_tempsJourInitial - 40.0;
            gv_tempsJour = 11.0;
            gv_win2levels = 8;
            gv_win1levels = 2;
            TechTreeUpgradeAddLevel(15, "NightmareDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[3]);
            TriggerEnable(gt_nightmaremutas, true);
            gv_difficultyminmutators = 3;
            gv_difficultymaxmutators = 4;
            gv_selectedDifficultyNumber = 3; // for "extra units spawn (check Zerg Invasion trigger)"
            gv_enabledshareDay = 17;
        }

        if ((gv_variablevotehell > lv_nbjoueursauvote2)) {
            gv_variablevotehell = 5;
            gv_difficulty = "Hell";
            gv_winbonus = gv_winbonus + 2.0;
            gv_damageBonus = 30;
            gv_tempsJourInitial = gv_tempsJourInitial - 55.0;
            gv_tempsJour = 1.0;
            gv_win2levels = 10;
            gv_win1levels = 3;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[4]);
            TriggerEnable(gt_nightmaremutas, true);
            TriggerEnable(gt_banelingkamikaze, true);
            gv_difficultyminmutators = 3;
            gv_difficultymaxmutators = 5;
            gv_selectedDifficultyNumber = 4; // for "extra units spawn (check Zerg Invasion trigger)"
            gv_enabledshareDay = 16;
        }

        if ((gv_variablevoteimpossible == lv_nbjoueursauvote)) {
            gv_variablevoteimpossible = 5;
            gv_difficulty = "Impossible";
            gv_winbonus = gv_winbonus + 3.0;
            gv_damageBonus = 40;
            gv_tempsJourInitial = gv_tempsJourInitial - 70.0;
            gv_tempsJour = 1.0;
            gv_win2levels = 12;
            gv_win1levels = 4;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[5]);
            TriggerEnable(gt_nightmaremutas, true);
            TriggerEnable(gt_banelingkamikaze, true);
            TriggerEnable(gt_hybridnemesis, true);
            gv_difficultyminmutators = 4;
            gv_difficultymaxmutators = 5;
            gv_selectedDifficultyNumber = 5; // for "extra units spawn (check Zerg Invasion trigger)"
        }

        if ((gv_damageBonus >= 0) && (gv_damageBonus < 10)) {
            gv_difficulty = "Normal";
            gv_win2levels = 2;
            gv_win1levels = 1;
            gv_difficultyminmutators = 2;
            gv_difficultymaxmutators = 3;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[1]);
            gv_enabledshareDay = 19;
        }

        if ((gv_variablevotenightshift > lv_nbjoueursauvote2)) {
            gv_variablevotenightshift = 5;
            gv_tempsJour = 1.0;
        }

        if ((gv_variablevotebossrandomizer > lv_nbjoueursauvote2)) {
            gv_variablevotebossrandomizer = 5;
            gv_winbonus = gv_winbonus + 1.0;
            TriggerEnable(gt_BossRandomizer, true);
        }

        if ((gv_variablevoteHardcore > lv_nbjoueursauvote2)) {
            gv_variablevoteHardcore = 5;
            gv_winbonus = gv_winbonus + 2.0;

            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gv_passivePrestigeLevel[PlayerGroupLoopCurrent()] = 0;
            }
            PlayerGroupLoopEnd();
        }

        if ((gv_variablevotemutators > lv_nbjoueursauvote2)) {
            gv_variablevotemutators = 5;
            gv_winbonus = gv_winbonus + 1.0;
            TriggerExecute(gt_mutators, false, false);
        }

        if ((gv_GameMode == "Versus")) {
            // Versus difficulty set level
            gv_damageBonus = 10;
            gv_difficulty = "Nightmare";
            gv_tempsJour = 50.0;
            gv_variablevoteelite = 5;
            gv_tempsJourInitial = gv_tempsJourInitial - 40.0;
            gv_tempsNuit = gv_tempsNuit - 30.0;
            TechTreeUpgradeAddLevel(15, "EliteDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[2]);
            libNtve_gf_SetUpgradeLevelForPlayer(gv_theThingPlayer, "Difficulty", gv_difficultydamage[2]);
            gv_win2levels = 0;
            gv_win1levels = 0;
            gv_winbonus = -1.0;
            TriggerEnable(gt_nightmaremutas, true);
            gv_enabledshareDay = 30;
        }
        // Moved to Map Init trigger
        // PlayerGroupLoopBegin(PlayerGroupActive());
        // for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //     VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
        // }
        // PlayerGroupLoopEnd();
        // UnitGroupLoopBegin(UnitGroup(null, 0, null, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        // for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        //     if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
        //         UnitRemove(UnitGroupLoopCurrent());
        //     }
        // }
        // UnitGroupLoopEnd();
        // UISetResourceVisible(PlayerGroupAll(), c_resourceTypeTerrazine, true);
        // UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, true);

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7E90EEE6"));

        if (gv_GameMode != "Versus") {
            if (gv_difficulty == "Easy") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/66141F87"));
                UnitCreate(1, "MineralCrystal", 0, 0, Point(RandomInt(65, 77), RandomInt(78, 88)), libNtve_gf_RandomAngle());
                UnitCreate(1, "MineralCrystal", 0, 0, RegionRandomPoint(RegionFromName("Center")), libNtve_gf_RandomAngle());
                UnitCreate(1, "GasCanisterZerg", 0, 0, RegionRandomPoint(RegionFromName("Center")), libNtve_gf_RandomAngle());
            }
            if (gv_difficulty == "Normal") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/40EAB3B6"));
            }
            if (gv_difficulty == "Elite") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D24C0A50"));
                libNtve_gf_UnitSetVariation(UnitFromId(3), "TempleStatue", 5, "");
                libNtve_gf_UnitSetVariation(UnitFromId(82), "TempleStatue", 5, "");
            }
            if (gv_difficulty == "Nightmare") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D409C82F"));
                libNtve_gf_UnitSetVariation(UnitFromId(3), "TempleStatue", 5, "");
                libNtve_gf_UnitSetVariation(UnitFromId(82), "TempleStatue", 5, "");
            }
            if (gv_difficulty == "Hell") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/15A996B5"));
                libNtve_gf_UnitSetVariation(UnitFromId(3), "TempleStatue", 5, "");
                libNtve_gf_UnitSetVariation(UnitFromId(82), "TempleStatue", 5, "");
            }
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_ImpossibleChosen"));
                libNtve_gf_UnitSetVariation(UnitFromId(3), "TempleStatue", 5, "");
                libNtve_gf_UnitSetVariation(UnitFromId(82), "TempleStatue", 5, "");
            }

            if ((gv_variablevotenightshift == 5) || (gv_variablevotebossrandomizer == 5) || (gv_variablevotemutators == 5) || (gv_variablevoteHardcore == 5)) {
                lv_modifiermessage = StringToText("");
            }
            if (gv_variablevotenightshift == 5) {
                lv_modifiermessage += TextWithColor(StringToText("Night Shift"), Color(0.00, 0.00, 255.00));
                lv_modifiernumber += 1;
            }
            if (gv_variablevotebossrandomizer == 5) {
                if (lv_modifiernumber > 0) {
                    lv_modifiermessage += StringToText(" + ");
                }
                lv_modifiermessage += TextWithColor(StringToText("Boss Randomizer"), Color(255.00, 0.00, 0.00));
                lv_modifiernumber += 1;
            }
            if (gv_variablevotemutators == 5) {
                if (lv_modifiernumber > 0) {
                    lv_modifiermessage += StringToText(" + ");
                }
                lv_modifiermessage += TextWithColor(StringToText("Mutators"), Color(0.00, 255.00, 0.00));
                lv_modifiernumber += 1;
            }
            if (gv_variablevoteHardcore == 5) {
                if (lv_modifiernumber > 0) {
                    lv_modifiermessage += StringToText(" + ");
                }
                lv_modifiermessage += TextWithColor(StringToText("Hardcore"), Color(255.00, 0.00, 0.00));
                lv_modifiernumber += 1;
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0A2D1526") + lv_modifiermessage));
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(17), 4.0, false);
            // Reveal Starting Region Zones
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(14), 0.1, false);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(16), 0.1, false);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(44), 0.1, false);
            gv_inBase[PlayerGroupLoopCurrent()] = false;
        }
        PlayerGroupLoopEnd();
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(290)), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInventoryPanel, false);
        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            TriggerExecute(gt_TradeMenuCreateImproved, true, false);
        }
        else {
            TriggerExecute(gt_WorldMarketMenuCreate, true, false);
        }
        TriggerExecute(gt_votekickCreate, true, false);
        TriggerExecute(gt_bosspool, true, false);
        TriggerExecute(gt_autozoom, true, false);
        TriggerEnable(gt_swap, true);
        TriggerEnable(gt_CommandsZoom, true);
        TriggerEnable(gt_SkinsDialog, true);
        TriggerEnable(gt_infestedbuildings, true);
        TriggerEnable(gt_ZergInactif, true);
        TriggerEnable(gt_choosePassivePrestigeLevel, false);

        // Night shift dummy upgrade
        if (gv_variablevotenightshift == 5) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "Isnightshift", 1);
            }
            PlayerGroupLoopEnd();
            TechTreeUpgradeAddLevel(6, "Isnightshift", 1);
        }
        else {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "Isnotnightshift", 1);
            }
            PlayerGroupLoopEnd();
            TechTreeUpgradeAddLevel(6, "Isnotnightshift", 1);
        }

        // Hardcore upgrade
        if (gv_variablevoteHardcore == 5) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "Hardcore", 1);
            }
            PlayerGroupLoopEnd();
            TechTreeUpgradeAddLevel(6, "Hardcore", 1);
        }

        gv_nbJoueurs = PlayerGroupCount(gv_probeGroupPlayer);
        libNtve_gf_SetUpgradeLevelForPlayer(15, "Players", gv_nbJoueurs);

        gv_enabledreset = false;

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Creationdelacarte_Init () {
        gt_Creationdelacarte = TriggerCreate("gt_Creationdelacarte_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Tableau
    //--------------------------------------------------------------------------------------------------
    bool gt_Tableau_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_rang;
        int init_i;
        int lv_lastactiveplayer;
        int lv_i;

        // Variable Initialization
        lv_rang = 1;

        // Actions
        if (!runActions) {
            return true;
        }

        gv_nbJoueurs = PlayerGroupCount(gv_probeGroupPlayer);
        BoardCreate(7, (gv_nbJoueurs + 1), StringExternal("Param/Value/E6BC63C5"), Color(100.00, 100.00, 100.00));
        gv_tableau = BoardLastCreated();
        libNtve_gf_ShowHideLeaderboard(gv_tableau, false, PlayerGroupAll());

        BoardItemSetText(gv_tableau, 1, 1, StringExternal("Param/Value/72DB5BD3"));
        BoardItemSetText(gv_tableau, 2, 1, StringExternal("Param/Value/5F3E46F5"));
        BoardItemSetText(gv_tableau, 3, 1, StringExternal("Param/Value/59CBCB71"));
        BoardItemSetText(gv_tableau, 4, 1, StringExternal("Param/Value/48D8FD80"));
        BoardItemSetText(gv_tableau, 5, 1, StringExternal("Param/Value/95AC0951"));
        BoardItemSetText(gv_tableau, 6, 1, StringExternal("Param/Value/C9DEE9FC"));
        BoardItemSetText(gv_tableau, 7, 1, StringExternal("Param/Value/809D12A8"));
        BoardItemSetFontSize(BoardLastCreated(), 1, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 2, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 3, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 4, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 5, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 6, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 7, 1, 16);
        BoardItemSetFontSize(BoardLastCreated(), 8, 1, 16);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_rang += 1;
            gv_playerLine[PlayerGroupLoopCurrent()] = lv_rang;
            BoardItemSetText(gv_tableau, 1, lv_rang, PlayerName(PlayerGroupLoopCurrent()));
            BoardItemSetTextColor(gv_tableau, 1, lv_rang, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)));
            // BoardItemSetText(gv_tableau, 2, lv_rang, StringExternal("Param/Value/570319E4"));
            // BoardItemSetText(gv_tableau, 2, lv_rang, StringToText("<d Score='MineralsCurrent' Player='"+IntToString(PlayerGroupLoopCurrent())+"'/>"));
            // BoardItemSetText(gv_tableau, 3, lv_rang, StringExternal("Param/Value/E57917BD"));
            // BoardItemSetText(gv_tableau, 4, lv_rang, StringExternal("Param/Value/5A5842F3"));
            // BoardItemSetText(gv_tableau, 5, lv_rang, StringExternal("Param/Value/7B4E384F"));
            BoardItemSetText(gv_tableau, 2, lv_rang, StringExternal("DOCSTR_TableScoreMineralsCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender"));
            BoardItemSetText(gv_tableau, 3, lv_rang, StringExternal("DOCSTR_TableScoreVespeneCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender"));
            BoardItemSetText(gv_tableau, 4, lv_rang, StringExternal("DOCSTR_TableScoreTerrazineCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender"));
            BoardItemSetText(gv_tableau, 5, lv_rang, StringExternal("DOCSTR_TableScoreCustomCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender"));
            BoardItemSetText(gv_tableau, 6, lv_rang, StringExternal("Param/Value/3BEE2C75"));
            BoardItemSetFontSize(BoardLastCreated(), 1, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 2, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 3, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 4, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 5, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 6, lv_rang, 14);
            BoardItemSetFontSize(BoardLastCreated(), 7, lv_rang, 14);
        }
        PlayerGroupLoopEnd();

        if (gv_GameMode == "Versus") {
            libNtve_gf_ShowHideLeaderboard(gv_tableau, false, PlayerGroupSingle(gv_theThingPlayer));
        }
        return true;

    }

    //--------------------------------------------------------------------------------------------------
    void gt_Tableau_Init () {
        gt_Tableau = TriggerCreate("gt_Tableau_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Vars Init et tuto
    //--------------------------------------------------------------------------------------------------
    bool gt_VarsInitettuto_Func (bool testConds, bool runActions) {

        // Actions
        if (!runActions) {
            return true;
        }

        gv_minerals[1] = "MineralField";
        gv_minerals[2] = "MineralField2";
        gv_minerals[3] = "MineralField22";
        gv_zergTypes[1] = "InfestedCivilian";
        gv_zergTypes[2] = "Swarmling2";
        gv_zergTypes[3] = "Drone";
        gv_zergTypes[4] = "Zergling";
        gv_zergTypes[5] = "Zergling3";
        gv_zergTypes[6] = "Zergling2";
        gv_zergTypes[7] = "Hydralisk";
        gv_zergTypes[8] = "Hydralisk4";
        gv_zergTypes[9] = "Zealot";
        gv_zergTypes[10] = "DarkTemplar";
        gv_zergTypes[11] = "Hydralisk3";
        gv_zergTypes[12] = "Roach3";
        gv_zergTypes[13] = "Roach2";
        gv_zergTypes[14] = "Roach2";
        gv_zergTypes[15] = "Infestor2";
        gv_zergTypes[16] = "Infestor2";
        gv_zergTypes[17] = "Mutalisk";
        gv_zergTypes[18] = "Roach22";
        gv_zergTypes[19] = "Mutalisk";
        gv_zergTypes[20] = "GoldenZergling";
        gv_zergTypes[21] = "Hydralisk2";
        gv_zergTypes[22] = "Ultralisk";
        gv_zergTypes[23] = "InfestedAbomination2";
        gv_zergTypes[24] = "Mutalisk";
        gv_zergTypes[25] = "Mutalisk";
        gv_zergTypes[26] = "BroodLord";
        IntLoopBegin(27, 80);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            gv_zergTypes[IntLoopCurrent()] = "Baneling2";
        }
        IntLoopEnd();
        gv_zergTypes[34] = "Corruptor";
        gv_zergTypes[35] = "Roach4";
        gv_zergTypes[87] = "Swarmling22";
        gv_zergTypes[88] = "Baneling2";
        gv_zergTypes[89] = "Roach4";
        gv_zergTypes[90] = "Corruptor";
        TechTreeUpgradeAddLevel(15, "CentrificalHooks", 1);
        gv_nbJoueurs = PlayerGroupCount(gv_probeGroupPlayer);
        PlayerSetColorIndex(15, 13, true);
        libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), 0.0, -1, 10, false);
        }
        PlayerGroupLoopEnd();
        HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
        HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/58FB548B"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8F2CDDE8"), StringToText(""), "Assets\\Textures\\carrierportrait_static.dds");
        GameSetLighting("BelShir", 0.1);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VarsInitettuto_Init () {
        gt_VarsInitettuto = TriggerCreate("gt_VarsInitettuto_Func");
        TriggerAddEventMapInit(gt_VarsInitettuto);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Start Game, probes init (game start, game init, start init)
    //--------------------------------------------------------------------------------------------------
    bool gt_StartGameprobesinit_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
        gv_gamestarted = true;
        gv_nbJoueurs = PlayerGroupCount(gv_probeGroupPlayer);
        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            TriggerExecute(gt_roleplay, true, false);    
            gv_nbJoueursvar = PlayerGroupCount(gv_probeGroupPlayer);
            if (gv_nbJoueursvar < 4) {
                GameAddChargeUsed("Abil/UpgradeCore13224", (4.0-IntToFixed(gv_nbJoueursvar)));
                GameAddChargeUsed("Abil/SpecializationonALLmineralsnightshift", (4.0-IntToFixed(gv_nbJoueursvar)));
            } 
        } 

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeComputer)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionFromName("Center")));
                gv_probe[PlayerGroupLoopCurrent()] = UnitLastCreated();
                // experimental
                libNtve_gf_ShowHideUnit(gv_probe[PlayerGroupLoopCurrent()], false);
                //
                UnitBehaviorAddPlayer(UnitLastCreated(), gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement, PlayerGroupLoopCurrent(), 1);
                UnitBehaviorAddPlayer(UnitLastCreated(), gv_prestiges[gv_prestigeChoose[PlayerGroupLoopCurrent()]].lv_behavior, PlayerGroupLoopCurrent(), 1);
                UnitBehaviorAddPlayer(UnitLastCreated(), gv_specialityChoose[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent(), 1);
                if (gv_GameMode == "Default" || gv_GameMode == "Versus") {
                    UnitBehaviorAddPlayer(gv_probe[PlayerGroupLoopCurrent()], gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][1].lv_role, PlayerGroupLoopCurrent(), 1);
                }
                UnitAbilityAdd(UnitLastCreated(), gv_skillChoose[PlayerGroupLoopCurrent()]);
                UnitAbilityAdd(UnitLastCreated(), gv_SecondaryskillChoose[PlayerGroupLoopCurrent()]);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_skin);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_colorChoose[PlayerGroupLoopCurrent()][2]);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_colorChoose[PlayerGroupLoopCurrent()][1]);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EXPP"));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO"));
                if (gv_isbanned[PlayerGroupLoopCurrent()] == true) {
                    CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", PlayerGroupLoopCurrent(), "Cheater");
                    libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "ModelSwap Cheater");
                    UnitBehaviorAddPlayer(gv_probe[PlayerGroupLoopCurrent()], "CheaterDebuff", PlayerGroupLoopCurrent(), 1);
                }
                if (PlayerHandle(PlayerGroupLoopCurrent()) == "2-S2-1-5044133") {
                    CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", PlayerGroupLoopCurrent(), "Chicken");
                    libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "ModelSwap Cheater");
                }
                if (gv_DonateProbeNamePlayer[PlayerGroupLoopCurrent()] != "") {
                    CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", PlayerGroupLoopCurrent(), gv_DonateProbeNamePlayer[PlayerGroupLoopCurrent()]);
                }
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLevel, c_unitPropCurrent));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 1.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 1.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 1.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 1.0);
                // UnitClearSelection(PlayerGroupLoopCurrent());
                // UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
                UnitAbilityAdd(UnitLastCreated(), "ProbeBlink");

                if (gv_GameMode == "Versus") {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "HealVersus");
                    UnitAbilityRemove(gv_probe[PlayerGroupLoopCurrent()], "VoodooShield2");
                    UnitAbilityRemove(gv_probe[PlayerGroupLoopCurrent()], "ExperimentalPlasmaGun");
                    UnitAbilityRemove(gv_probe[PlayerGroupLoopCurrent()], "Transfusion");
                    UnitAbilityRemove(gv_probe[PlayerGroupLoopCurrent()], "NovaSnipe");
                }
                if ((gv_nbJoueurs == 1) && gv_GameMode != "Versus") {
                    UnitAbilityAdd(UnitLastCreated(), "RemoveMinerals");
                }
                // UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
                // CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 10, false);
                // libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetShowStatusBar");
                if ((gv_damageBonus < 0) || (TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "EconomyMastery3", c_techCountQueuedOrBetter) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PiercingSpark3", 1);
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, (85));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, (32));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, (32));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, (32));
                }
                else {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, (85 - (gv_nbJoueurs * 5)));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, (9 - FixedToInt(UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent))));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, (9 - FixedToInt(UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent))));
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, (9 - FixedToInt(UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent))));
                }
                if ((gv_damageBonus < 0) && (UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent) == 0.0))  {
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + (StringExternal("Param/Value/77DA2A00") + StringToText(""))));
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PiercingSpark", 2);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 3.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 3.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 3.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 3.0);
                }
                else {
                    if ((gv_damageBonus < 0)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PiercingSpark", 1);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 2.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 2.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 2.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 2.0);
                    }
                }
                if ((UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent) == 0.0) && (gv_damageBonus >= 0)) {
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent()) + (StringExternal("Param/Value/77DA2A00") + StringToText(""))));
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PiercingSpark", 1);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 2.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 2.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 2.0);
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 2.0);
                }

                if ((gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "BonusZeratulskin") || (gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "BonusNightmareArchon")) {
                    UnitAbilityRemove(UnitLastCreated(), "ProbeBlink");
                    UnitAbilityAdd(UnitLastCreated(), "ZeratulBlink");
                }

                if ((gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "HardShield2222")) {
                    UnitAbilityRemove(UnitLastCreated(), "ProbeBlink");
                    UnitAbilityAdd(UnitLastCreated(), "ArchonBlink");
                    TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "1chargeskillsbonuscharges", 1);
                }

                if ((gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "HardShield22222")) {
                    UnitAbilityRemove(UnitLastCreated(), "ProbeBlink");
                    UnitAbilityAdd(UnitLastCreated(), "PurifierRelocation");
                    UnitAbilityAdd(UnitLastCreated(), "Releasinghiddenenergy2");
                    TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "1chargeskillsbonuscharges", 1);

                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, c_unitPropCurrent) + 1.0));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, c_unitPropCurrent) + 1.0));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, c_unitPropCurrent) + 1.0));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, c_unitPropCurrent) + 1.0));

                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.100000 1.000000");
                }

                if ((gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "HardShield222") || (gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "BonusTassadarskin") || (gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "BonusZeratulskin") || (gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "BonusNightmareArchon")) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.100000 1.000000");
                }

                if ((gv_skins[gv_skinChoose[PlayerGroupLoopCurrent()]].lv_comportement == "HardShield2222")) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.200000 1.000000");
                }
            }
        }
        PlayerGroupLoopEnd();

        TriggerExecute(gt_FirstDay, true, false);
        TriggerExecute(gt_CustomSkinsSwapStart, false, false);
        TimerStart(gv_chrono, gv_tempsJourInitial, false, c_timeGame);
        TriggerEnable(gt_Temps, true);
        // Moved from "game start chrono expire"
        TriggerExecute(gt_Tableau, true, false);
        if ((gv_GameMode == "SandBox")) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/45D9E4D6"));
            TriggerEnable(gt_commands, true);
            TechTreeRequirementsEnable(1, false);
            libNtve_gf_SetUpgradeLevelForPlayer(1, "SandBoxGameModedummy", 1);
            PlayerAddChargeUsed(1, "Crystalquantum", -4.0);
            GameAddChargeUsed("Abil/RemoveMinerals", -95.0);
            GameAddChargeUsed("Abil/OdinWreckage", -1.0);
        }

        if (GameIsTestMap(false) == true) {
            // TriggerExecute(gt_allin, false, false);
        }

        if (gv_variablevotemutators == 5) {
            DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), true);
        }

        if (gv_GameMode == "Versus") {
            TriggerExecute(gt_spawnTheThing, true, false);
        }

        TriggerExecute(gt_prestigelevelupgrades, false, false);
        Wait(0.0625, c_timeGame);
        TriggerExecute(gt_prestigebehaviors, true, false);

        Wait(2.0, c_timeGame);
        libNtve_gf_ShowHideLeaderboard(gv_tableau, true, gv_probeGroupPlayer);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShowHideUnit(gv_probe[PlayerGroupLoopCurrent()], true);
            UnitClearSelection(PlayerGroupLoopCurrent());
            UnitSelect(gv_probe[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent(), true);
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, gv_probe[PlayerGroupLoopCurrent()]);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
            libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "SetShowStatusBar");
        }
        PlayerGroupLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StartGameprobesinit_Init () {
        gt_StartGameprobesinit = TriggerCreate("gt_StartGameprobesinit_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Night infos
    //--------------------------------------------------------------------------------------------------
    bool gt_Nightinfos_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;
        int lv_firstmutaday;
        int lv_destroyerportrait;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_dayNb == 1) && (gv_damageBonus >= 20)) {
            SoundPlay(SoundLink("QueenOfBlades_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/19BD2A26"));
        }

        if ((gv_dayNb <= 8)) {
            TechTreeUpgradeAddLevel(15, "UpgradeZergzchancreexplo", 1);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzchancreexplo", (gv_dayNb * 5));
        }
        if (((gv_dayNb == 2) || (gv_dayNb == 5) || (gv_dayNb == 11) || (gv_dayNb == 13) || (gv_dayNb == 15))) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergLow", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzZombieetGolem", gv_dayNb);
        }

        if ((gv_dayNb == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzZombieetGolem", 4);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            if ((gv_damageBonus < 19)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E519CB99"));
            }
        }

        if ((gv_dayNb == 4)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzZombieetGolem", 6);
            UnitRemove(gv_hC3A9lios);
            libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), null);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            if ((gv_damageBonus < 19)) {
                SoundPlay(SoundLink("QueenOfBlades_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/19BD2A26"));
                Wait(4.0, c_timeGame);
            }
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "JukeboxTrack02", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if (gv_damageBonus >= 40) {
            lv_firstmutaday = 4;
        }
        else {
            lv_firstmutaday = 5;
        }

        if ((gv_dayNb == lv_firstmutaday)) {
            if ((gv_damageBonus >= 20) || (gv_GameMode == "Versus")) {
                // Wait(50.0, c_timeGame);
                Wait(35.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5F83B857"));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 15, PointFromId(292));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzZombieetGolem", 8);
        }

        if ((gv_dayNb == 6)) {
            Wait(10.0, c_timeGame);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(3.0, c_timeGame);
            SoundPlay(SoundLink("Hydralisk_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if ((gv_dayNb == 8)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzHydralisse", 1);
            SoundPlay(SoundLink("Hydralisk_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian03MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(4.0, c_timeGame);
            TriggerEnable(gt_capitainezergs1225, true);
            if ((gv_damageBonus < 19)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4D0B1480"));
            }
        }

        if ((gv_dayNb == 9)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzHydralisse", 4);
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 9) + gv_versusTotalBonusZergLimit;
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 4) + gv_versusTotalBonusZergLimit;
            }
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TZeratul01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            if ((gv_damageBonus < 19)) {
                SoundPlay(SoundLink("Zealot_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
                Wait(4.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/095A4C26"));
                SoundPlay(SoundLink("Zealot_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_ProtossLoop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            }
            Wait(35.0, c_timeGame);
            gv_zergLimit = (gv_zergLimit + 10);
            Wait(35.0, c_timeGame);
            gv_zergLimit = (gv_zergLimit + 20);
        }

        if ((gv_dayNb == 10)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzHydralisse", 8);
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 9) + gv_versusTotalBonusZergLimit;
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 6) + gv_versusTotalBonusZergLimit;
            }
            if ((gv_damageBonus < 19)) {
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                SoundPlay(SoundLink("DarkTemplar_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
                Wait(4.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5B4A8007"));
                SoundPlay(SoundLink("DarkTemplar_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            if ((gv_damageBonus >= 10) && (gv_damageBonus < 19)) {
                // Wait(20.0, c_timeGame);
                Wait(15.0, c_timeGame);
                SoundPlay(SoundLink("Mohandar_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F352440B"));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, 15, PointFromId(292));
                UnitBehaviorAddPlayer(UnitLastCreated(), "5Damage", 15, (gv_nbJoueursvar));
                UnitBehaviorAddPlayer(UnitLastCreated(), "20Damage", 15, 1);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                    if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                    }
                }
                PlayerGroupLoopEnd();
                Wait(4.0, c_timeGame);
                SoundPlay(SoundLink("Mohandar_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
                Wait(28.0, c_timeGame);
                gv_zergLimit = (gv_zergLimit + 20);
            }

            if ((gv_damageBonus >= 20)) {
                if ((gv_damageBonus >= 30)) {
                    gv_stonetiming = RandomInt(25, 80);
                    Wait((IntToFixed(gv_stonetiming)), c_timeGame);
                }
                else {
                    Wait(65.0, c_timeGame);
                }
                SoundPlay(SoundLink("Mohandar_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F352440B"));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, 15, PointFromId(292));
                UnitBehaviorAddPlayer(UnitLastCreated(), "5Damage", 15, (gv_nbJoueursvar));
                UnitBehaviorAddPlayer(UnitLastCreated(), "100Damage", 15, 1);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                    if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                    }
                }
                PlayerGroupLoopEnd();
                Wait(4.0, c_timeGame);
                SoundPlay(SoundLink("Mohandar_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
                Wait(15.0, c_timeGame);
                gv_zergLimit = (gv_zergLimit + 20);
            }
        }

        if ((gv_dayNb == 11) && (gv_damageBonus >= 20)) {
            if ((gv_damageBonus >= 30)) {
                gv_stonetiming = RandomInt(10, 65);
                Wait((IntToFixed(gv_stonetiming)), c_timeGame);
            }
            else {
                Wait(10.0, c_timeGame);
            }
            SoundPlay(SoundLink("Mohandar_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F352440B"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StoneZealot", 0, 15, PointFromId(292));
            UnitBehaviorAddPlayer(UnitLastCreated(), "5Damage", 15, (gv_nbJoueursvar));
            UnitBehaviorAddPlayer(UnitLastCreated(), "100Damage", 15, 1);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                }
                else {
                }
            }
            PlayerGroupLoopEnd();
            Wait(4.0, c_timeGame);
            SoundPlay(SoundLink("Mohandar_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if (((gv_dayNb >= 11) && (gv_dayNb <= 16))) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzHydralisse", 16);
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 30) + gv_versusTotalBonusZergLimit;
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 20) + gv_versusTotalBonusZergLimit;
            }
        }

        if ((gv_dayNb == 12)) {
            TriggerEnable(gt_capitainezergsfinal2635, true);
            Wait(16.0, c_timeGame);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(3.0, c_timeGame);
            SoundPlay(SoundLink("Infestor_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_ZergLoop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if ((gv_dayNb == 14)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzArmoredroachesAcid", 1);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(4.0, c_timeGame);
            SoundPlay(SoundLink("Overseer_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_ZergLoop", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if ((gv_dayNb == 15)) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            SoundPlay(SoundLink("Infestor_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_dayNb == 16)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzinfestor", 2);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            // Wait(60.0, c_timeGame);
            Wait(40.0, c_timeGame);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "UpgradeZergzzinfestor", 3);
            if ((gv_damageBonus < 19)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F91F689D"));
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/7E263E60"));
            }
            Wait(4.0, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb == 17)) {
            gv_zergLimit = (gv_nbJoueursvar + 4) + gv_versusTotalBonusZergLimit;
            Wait(4.0, c_timeGame);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            if ((gv_damageBonus < 19)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A03B2FBF"));
                Wait(10.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5E477F8D"));
                SoundPlay(SoundLink("Lurker_Yes", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            Wait(16.0, c_timeGame);
            gv_zergLimit = (gv_nbJoueursvar + 10) + gv_versusTotalBonusZergLimit;
            Wait(15.0, c_timeGame);
            gv_zergLimit = (gv_nbJoueursvar + 20) + gv_versusTotalBonusZergLimit;
            Wait(15.0, c_timeGame);
            TriggerEnable(gt_capitaineMutas1725, true);
        }

        if ((gv_dayNb == 18)) {
            gv_zergLimit = (gv_nbJoueursvar + 20) + gv_versusTotalBonusZergLimit;
            SoundPlay(SoundLink("Roach_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(4.0, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9003A51B"));
            SoundPlay(SoundLink("Roach_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_dayNb == 19)) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(14.0, c_timeGame);
            gv_zergLimit = (gv_nbJoueursvar + 40) + gv_versusTotalBonusZergLimit;
            if ((gv_damageBonus < 19)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/62C2332D"));
                SoundPlay(SoundLink("Brutalisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
            }
        }

        if ((gv_dayNb == 20)) {
            SoundPlay(SoundLink("Zergling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(4.0, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4BF08AA5"));
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            SoundPlay(SoundLink("Zergling_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((gv_dayNb == 22)) {
            Wait(4.0, c_timeGame);
            if ((gv_damageBonus < 19)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4E02F7B7"));
            }
            // Wait(20.0, c_timeGame);
            Wait(15.0, c_timeGame);
            TriggerExecute(gt_Zergsattackrocks, false, false);
        }

        if ((gv_dayNb == 23)) {
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Corruptor", 0, 15, PointFromId(292));
            if ((gv_damageBonus >= 0)) {
                UnitBehaviorAddPlayer(UnitLastCreated(), "4000Damage", 15, 1);
            }
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 8000));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 0.000000 Bounce");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.500000");
        }

        if ((gv_dayNb == 24)) {
            // gv_tempsNuit = 190.0;
            gv_tempsNuit = 130.0;
            Wait(4.0, c_timeGame);
            TriggerEnable(gt_Zeratulevent, true);
            TriggerEnable(gt_Zeratulmeurt, true);

            if ((gv_damageBonus >= 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F63FFA07"));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0A96F1FD"));
            }
            SoundPlay(SoundLink("Zeratul_Yes", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zeratul", c_unitCreateConstruct, 15, RegionRandomPoint(RegionFromId(15)));
            UnitBehaviorAddPlayer(UnitLastCreated(), "5Damage", 15, (gv_nbJoueursvar));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb == 25)) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            // gv_tempsNuit = 190.0;
            gv_tempsNuit = 130.0;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel122", 100);
            TriggerEnable(gt_Zeratulevent, false);
            TriggerEnable(gt_Zeratulmeurt, false);
            TriggerEnable(gt_Kerriganreborn, true);
            libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
            TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel122", 100);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            Wait(4.0, c_timeGame);
            SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsB1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/42E821D6"));
            SoundPlay(SoundLink("Kerrigan_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganChar", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromId(15)));
            // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 524000.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb == 26)) {
            TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
            // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 2);
            TriggerEnable(gt_Kerriganreborn, false);
            TriggerEnable(gt_capitaineMutas1725, false);
            TriggerEnable(gt_capitainezergs1225, false);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2DC5C931"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Leviathan", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb == 27)) {
            TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
            // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 4);
            Wait(4.0, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/90E88472"));
            SoundPlay(SoundLink("Baneling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if ((gv_dayNb == 28)) {	
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 6);
            }
        }
        if ((gv_dayNb == 29)) {
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 8);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C292FEEE"));
            TriggerEnable(gt_airsquadron29, true);
        }

        if ((gv_dayNb == 30)) {
            // gv_tempsNuit = 190.0;
            gv_tempsNuit = 130.0;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 10);
            }
            TriggerEnable(gt_InBaseRocks, false);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            if (gv_difficulty != "Impossible") {
                SoundPlay(SoundLink("HybridAPissed", -1), PlayerGroupAll(), 100.0, 0.0);
                Wait(4.0, c_timeGame);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/85015451"));
                SoundPlay(SoundLink("HybridAYes", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TValerian02MusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }

        if ((gv_dayNb == 31)) {
            gv_zergLimit = 50 + gv_versusTotalBonusZergLimit;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 13);
            }
        }

        if ((gv_dayNb == 32)) {
            gv_zergLimit = 60 + gv_versusTotalBonusZergLimit;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 16);
            }
        }

        if ((gv_dayNb == 33)) {
            gv_zergLimit = 70 + gv_versusTotalBonusZergLimit;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 19);
            }
        }

        if ((gv_dayNb == 34)) {
            gv_zergLimit = 60 + gv_versusTotalBonusZergLimit;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 22);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossFightIntro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                if (gv_damageBonus < 40) {
                    SoundPlay(SoundLink("Hybrid_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
                    Wait(4.0, c_timeGame);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E2DE1050"));
                    SoundPlay(SoundLink("Hybrid_StealStrengthCast", -1), PlayerGroupAll(), 100.0, 0.0);
                }
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsG", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                if ((gv_difficulty == "Impossible") || (gv_GameMode == "Versus" && gv_versusresearch_hybriddestroyer == true)) {
                    if ((UnitGroupCount(UnitGroup("Maar2", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                        PortraitCreate(25, 0, c_anchorLeft, 237, 360, "HybridDestroyer2", "", "Default", true, true);
                        lv_destroyerportrait = PortraitLastCreated();
                        PortraitWaitForLoad(lv_destroyerportrait);
                        SoundPlay(SoundLink("Hybrid_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
                        SoundLengthQuery(SoundLink("Hybrid_Ready", -1));
                        SoundLengthQueryWait();
                        Wait(SoundLengthSync(SoundLink("Hybrid_Ready", -1)), c_timeGame);
                        PortraitDestroy(lv_destroyerportrait);
                        if ((UnitGroupCount(UnitGroup("Maar2", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Maar2", 0, 15, RegionRandomPoint(RegionFromId(15)));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                        }
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroup("Maar", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Maar", 0, 15, RegionRandomPoint(RegionFromId(15)));
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    }
                }
            }
        }

        if ((gv_dayNb == 35)) {
            gv_zergLimit = 60 + gv_versusTotalBonusZergLimit;
            gv_tempsNuit = 900.0;
            if ((gv_damageBonus >= 0)) {
                TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel12", 2);
                // libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 24);
            }
        }

        if ((gv_dayNb == 36) && (gv_damageBonus >= 0)) {
            TriggerExecute(gt_timer36, true, false);
        }

        if ((gv_dayNb >= 36) && (gv_damageBonus >= 0)) {
            gv_zergLimit = 200 + gv_versusTotalBonusZergLimit;
            gv_tempsNuit = 150.0;
            gv_temps = 150;
            TriggerEnable(gt_Temps, true);
            // gv_TempsEnabled = true;
            TriggerEnable(gt_maar36, true);
            TriggerEnable(gt_Chronoeach1sec, true);
            // gv_ChronoEach1SecEnabled = true;
            TimerStart(gv_chrono, gv_tempsNuit, true, c_timeGame);
        }

        if (gv_dayNb == gv_customSkin1GodliskSpawnDay && gv_customSkin1GodliskSpawn == true) {
            TriggerExecute(gt_CustomSkin1UnlockmentbiowaveGodliskSpawn, false, false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Nightinfos_Init () {
        gt_Nightinfos = TriggerCreate("gt_Nightinfos_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refresh  Board
    //--------------------------------------------------------------------------------------------------
    bool gt_RefreshBoard_Func (bool testConds, bool runActions) {
        // Variable Declarations
        text lv_titre;
        bool lv_bool;

        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_day == true)) {
            lv_titre = (StringExternal("Param/Value/30485421") + IntToText(gv_dayNb));
            BoardSetName(gv_tableau, (StringExternal("Param/Value/147C8718") + ((lv_titre + StringExternal("Param/Value/EDD3B8B2")) + IntToText(gv_temps))), Color(100.00, 100.00, 100.00));
        }
        else {
            lv_titre = (StringExternal("Param/Value/BD6C9047") + IntToText(gv_dayNb));
            BoardSetName(gv_tableau, (StringExternal("Param/Value/081B615D") + ((lv_titre + StringExternal("Param/Value/B9D99A04")) + IntToText(gv_temps))), Color(100.00, 100.00, 100.00));
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            BoardItemSetTextColor(gv_tableau, 1, gv_playerLine[PlayerGroupLoopCurrent()], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)));
            if ((gv_inBase[PlayerGroupLoopCurrent()] == true)) {
                BoardItemSetText(gv_tableau, 7, gv_playerLine[PlayerGroupLoopCurrent()], StringExternal("Param/Value/7566C649"));
            }
            else {
                BoardItemSetText(gv_tableau, 7, gv_playerLine[PlayerGroupLoopCurrent()], StringExternal("Param/Value/BA1B3A2E"));
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefreshBoard_Init () {
        gt_RefreshBoard = TriggerCreate("gt_RefreshBoard_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: AddCore
    //--------------------------------------------------------------------------------------------------
    bool gt_AddCore_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_unit;

        // Variable Initialization
        lv_unit = EventUnitProgressUnit();

        // Conditions
        if (testConds) {
            if (!(((UnitGetType(lv_unit) == "CyberneticsCore")))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        gv_corePlayer[UnitGetOwner(lv_unit)] += 1;
        BoardItemSetText(gv_tableau, 6, gv_playerLine[UnitGetOwner(lv_unit)], IntToText(gv_corePlayer[UnitGetOwner(lv_unit)]));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AddCore_Init () {
        gt_AddCore = TriggerCreate("gt_AddCore_Func");
        TriggerAddEventUnitConstructProgress(gt_AddCore, null, c_unitProgressStageStart);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: RemCore
    //--------------------------------------------------------------------------------------------------
    bool gt_RemCore_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_unit;

        // Variable Initialization
        lv_unit = EventUnit();

        // Conditions
        if (testConds) {
            if (!(((UnitGetType(lv_unit) == "CyberneticsCore") || (UnitGetType(lv_unit) == "CyberneticsCore3") || (UnitGetType(lv_unit) == "CyberneticsCore322222") || (UnitGetType(lv_unit) == "CyberneticsCore324") || (UnitGetType(lv_unit) == "CyberneticsCore3242") || (UnitGetType(lv_unit) == "CyberneticsCore332") || (UnitGetType(lv_unit) == "CyberneticsCore32422") || (UnitGetType(lv_unit) == "CyberneticsCore3322") || (UnitGetType(lv_unit) == "CyberneticsCore3222") || (UnitGetType(lv_unit) == "CyberneticsCore32222") || (UnitGetType(lv_unit) == "CyberneticsCore322") || (UnitGetType(lv_unit) == "CyberneticsCore32") || (UnitGetType(lv_unit) == "CyberneticsCore33") || (UnitGetType(lv_unit) == "CyberneticsCore323") || (UnitGetType(lv_unit) == "CyberneticsCore3232") || (UnitGetType(lv_unit) == "CyberneticsCore323222") || (UnitGetType(lv_unit) == "CyberneticsCore32322") || (UnitGetType(lv_unit) == "AutomatedRefinery2") || (UnitGetType(lv_unit) == "AutomatedRefinery") || (UnitGetType(lv_unit) == "CyberneticsCore34222") || (UnitGetType(lv_unit) == "CyberneticsCore3422") || (UnitGetType(lv_unit) == "CyberneticsCore342") || (UnitGetType(lv_unit) == "CyberneticsCore34")))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        gv_corePlayer[UnitGetOwner(lv_unit)] -= 1;
        BoardItemSetText(gv_tableau, 6, gv_playerLine[UnitGetOwner(lv_unit)], IntToText(gv_corePlayer[UnitGetOwner(lv_unit)]));

        if ((UnitGetType(lv_unit) == "CyberneticsCore34") || (UnitGetType(lv_unit) == "CyberneticsCore342") || (UnitGetType(lv_unit) == "CyberneticsCore3422") || (UnitGetType(lv_unit) == "CyberneticsCore34222")) {
            GameAddChargeUsed("Abil/UpgradeCore13224", -1.0);
        }

        if ((UnitGetType(lv_unit) == "AutomatedRefinery2") && (UnitHasBehavior2(lv_unit, "SpecializationOnMinerals4") == true)) {
            GameAddChargeUsed("Abil/SpecializationonALLmineralsnightshift", -1.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RemCore_Init () {
        gt_RemCore = TriggerCreate("gt_RemCore_Func");
        TriggerAddEventUnitDied(gt_RemCore, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zerg Inactif
    //--------------------------------------------------------------------------------------------------
    bool gt_ZergInactif_Func (bool testConds, bool runActions) {
        unit lv_focusTargetUnit;
        unitgroup lv_unitGroup;
        int lv_unitGroupIterator;
        unit lv_createdUnit;
        // Actions
        if (!runActions) {
            return true;
        }

        lv_unitGroup = UnitGroupIdle(15, false);
        lv_unitGroupIterator = UnitGroupCount(lv_unitGroup, c_unitCountAll);
        for (;; lv_unitGroupIterator -= 1) {
            lv_createdUnit = UnitGroupUnitFromEnd(lv_unitGroup, lv_unitGroupIterator);
            if (lv_createdUnit == null) { break; }
            // lv_focusTargetUnit = gf_GetFocusTargetUnit(lv_createdUnit);
            lv_focusTargetUnit = gf_GetRandomValidFocusTargetUnit();
            if (UnitIsAlive(lv_focusTargetUnit)) {
                UnitIssueOrder(lv_createdUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_focusTargetUnit)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_createdUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ZergInactif_Init () {
        gt_ZergInactif = TriggerCreate("gt_ZergInactif_Func");
        TriggerAddEventTimePeriodic(gt_ZergInactif, 1.0, c_timeGame);
        TriggerEnable(gt_ZergInactif, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Kerrigan reborn
    //--------------------------------------------------------------------------------------------------
    bool gt_Kerriganreborn_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "KerriganChar"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        // Wait(15.0, c_timeGame);
        Wait(10.0, c_timeGame);
        if ((gv_day == false) && (gv_temps >= 20) && (UnitGroupCount(UnitGroup("KerriganChar", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
            SoundPlay(SoundLink("Kerrigan_What", -1), PlayerGroupAll(), 100.0, 0.0);
            gv_zergTypes[25] = gv_zergTypes[RandomInt(87, 90)];
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganChar", 0, 15, PointFromId(292));
            // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 524000.0);
            // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 524000.0);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            UnitBehaviorAddPlayer(UnitLastCreated(), "2000Damage", gv_zergPlayer, 1);
            if ((gv_temps <= 50)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5E204CD8"));
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 0.000000 Bounce");
                UnitBehaviorAddPlayer(UnitLastCreated(), "2000Damage", gv_zergPlayer, 3);
                TriggerEnable(gt_Kerriganreborn, false);
                TriggerEnable(gt_capitainezergs1225, false);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F70D87E3"));
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Kerriganreborn_Init () {
        gt_Kerriganreborn = TriggerCreate("gt_Kerriganreborn_Func");
        TriggerEnable(gt_Kerriganreborn, false);
        TriggerAddEventUnitDied(gt_Kerriganreborn, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zeratul event
    //--------------------------------------------------------------------------------------------------
    bool gt_Zeratulevent_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_day == false))) {
                return false;
            }

            if (!((gv_temps >= 22))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_damageBonus >= 0)) {
            UnitGroupLoopBegin(UnitGroup("Zeratul", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "4000Damage", gv_zergPlayer, 1);
            }
            UnitGroupLoopEnd();
        }

        SoundPlay(SoundLink("Zeratul_Pissed", -1), PlayerGroupAll(), 400.0, 0.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Zeratulevent_Init () {
        gt_Zeratulevent = TriggerCreate("gt_Zeratulevent_Func");
        TriggerEnable(gt_Zeratulevent, false);
        TriggerAddEventTimePeriodic(gt_Zeratulevent, 9.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zeratul meurt
    //--------------------------------------------------------------------------------------------------
    bool gt_Zeratulmeurt_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "Zeratul"))) {
                return false;
            }

            if (!((UnitGetOwner(EventUnit()) == 15))) {
                return false;
            }

            if (!((gv_day == false))) {
                return false;
            }

            if (!((gv_temps >= 20))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_damageBonus < 0) {
            TriggerEnable(gt_Zeratulevent, false);
            TriggerEnable(gt_Zeratulmeurt, false);
        }
        gv_zeratul = (gv_zeratul + 1);
        if ((gv_zeratul >= 6)) {
            SoundPlay(SoundLink("Zeratul_Death", -1), PlayerGroupAll(), 200.0, 0.0);
            TriggerEnable(gt_Zeratulmeurt, false);
            TriggerEnable(gt_Zeratulevent, false);
            EnvironmentShow(c_environmentAll, true);
            TriggerStop(TriggerGetCurrent());
        }
        else {
            if ((gv_zeratul == 5) || (gv_damageBonus >= 40)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zeratul", 0, 15, RegionRandomPoint(RegionFromId(19)));
                SoundPlay(SoundLink("Zeratul_What", -1), PlayerGroupAll(), 200.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9A83B94A"));
                // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 524000.0);
                // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 524000.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 500000.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 500000.0);
                UnitBehaviorAddPlayer(UnitLastCreated(), "DivineArmor223", gv_zergPlayer, 1);
                UnitBehaviorAddPlayer(UnitLastCreated(), "ZeratulTheONE", 15, 1);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zeratul", c_unitCreateConstruct, 15, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 1.0));
                SoundPlay(SoundLink("Zeratul_Help", -1), PlayerGroupAll(), 200.0, 0.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_zeratul * 100000));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (gv_zeratul * 100000));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B64A36DE"));
            }
            ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "SpeedUpModel", null, null, null);
            if ((gv_damageBonus >= 0)) {
                UnitBehaviorAddPlayer(UnitLastCreated(), "2000Damage", gv_zergPlayer, (gv_zeratul * 2));
            }
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, gv_zeratul);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, (gv_zeratul * 200));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Zeratulmeurt_Init () {
        gt_Zeratulmeurt = TriggerCreate("gt_Zeratulmeurt_Func");
        TriggerEnable(gt_Zeratulmeurt, false);
        TriggerAddEventUnitDied(gt_Zeratulmeurt, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: capitaine Mutas 17 -> 25
    //--------------------------------------------------------------------------------------------------
    bool gt_capitaineMutas1725_Func (bool testConds, bool runActions) {
        unitgroup lv_UnitGroup;
        int lv_UnitGroupIterator;
        unit auto792A11611_var;

        // Conditions
        if (testConds) {
            if (!((gv_day == false))) {
                return false;
            }

            if (!(((gv_dayNb >= 17) && (gv_dayNb <= 25)))) {
                return false;
            }

            if (!((gv_temps >= 20))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        TechTreeUpgradeAddLevel(15, "ZergMeleeWeaponsLevel122", 1);
        if (((gv_dayNb >= 17) && (gv_dayNb <= 24))) {
            IntLoopBegin(1, (gv_nbJoueursvar + 2));
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mutalisk", 0, 15, PointFromId(292));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            IntLoopEnd();
        }
        else {
            UnitCreate(14, "Mutalisk", 0, 15, PointFromId(292), libNtve_gf_RandomAngle());
            lv_UnitGroup = UnitLastCreatedGroup();
            lv_UnitGroupIterator = UnitGroupCount(lv_UnitGroup, c_unitCountAll);
            for (;; lv_UnitGroupIterator -= 1) {
                auto792A11611_var = UnitGroupUnitFromEnd(lv_UnitGroup, lv_UnitGroupIterator);
                if (auto792A11611_var == null) { break; }
                UnitIssueOrder(auto792A11611_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            UnitCreate(gv_nbJoueursvar, "Swarmling22", 0, 15, RegionRandomPoint(RegionFromId(3)), libNtve_gf_RandomAngle());
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_zergTypes[RandomInt(87, 89)], 0, gv_zergPlayer, RegionRandomPoint(RegionFromId(3)));
                if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }
                Wait(0.0625, c_timeGame);
            }
            PlayerGroupLoopEnd();
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_capitaineMutas1725_Init () {
        gt_capitaineMutas1725 = TriggerCreate("gt_capitaineMutas1725_Func");
        TriggerEnable(gt_capitaineMutas1725, false);
        TriggerAddEventTimePeriodic(gt_capitaineMutas1725, 25.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: capitaine zergs 12 -> 25 
    //--------------------------------------------------------------------------------------------------
    bool gt_capitainezergs1225_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_randomvar;
        int lv_x;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((gv_day == false))) {
                return false;
            }

            if (!((gv_temps >= 20))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }
        if ((gv_damageBonus >= 0)) {
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "5Damage", 15, 1);
            }
            UnitGroupLoopEnd();
        }

        if ((gv_dayNb <= 10)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/044018C9"));
        }
        else {
            if ((gv_dayNb <= 14)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach32", 0, 15, PointFromId(128));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 200));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            else {
                if ((gv_dayNb <= 19)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Infestor2", 0, 15, PointFromId(292));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    if ((UnitGroupCount(UnitGroup("Roach23", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach23", 0, 15, PointFromId(292));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 500));
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    }
                }
                else {
                    if ((UnitGroupCount(UnitGroup(gv_zergBoss[gv_zergTypeNb], 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_zergBoss[gv_zergTypeNb], 0, 15, RegionRandomPoint(RegionFromId(3)));
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, gv_dayNb);
                        if ((gv_dayNb > 22)) {
                            // UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 524000.0);
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 500000.0);
                        }

                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                        PlayerGroupLoopBegin(gv_probeGroupPlayer);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                            }
                        }
                        PlayerGroupLoopEnd();
                    }

                    if (((gv_dayNb >= 20) && (gv_dayNb <= 29))) {
                        if ((gv_dayNb > 23)) {
                            lv_randomvar = RandomInt(1, 3);
                        }
                        else {
                            lv_randomvar = 1;
                        }
                        if ((lv_randomvar <= 1)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4291C70D"));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Baneling2", 0, 15, PointFromId(292));
                            UnitBehaviorAddPlayer(UnitLastCreated(), "8000Damage", 15, (gv_dayNb/4));
                            UnitBehaviorAddPlayer(UnitLastCreated(), "20000Damage", 15, 1);
                            if ((gv_damageBonus >= 40)) {
                                UnitBehaviorAddPlayer(UnitLastCreated(), "20000Damage", 15, 2);
                            }
                            if ((gv_damageBonus >= 20) && (gv_damageBonus < 30)) {
                                UnitBehaviorAddPlayer(UnitLastCreated(), "20000Damage", 15, 1);
                            }
                            if ((gv_damageBonus >= 10) && (gv_damageBonus <= 19)) {
                                UnitBehaviorAddPlayer(UnitLastCreated(), "10000Damage", 15, 1);
                            }
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 8000));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 4.0);
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 0.000000 Bounce");
                            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 4.000000");
                        }
                        if ((lv_randomvar == 2)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/46D5EF6D"));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Corruptor", 0, 15, PointFromId(292));
                            UnitBehaviorAddPlayer(UnitLastCreated(), "2000Damage", 15, (((gv_damageBonus / 2) + gv_dayNb) - 20));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 4000));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 0.000000 Bounce");
                            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale 1.500000");
                        }
                        if ((lv_randomvar == 3)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/68A482D4"));
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedTerran", 0, 15, PointFromId(292));
                            UnitBehaviorAddPlayer(UnitLastCreated(), "2000Damage", 15, (((gv_damageBonus / 2) + gv_dayNb) - 20));
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 4000));
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                        }
                        PlayerGroupLoopBegin(gv_probeGroupPlayer);
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                            }
                        }
                        PlayerGroupLoopEnd();
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_capitainezergs1225_Init () {
        gt_capitainezergs1225 = TriggerCreate("gt_capitainezergs1225_Func");
        TriggerEnable(gt_capitainezergs1225, false);
        TriggerAddEventTimePeriodic(gt_capitainezergs1225, 30.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: capitaine zergs final 26 -> 35
    //--------------------------------------------------------------------------------------------------
    bool gt_capitainezergsfinal2635_Func (bool testConds, bool runActions) {
        int lv_destroyerportrait;
        int lv_behemothportrait;

        // Conditions
        if (testConds) {
            if (gv_day == true) {
                return false;
            }

            if (gv_dayNb < 26) {
                return false;
            }

            if (gv_temps < 20) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (((gv_dayNb >= 28) && (gv_dayNb <= 34))) {
            gv_zergTypes[gv_dayNb] = gv_zergTypes[RandomInt(87, 90)];
        }
        else {
            gv_zergTypes[35] = gv_zergTypes[89];
        }
        libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionEntireMap());
        if ((UnitIsAlive(UnitFromId(290)) == true) && (gv_dayNb >= 35)) {
            UnitKill(UnitFromId(290));
            TriggerStop(TriggerGetCurrent());
        }

        Wait(0.2, c_timeGame);
        if (((gv_dayNb >= 26) && (gv_dayNb <= 29))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(50.0, 100.0)), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(110.0, 100.0)), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(110.0, 50.0)), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BroodLord", 0, 15, PointFromId(292));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(50.0, 50.0)), c_orderQueueReplace);
        }

        if ((gv_dayNb >= 26) && (UnitGroupCount(UnitGroup("Leviathan", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Leviathan", 0, 15, RegionRandomPoint(RegionFromId(19)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb >= 27) && (UnitGroupCount(UnitGroup("KerriganChar", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganChar", 0, 15, PointFromId(128));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }

        if ((gv_dayNb >= 30)) {
            if (gv_difficulty == "Impossible" || (gv_GameMode == "Versus" && gv_versusresearch_hybridbehemoth == true)) {
                if ((UnitGroupCount(UnitGroup("Hybrid2", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                    if (gv_hybridbehemothmessage == false) {
                        PortraitCreate(25, 0, c_anchorLeft, 237, 360, "BehemothHybrid", "", "Default", true, true);
                        lv_behemothportrait = PortraitLastCreated();
                        PortraitWaitForLoad(lv_behemothportrait);
                        SoundPlay(SoundLink("Ultralisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);
                        PlayerGroupLoopBegin(PlayerGroupActive());
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
                        }
                        PlayerGroupLoopEnd();
                        SoundLengthQuery(SoundLink("Ultralisk_Roar2", -1));
                        SoundLengthQueryWait();
                        Wait(SoundLengthSync(SoundLink("Ultralisk_Roar2", -1))+1.0, c_timeGame);
                        PortraitDestroy(lv_behemothportrait);
                        gv_hybridbehemothmessage = true;
                    }
                    else {
                        SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
                        PlayerGroupLoopBegin(PlayerGroupActive());
                        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                        }
                        PlayerGroupLoopEnd();
                    }
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hybrid2", 0, 15, RegionRandomPoint(RegionFromId(15)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    Wait(0.5, c_timeGame);
                    PlayerGroupLoopBegin(gv_probeGroupPlayer);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                        }
                    }
                    PlayerGroupLoopEnd();
                }
            }
            else {
                if ((UnitGroupCount(UnitGroup("Hybrid", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hybrid", 0, 15, RegionRandomPoint(RegionFromId(15)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    Wait(0.5, c_timeGame);
                    PlayerGroupLoopBegin(gv_probeGroupPlayer);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                        }
                    }
                    PlayerGroupLoopEnd();
                }
            }
        }

        if ((gv_damageBonus >= 0) && (gv_dayNb >= 34)) {
            if ((gv_difficulty == "Impossible") || (gv_GameMode == "Versus" && gv_versusresearch_hybriddestroyer == true)) {
                if ((UnitGroupCount(UnitGroup("Maar2", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                    if (gv_destroyerportraitdead != 0) {
                        PortraitDestroy(gv_destroyerportraitdead); 
                    }
                    PortraitCreate(25, 0, c_anchorLeft, 237, 360, "HybridDestroyer2", "", "Default", true, true);
                    lv_destroyerportrait = PortraitLastCreated();
                    PortraitWaitForLoad(lv_destroyerportrait);
                    SoundPlay(SoundLink("Hybrid_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
                    SoundLengthQuery(SoundLink("Hybrid_Ready", -1));
                    SoundLengthQueryWait();
                    Wait((SoundLengthSync(SoundLink("Hybrid_Ready", -1))+1.0), c_timeGame);
                    PortraitDestroy(lv_destroyerportrait);
                    if ((UnitGroupCount(UnitGroup("Maar2", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Maar2", 0, 15, RegionRandomPoint(RegionFromId(15)));
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                    }
                }
            }
            else {
                if ((UnitGroupCount(UnitGroup("Maar", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Maar", 0, 15, RegionRandomPoint(RegionFromId(15)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_capitainezergsfinal2635_Init () {
        gt_capitainezergsfinal2635 = TriggerCreate("gt_capitainezergsfinal2635_Func");
        TriggerEnable(gt_capitainezergsfinal2635, false);
        TriggerAddEventTimePeriodic(gt_capitainezergsfinal2635, 30.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zergs attack rocks
    //--------------------------------------------------------------------------------------------------
    bool gt_Zergsattackrocks_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_inBase[PlayerGroupLoopCurrent()] == true)) {
                lv_x = 1;
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_x >= 1)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B18804AF"));
            if (gv_GameMode == "Versus") {
                libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_Enemy);
            }
            else {
                libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_EnemyWithSharedVision); 
            }
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Zergsattackrocks_Init () {
        gt_Zergsattackrocks = TriggerCreate("gt_Zergsattackrocks_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zerg Invasion
    //--------------------------------------------------------------------------------------------------
    bool gt_ZergInvasion_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        unitgroup lv_UnitGroup;
        int lv_UnitGroupIterator;
        unit lv_CreatedUnit;
        unit lv_FocusTargetUnit;
        int lv_loopSum;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < gv_zergLimit))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }
        // Visual Nydus Animation
        UnitCargoCreate(UnitFromId(290), "Baneling", 1);
        UnitIssueOrder(UnitFromId(290), Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        UnitRemove(UnitLastCreated());

        lv_loopSum = 1+gv_difficultyExtraMobsSpawnAmount[gv_selectedDifficultyNumber]+gv_nbJoueursvar;

        IntLoopBegin(1, lv_loopSum);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_zergTypes[gv_zergTypeNb], 0, gv_zergPlayer, RegionRandomPoint(RegionFromId(3)));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, gv_dayNb);

            lv_FocusTargetUnit = gf_GetRandomValidFocusTargetUnit();
            if ( (UnitIsAlive(lv_FocusTargetUnit) == true) && (UnitTestPlane(UnitLastCreated(), c_planeAir) == false) ) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            Wait(0.0625, c_timeGame);
        }
        IntLoopEnd();

        // UnitCreate((gv_nbJoueursvar+1+gv_difficultyExtraMobsSpawnAmount[gv_selectedDifficultyNumber]), gv_zergTypes[gv_zergTypeNb], 0, 15, PointFromId(129), libNtve_gf_RandomAngle());
        // lv_UnitGroup = UnitLastCreatedGroup();
        // lv_UnitGroupIterator = UnitGroupCount(lv_UnitGroup, c_unitCountAll);
        // for (;; lv_UnitGroupIterator -= 1) {
        //     lv_CreatedUnit = UnitGroupUnitFromEnd(lv_UnitGroup, lv_UnitGroupIterator);
        //     if (lv_CreatedUnit == null) { break; }
        //     if (gv_dayNb < 25) {
        //         UnitSetPropertyFixed(lv_CreatedUnit, c_unitPropLevel, gv_dayNb);
        //     }
        //     // UnitIssueOrder(lv_CreatedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        //     lv_FocusTargetUnit = gf_GetFocusTargetUnit(lv_CreatedUnit);
        //     UnitIssueOrder(lv_CreatedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);
        // }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ZergInvasion_Init () {
        gt_ZergInvasion = TriggerCreate("gt_ZergInvasion_Func");
        TriggerEnable(gt_ZergInvasion, false);
        TriggerAddEventTimePeriodic(gt_ZergInvasion, 3.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zerg Invasion Impossible
    //--------------------------------------------------------------------------------------------------
    bool gt_ZergInvasionImpossible_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        unitgroup lv_UnitGroup;
        int lv_UnitGroupIterator;
        unit lv_CreatedUnit;
        unit lv_FocusTargetUnit;

        int lv_loopSum;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) < gv_zergLimit+20))) {
                return false;
            }
            if (gv_day == true) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }


        // Visual Nydus Animation
        UnitCargoCreate(UnitFromId(290), "Baneling", 1);
        UnitIssueOrder(UnitFromId(290), Order(AbilityCommand("NydusCanalTransport", 1)), c_orderQueueReplace);
        UnitRemove(UnitLastCreated());

        lv_loopSum = 1+gv_difficultyExtraMobsSpawnAmount[gv_selectedDifficultyNumber]+gv_nbJoueursvar;

        IntLoopBegin(1, lv_loopSum);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_zergTypes[gv_zergTypeNb], 0, gv_zergPlayer, RegionRandomPoint(RegionFromId(3)));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, gv_dayNb);

            lv_FocusTargetUnit = gf_GetRandomValidFocusTargetUnit();
            if ( (UnitIsAlive(lv_FocusTargetUnit) == true) && (UnitTestPlane(UnitLastCreated(), c_planeAir) == false) ) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
            Wait(0.0625, c_timeGame);
        }
        IntLoopEnd();

        // UnitCreate((gv_nbJoueursvar+1+gv_difficultyExtraMobsSpawnAmount[gv_selectedDifficultyNumber]), gv_zergTypes[gv_zergTypeNb], 0, 15, PointFromId(129), libNtve_gf_RandomAngle());
        // lv_UnitGroup = UnitLastCreatedGroup();
        // lv_UnitGroupIterator = UnitGroupCount(lv_UnitGroup, c_unitCountAll);
        // for (;; lv_UnitGroupIterator -= 1) {
        //     lv_CreatedUnit = UnitGroupUnitFromEnd(lv_UnitGroup, lv_UnitGroupIterator);
        //     if (lv_CreatedUnit == null) { break; }
        //     if (gv_dayNb < 25) {
        //         UnitSetPropertyFixed(lv_CreatedUnit, c_unitPropLevel, gv_dayNb);
        //     }
        //     lv_FocusTargetUnit = gf_GetFocusTargetUnit(lv_CreatedUnit);
        //     // UnitIssueOrder(lv_CreatedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        //     UnitIssueOrder(lv_CreatedUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);
        // }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ZergInvasionImpossible_Init () {
        gt_ZergInvasionImpossible = TriggerCreate("gt_ZergInvasionImpossible_Func");
        TriggerEnable(gt_ZergInvasionImpossible, false);
        TriggerAddEventTimePeriodic(gt_ZergInvasionImpossible, 2.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zerg Boss
    //--------------------------------------------------------------------------------------------------
    bool gt_ZergBoss_Func (bool testConds, bool runActions) {
        int lv_amount;
        fixed lv_time;
        unit lv_FocusTargetUnit;

        unit lv_unitTarget;
        unitgroup lv_targetUnitGroup;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_amount = gv_nbJoueursvar;

        if ((gv_difficulty == "Hell") || (gv_GameMode == "Versus" && gv_versusresearch_bossinvasion == true)) {
            lv_amount = gv_nbJoueursvar*2;
        }

        if (gv_difficulty == "Impossible") {
            lv_amount = 10;
        }
        
        if (lv_amount > 5) {
            lv_time = (gv_tempsNuit - (gv_tempsNuit * 0.3))/lv_amount;
        }
        else {
            lv_time = (gv_tempsNuit - (gv_tempsNuit * 0.4))/lv_amount;
        }

        if ((gv_zergBoss[gv_zergTypeNb] != null)) {
            IntLoopBegin(1, lv_amount);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {

                Wait(lv_time, c_timeGame);

                if ((gv_variablevotebossrandomizer == 5)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_BossArray[(RandomInt(1, 7))], 0, 15, RegionRandomPoint(RegionFromId(19)));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 20);
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_zergBoss[gv_zergTypeNb], 0, 15, RegionRandomPoint(RegionFromId(19)));
                }

                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, gv_dayNb);

                // lv_FocusTargetUnit = gf_GetFocusTargetUnit(UnitLastCreated());
                // UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);

                lv_FocusTargetUnit = gf_GetRandomValidFocusTargetUnit();
                if ((UnitIsAlive(lv_FocusTargetUnit) == true)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_FocusTargetUnit)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }

                if (((gv_dayNb >= 25) || (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLife, c_unitPropCurrent) <= 1.0))) {
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (gv_dayNb * 10000));
                    if ((gv_dayNb >= 30)) {
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 500000.0);
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, 500000.0);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (UnitTypeGetName(UnitGetType(UnitLastCreated())) + StringExternal("Param/Value/9AB46B8D")));
                }
            }
            IntLoopEnd();
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ZergBoss_Init () {
        gt_ZergBoss = TriggerCreate("gt_ZergBoss_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: air squadron (29+)
    //--------------------------------------------------------------------------------------------------
    bool gt_airsquadron29_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unitgroup auto792A1162_g;
        unit auto792A11611_var;
        int lv_UnitGroupIterator;

        // Conditions
        if (testConds) {
            if (!((gv_day == false))) {
                return false;
            }

            if (!(gv_temps >= 20)) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        UnitCreate((gv_dayNb - 25), "Corruptor", 0, 15, PointFromId(292), libNtve_gf_RandomAngle());
        auto792A1162_g = UnitLastCreatedGroup();
        lv_UnitGroupIterator = UnitGroupCount(auto792A1162_g, c_unitCountAll);
        for (;; lv_UnitGroupIterator -= 1) {
            auto792A11611_var = UnitGroupUnitFromEnd(auto792A1162_g, lv_UnitGroupIterator);
            if (auto792A11611_var == null) { break; }
            UnitIssueOrder(auto792A11611_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_airsquadron29_Init () {
        gt_airsquadron29 = TriggerCreate("gt_airsquadron29_Func");
        TriggerEnable(gt_airsquadron29, false);
        TriggerAddEventTimePeriodic(gt_airsquadron29, 29.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: air squadron (Overmind) Impossible
    //--------------------------------------------------------------------------------------------------
    bool gt_airsquadron29impossible_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unitgroup auto792A11622_g;
        unit auto792A11611_var;
        int lv_UnitGroupIterator;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((gv_day == false))) {
                return false;
            }

            if (!(gv_temps >= 20)) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        UnitCreate((gv_dayNb - 15), "Corruptor", 0, 15, PointFromId(292), libNtve_gf_RandomAngle());
        auto792A11622_g = UnitLastCreatedGroup();
        lv_UnitGroupIterator = UnitGroupCount(auto792A11622_g, c_unitCountAll);
        for (;; lv_UnitGroupIterator -= 1) {
            auto792A11611_var = UnitGroupUnitFromEnd(auto792A11622_g, lv_UnitGroupIterator);
            if (auto792A11611_var == null) { break; }
            UnitIssueOrder(auto792A11611_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_airsquadron29impossible_Init () {
        gt_airsquadron29impossible = TriggerCreate("gt_airsquadron29impossible_Func");
        TriggerEnable(gt_airsquadron29impossible, false);
        TriggerAddEventTimePeriodic(gt_airsquadron29impossible, 19.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: LevelUp Probe
    //--------------------------------------------------------------------------------------------------
    bool gt_LevelUpProbe_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_saved[EventPlayer()] == true))) {
                return false;
            }

            if (!((EventUnit() == gv_probe[EventPlayer()]))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        SoundPlay(SoundLink("UI_BNet_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) < 50.0)) {
            BankValueSetFromFixed(gv_playerbanks[UnitGetOwner(EventUnit())], "Sec", "NIVO", UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent));
            BankValueSetFromFixed(gv_playerbanks[UnitGetOwner(EventUnit())], "Sec", "NIVEXP", (BankValueGetAsFixed(gv_playerbanks[UnitGetOwner(EventUnit())], "Sec", "NIVO") * 1224.0));
            BankValueSetFromFixed(gv_playerbanks[UnitGetOwner(EventUnit())], "Sec", "EXPP", UnitGetPropertyFixed(EventUnit(), c_unitPropXP, c_unitPropCurrent));
            BankOptionSet(gv_playerbanks[UnitGetOwner(EventUnit())], c_bankOptionSignature, true);
            BankSave(gv_playerbanks[UnitGetOwner(EventUnit())]);
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(UnitGetOwner(EventUnit())) + (StringExternal("Param/Value/BD1E6E65") + FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent), 0))));
            TextTagCreate((StringExternal("Param/Value/92EB9C45") + (FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent), 0) + StringExternal("Param/Value/4939BFAB"))), 50, UnitGetPosition(EventUnit()), RandomFixed(0.0, 1.0), true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent));
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsPercent, 100.0);
        }
        else {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(UnitGetOwner(EventUnit())) + (StringExternal("Param/Value/BD1E6E65") + FixedToText(UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent), 0))));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_LevelUpProbe_Init () {
        gt_LevelUpProbe = TriggerCreate("gt_LevelUpProbe_Func");
        TriggerEnable(gt_LevelUpProbe, false);
        TriggerAddEventUnitGainLevel(gt_LevelUpProbe, UnitRefFromVariable("gv_probe[EventPlayer()]"));
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Leave
    //--------------------------------------------------------------------------------------------------
    bool gt_Leave_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_playerX;
        int lv_nivY;
        int lv_mineral;
        int lv_red;
        int lv_plasma;
        int lv_vespene;
        int lv_nombredeprobes;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_GameMode == "Versus") && EventPlayer() == gv_theThingPlayer) {
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                VisRevealArea(PlayerGroupLoopCurrent(), RegionEntireMap(), 20.0, false);
        
            }
            PlayerGroupLoopEnd();

            GameOver(EventPlayer(), c_gameOverDefeat, false, false);

            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringToText("The Thing has left... How Unfortunate"));
            Wait(4.0, c_timeGame);

            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
            }
            PlayerGroupLoopEnd();

            return true;
        }

        if (gv_GameMode == "Versus" && EventPlayer() != gv_theThingPlayer) {
            if (gv_gamestarted == true) {
                lv_nombredeprobes = 0;
                PlayerGroupLoopBegin(gv_probeGroupPlayer);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((UnitGroupCount(UnitGroup("Probe", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                        lv_nombredeprobes = (lv_nombredeprobes + 1);
                    }
                }
                PlayerGroupLoopEnd();
        
                if ((lv_nombredeprobes == 0) && (gv_GameMode == "Versus")) {
                    UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringExternal("DOCSTR_VersusThingWin")));
                    Wait(4.0, c_timeGame);
                    GameOver(gv_theThingPlayer, c_gameOverVictory, true, true);
                    return true;
                }
            }
        }
        
        lv_mineral = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
        lv_vespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
        lv_red = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
        lv_plasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore34") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore342") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore3422") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore34222")) {
                GameAddChargeUsed("Abil/UpgradeCore13224", -1.0);
            }
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "AutomatedRefinery2") && (UnitHasBehavior2(UnitGroupLoopCurrent(), "SpecializationOnMinerals4") == true)) {
                GameAddChargeUsed("Abil/SpecializationonALLmineralsnightshift", -1.0);
            }
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        BoardItemSetText(gv_tableau, 6, gv_playerLine[EventPlayer()], StringExternal("Param/Value/FCC3636B"));
        BoardItemSetText(gv_tableau, 7, gv_playerLine[EventPlayer()], StringExternal("Param/Value/FEEEA836"));
        PlayerGroupRemove(gv_probeGroupPlayer, EventPlayer());
        gv_inBase[EventPlayer()] = false;
        gv_nbJoueursvar = PlayerGroupCount(gv_probeGroupPlayer);
        libNtve_gf_SetUpgradeLevelForPlayer(15, "Players", gv_nbJoueursvar);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_nbJoueursvar == 5)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (25 / gv_nbJoueursvar));
            }
            else {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (24 / gv_nbJoueursvar));
            }
        }
        PlayerGroupLoopEnd();
        Wait(1.0, c_timeGame);
        if ((gv_nbJoueursvar > 1) && (gv_dayNb < 25)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/49FBC299"));
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent) > lv_nivY)) {
                lv_playerX = PlayerGroupLoopCurrent();
                lv_nivY = FixedToInt(UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, c_unitPropCurrent));
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_playerX != 0)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(lv_playerX) + (StringExternal("Param/Value/F1F8FA5B") + StringToText(""))));
            UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetOwner(UnitGroupLoopCurrent(), lv_playerX, true);
            }
            UnitGroupLoopEnd();
            PlayerModifyPropertyInt(lv_playerX, c_playerPropMinerals, c_playerPropOperAdd, lv_mineral);
            PlayerModifyPropertyInt(lv_playerX, c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
            PlayerModifyPropertyInt(lv_playerX, c_playerPropCustom, c_playerPropOperAdd, lv_red);
            PlayerModifyPropertyInt(lv_playerX, c_playerPropTerrazine, c_playerPropOperAdd, lv_plasma);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Leave_Init () {
        gt_Leave = TriggerCreate("gt_Leave_Func");
        TriggerAddEventPlayerLeft(gt_Leave, c_playerAny, c_gameResultUndecided);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Dead probe
    //--------------------------------------------------------------------------------------------------
    bool gt_Deadprobe_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_player;
        int lv_nombredeprobes;

        // Variable Initialization
        lv_player = UnitGetOwner(EventUnit());

        // Actions
        if (!runActions) {
            return true;
        }

        gv_lives[lv_player] -= 1;
        if ((PlayerStatus(UnitGetOwner(EventUnit())) != c_playerStatusLeft) && (gv_lives[lv_player] > 0)) {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, (PlayerName(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/1100E7C2")));
            CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
            if (UnitHasBehavior2(gv_probe[UnitGetOwner(EventUnit())], "HardShield22222") == true) {
                UnitCreateEffectPoint(EventUnit(), "EnergyNovaSet", UnitGetPosition(gv_probe[UnitGetOwner(EventUnit())]));
            }
        }
        else {
            UnitKill(EventUnit());
            libNtve_gf_SetAlliance(UnitGetOwner(EventUnit()), gv_zergPlayer, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe2", 0, UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()));
            SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTychus01MusicSwann", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            BoardItemSetText(gv_tableau, 6, gv_playerLine[EventPlayer()], StringExternal("Param/Value/779763B4"));
            BoardItemSetText(gv_tableau, 7, gv_playerLine[EventPlayer()], StringExternal("Param/Value/424DD4CD"));
            UnitControlGroupAddUnit(lv_player, 1, UnitLastCreated());
            UnitSelect(UnitLastCreated(), lv_player, true);
            gv_probe[UnitGetOwner(EventUnit())] = UnitLastCreated();
            CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(UnitLastCreated()), 0.0, -1, 10, false);
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/EDE78F2B"));
            Wait(1.0, c_timeGame);
            UnitKill(UnitLastCreated());
            GameOver(lv_player, c_gameOverDefeat, true, true);
            lv_nombredeprobes = 0;
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((UnitGroupCount(UnitGroup("Probe", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
                    lv_nombredeprobes = (lv_nombredeprobes + 1);
                }
            }
            PlayerGroupLoopEnd();

            if ((lv_nombredeprobes == 0) && (gv_GameMode == "Versus")) {
                UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringExternal("DOCSTR_VersusThingWin")));
                Wait(4.0, c_timeGame);
                GameOver(gv_theThingPlayer, c_gameOverVictory, true, true);
            }

            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((gv_nbJoueursvar == 5)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (25 / gv_nbJoueursvar));
                }
                else {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (24 / gv_nbJoueursvar));
                }
            }
            PlayerGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Deadprobe_Init () {
        gt_Deadprobe = TriggerCreate("gt_Deadprobe_Func");
        TriggerAddEventUnitBehaviorChange(gt_Deadprobe, null, "SecondLifeProbe", c_unitBehaviorChangeDeactivate);
        TriggerAddEventUnitBehaviorChange(gt_Deadprobe, null, "LastLifeProbe", c_unitBehaviorChangeDeactivate);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Sell recycle
    //--------------------------------------------------------------------------------------------------
    bool gt_Sellrecycle_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_unitDe;
        string lv_unit;
        fixed lv_minerai;
        int lv_vespene;
        int lv_red;
        int lv_plasma;
        int lv_joueur;
        fixed lv_nb;
        fixed lv_interval;
        fixed lv_hP;

        // Variable Initialization
        lv_unitDe = EventUnit();
        lv_unit = UnitGetType(lv_unitDe);
        lv_vespene = UnitTypeGetCost(lv_unit, c_unitCostVespene);
        lv_red = UnitTypeGetCost(lv_unit, c_unitCostCustomResource);
        lv_plasma = UnitTypeGetCost(lv_unit, c_unitCostTerrazine);
        lv_joueur = UnitGetOwner(lv_unitDe);
        lv_nb = 1.0;
        lv_interval = 0.5;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_hP = (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) / 100.0);
        lv_minerai = (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) * lv_hP);
        lv_vespene = FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent));
        lv_red = FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent));
        lv_plasma = FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent));
        if ((lv_minerai > 0)) {
            PlayerModifyPropertyInt(lv_joueur, c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_minerai));
            TextTagCreate((StringExternal("Param/Value/0DAE0128") + FixedToText(lv_minerai, 0)), 30, UnitGetPosition(EventUnit()), lv_nb, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 75.29));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
            lv_nb += lv_interval;
        }
        else {
        }
        if ((lv_vespene > 0)) {
            PlayerModifyPropertyInt(lv_joueur, c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
            TextTagCreate((StringExternal("Param/Value/58169D59") + IntToText(lv_vespene)), 30, UnitGetPosition(EventUnit()), lv_nb, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 0.00));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
            lv_nb += lv_interval;
        }
        else {
        }
        if ((lv_red > 0)) {
            PlayerModifyPropertyInt(lv_joueur, c_playerPropCustom, c_playerPropOperAdd, lv_red);
            TextTagCreate((StringExternal("Param/Value/AC76789F") + IntToText(lv_red)), 30, UnitGetPosition(EventUnit()), lv_nb, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
            lv_nb += lv_interval;
        }
        else {
        }
        if ((lv_plasma > 0)) {
            PlayerModifyPropertyInt(lv_joueur, c_playerPropTerrazine, c_playerPropOperAdd, lv_plasma);
            TextTagCreate((StringExternal("Param/Value/72917127") + IntToText(lv_plasma)), 30, UnitGetPosition(EventUnit()), lv_nb, true, false, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 50.20));
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
            lv_nb += lv_interval;
        }
        else {
        }
        UnitKill(EventUnit());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Sellrecycle_Init () {
        gt_Sellrecycle = TriggerCreate("gt_Sellrecycle_Func");
        TriggerAddEventUnitAbility(gt_Sellrecycle, null, AbilityCommand("SalvageShared", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Temps
    //--------------------------------------------------------------------------------------------------
    bool gt_Temps_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_temps -= 1;
        TriggerExecute(gt_RefreshBoard, true, false);

        if (gv_temps < 0) {
            gv_chrono = TimerCreate();
            TriggerExecute(gt_SwitchTime, false, false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Temps_Init () {
        gt_Temps = TriggerCreate("gt_Temps_Func");
        TriggerEnable(gt_Temps, false);
        TriggerAddEventTimePeriodic(gt_Temps, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: First Day
    //--------------------------------------------------------------------------------------------------
    bool gt_FirstDay_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_i;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        UnitKill(UnitFromId(88));
        TriggerEnable(gt_VOTEKICKshow, true);
        gv_temps = FixedToInt(gv_tempsJourInitial);
        GameSetLighting("BelShir", 0.0);
        gv_nbJoueursvar = PlayerGroupCount(gv_probeGroupPlayer);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_nbJoueursvar == 5)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (25 / gv_nbJoueursvar));
            }
            else {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, (24 / gv_nbJoueursvar));
            }
        }
        PlayerGroupLoopEnd();
        Wait(1.0, c_timeGame);
        TriggerEnable(gt_LevelUpProbe, true);
        TriggerExecute(gt_Ressourcespanelcreate, false, false);
        TriggerExecute(gt_Statuesinitcode, true, false);
        Wait((gv_tempsJourInitial*2.0/3.0), c_timeGame);
        GameSetLighting("BelShirSunset", 15.0);
        SoundPlay(SoundLink("ChallengescombinedAdjutant00030", -1), PlayerGroupAll(), 100.0, 0.0);
        PortraitSetVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), PlayerGroupAll(), true, false);
        PortraitSetModel(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "AdjutantPortrait_L", true);
        libNtve_gf_PortraitSetAnim(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), "Talk", "TriggerPortraitAnim", c_animFlagPlayForever, c_animTimeDefault);
        TriggerExecute(gt_ChronocrC3A9C3A9, false, false);
        Wait(0.5, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/466F7856"));
        TriggerEnable(gt_Chronoeach1sec, true);
        libNtve_gf_SetDialogItemColor(gv_chronolabel, Color(100.00, 0.00, 0.00), PlayerGroupAll());
        SoundStop(SoundLastPlayed(), true);
        SoundPlay(SoundLink("Hydralisk_Pissed", -1), PlayerGroupAll(), 200.0, 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh03BMusicEventCCCC", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        Wait(4.0, c_timeGame);
        TriggerEnable(gt_CreerVotedifficultymode, false);
        TriggerEnable(gt_CreerVotemutatormode, false);
        TriggerEnable(gt_VoteDifficultyModeDialog, false);
        TriggerEnable(gt_VotemutatorModeDialog, false);
        DialogDestroy(gv_votedifficultyModeDialogue);
        DialogDestroy(gv_votemutatorModeDialogue);
        PortraitDestroy(PortraitLastCreated());
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilianBurrowed", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromId(1)));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 2.000000 Bounce");
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedCivilianUp", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }
        PlayerGroupLoopEnd();
        Wait(4.0, c_timeGame);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "TTosh02MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UnitKill(UnitFromId(34));
        UnitKill(UnitFromId(32));
        UnitKill(UnitFromId(28));
        UnitKill(UnitFromId(29));
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilianBurrowed", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(RegionFromId(1)));
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000} 2.000000 Bounce");
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedCivilianUp", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
        }
        PlayerGroupLoopEnd();
        // TriggerEnable(gt_StatuetouchC3A91, false);
        // TriggerEnable(gt_StatuetouchC3A92, false);
        // TriggerEnable(gt_StatuetouchC3A93, false);
        // TriggerEnable(gt_StatuetouchC3A94, false);
        // UnitRemove(UnitFromId(30));
        // UnitRemove(UnitFromId(31));
        // UnitRemove(UnitFromId(85));
        // UnitRemove(UnitFromId(86));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_FirstDay_Init () {
        gt_FirstDay = TriggerCreate("gt_FirstDay_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Start Day
    //--------------------------------------------------------------------------------------------------
    bool gt_StartDay_Func (bool testConds, bool runActions) {
        int lv_requiredday;
        int lv_chosenbuilder;
        int lv_i;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        fixed lv_shield;
        string auto26222686_ai;
        string auto26222686_ae;
        string auto25222696_ae;
        
        // Actions
        if (!runActions) {
            return true;
        }
        auto26222686_ai = "i";

        // Builder mode - automatic "-builder X" at day 2 - unused
        // if ((gv_dayNb == 1) && (gv_GameMode == "Builder") && (gv_difficulty != "Impossible")) {
        //     lv_chosenbuilder = 0;
        //     lv_i = 0;
        //     while (lv_chosenbuilder == 0) {
        //         lv_i += 1;
        //         if ((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser)) {
        //             lv_chosenbuilder = lv_i;
        //         }
        //     }
        //     UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/16BD42D0"));
        //     UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(lv_chosenbuilder) + (StringExternal("Param/Value/22F392B6"))));
        //     PlayerGroupLoopBegin(PlayerGroupActive());
        //     for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        //         PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, 1, true);
        //         PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, 2, true);
        //         PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, 3, true);
        //         PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, 4, true);
        //         PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, 5, true);
        //         if (PlayerGroupLoopCurrent() != lv_chosenbuilder) {
        //             gv_builder1[PlayerGroupLoopCurrent()] = lv_chosenbuilder;
        //         }
        //         TriggerEnable(gt_Builder1each05sec, true);
        //     }
        //     PlayerGroupLoopEnd();	    
        // }

        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));

        Wait(0.375, c_timeGame);
        if (gv_GameMode == "Versus") {
            UnitBehaviorAdd(gv_TheThingHero, "DayBurn", gv_TheThingHero, 1);
        }
        // No daytime - dont kill bosses
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (gv_tempsJour <= 1.0) {
                if (UnitFilterMatch(UnitGroupLoopCurrent(), 15, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) {
                    continue;
                }
            }
            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, c_unitPropCurrent) < 10.0)) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, 10.0);
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 10.0);
            }
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Jour", 15, 1);
        }
        UnitGroupLoopEnd();
        auto25222696_ae = "m";
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterRobotic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, 100.0);
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        if ((gv_zergTypeNb < gv_levelLimit)) {
            gv_zergTypeNb += 1;
        }
        auto26222686_ae = "s";
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
                auto25222686_ai = StringToInt(StringReplace(PlayerHandle(PlayerGroupLoopCurrent()), "0", 1, 8));
                lv_shield = AbsF(ModF(IntToFixed(gv_dayNb)*10.0, AbsF(ModF((Round((ModF((ModF(auto25322686_ai, SquareRoot(5.0)) * ModF(86, SquareRoot(8.0)) * ModF(auto25322686_ae, SquareRoot(3.0)) * ModF(auto25232686_ai, SquareRoot(2.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(6.0)) * ModF(auto25233686_ai, SquareRoot(7.0)) * ModF(auto25233686_ae, SquareRoot(5.0)) * ModF(auto25333686_ai, SquareRoot(3.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(3.0)) * 10000.0)) / 1000.0), 10.0))));
                if ((gv_dayNb > (FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED")) / 4788)) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true) && (gv_damageBonus >= 0)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", IntToFixed(gv_dayNb));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", (gv_dayNb * 4788));
                }
                if ((gv_damageBonus >= 10) && (gv_dayNb > FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE"))) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE", IntToFixed(gv_dayNb));
                }
                if ((gv_damageBonus >= 20) && (gv_dayNb > FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR"))) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR", IntToFixed(gv_dayNb));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB", (gv_dayNb * 1655));
                }
                if ((gv_damageBonus >= 30) && (gv_dayNb > FixedToInt(BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HL"))) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HL", IntToFixed(gv_dayNb));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HAL", (gv_dayNb * 1631));
                }
                if ((gv_damageBonus >= 40) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true) && ((lv_shield + IntToFixed(gv_dayNb*10)) > BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae)))) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae), (lv_shield + IntToFixed(gv_dayNb*10)));
                    BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae), gv_dayNb);
                }
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }
        }
        PlayerGroupLoopEnd();
        gv_dayNb += 1;

        Wait(2.0, c_timeGame);
        // No daytime - dont kill bosses
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gv_dayNb >= 20)) {
                if (gv_tempsJour <= 1.0) {
                    if (UnitFilterMatch(UnitGroupLoopCurrent(), 15, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) {
                        continue;
                    }
                }
                UnitRemove(UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();

        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            if (gv_dayNb == gv_enabledshareDay) {
                gv_enabledshare = true;
            }
            if ((gv_enabledshare == true) && (gv_onetimepopup == false)) {
                gv_onetimepopup = true;
                if (gv_nbJoueurs > 1) {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("Param/Value/F4E0D8D1"));
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StartDay_Init () {
        gt_StartDay = TriggerCreate("gt_StartDay_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Switch Time
    //--------------------------------------------------------------------------------------------------
    bool gt_SwitchTime_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_eXPbonus;
        fixed lv_eXPday;
        int lv_eXPmode;
        int init_i;

        // Variable Initialization
        lv_eXPmode = 10;

        // Actions
        if (!runActions) {
            return true;
        }


        if (gv_GameMode != "Versus") {
            libNtve_gf_SetAlliance(0, 15, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
        }

        // If currently day - start night
        if ((gv_day == true)) {
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionjour", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionnuit", 1);
                libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "SetShowStatusBar");
            }
            PlayerGroupLoopEnd();
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
            }
            PlayerGroupLoopEnd();
            if (gv_GameMode == "Versus" || gv_mutatorEnabled[20]) {
                if (gv_versusrandomevents) {
                    TriggerExecute(gt_VersusZergEventsNight, false, false);
                }
            }
            if (gv_GameMode == "Versus") {
                gv_zergincome = (gv_zergincome + 1);
                UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringExternal("Zerg income: ") + IntToText(gv_zergincome)));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/6A3A1F92") + StringExternal("Param/Value/C2EB68C7") + IntToText(gv_dayNb) + StringExternal("DOCSTR_VersusNight")));
            }
            else {
                if (gv_difficulty == "Elite") {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/03A7E945") + IntToText(gv_dayNb) + StringExternal("Param/Value/4B7D2183")));
                    lv_eXPmode = 20;
                }
                if (gv_difficulty == "Nightmare") {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/03A7E945") + IntToText(gv_dayNb) + StringExternal("Param/Value/C7B21F7A")));
                    lv_eXPmode = 40;
                }
                if ((gv_difficulty == "Hell")) {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/03A7E945") + IntToText(gv_dayNb) + StringExternal("Param/Value/2E54627F")));
                    lv_eXPmode = 60;
                }
                if ((gv_difficulty == "Easy")) {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/6A3A1F92") + StringExternal("Param/Value/C2EB68C7") + IntToText(gv_dayNb)));
                    lv_eXPmode = 5;
                }
                if (gv_difficulty == "Impossible") {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/03A7E945") + IntToText(gv_dayNb) + StringExternal("DOCSTR_ImpossibleMode")));
                    lv_eXPmode = 80;
                }
                if (gv_difficulty == "Normal") {
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/6A3A1F92") + StringExternal("Param/Value/C2EB68C7") + IntToText(gv_dayNb)));
                } 
            }

            if (gv_GameMode != "Versus") {
                VisRevealArea(15, RegionEntireMap(), 4.0, false);
            }
            TimerStart(gv_chrono, gv_tempsNuit, true, c_timeGame);
            // fix enemy pathing (old functional)
            VisRevealArea(15, RegionEntireMap(), 4.0, false);

            gv_day = false;
            gv_temps = FixedToInt(gv_tempsNuit);
            libNtve_gf_SetDialogItemColor(gv_chronolabel, Color(28*100/255,167*100/255,234*100/255), gv_probeGroupPlayer);
            if ((gv_difficulty == "Impossible") || gv_GameMode == "Versus" && gv_versusresearch_groundinvasion == true) {
                TriggerEnable(gt_ZergInvasionImpossible, true);
            }
            else {
                TriggerEnable(gt_ZergInvasion, true);
            }
            if (gv_AccumulativeReservesEnabled) {
                TriggerExecute(gt_AccumulativeReserves, true, false);
            }

            if (gv_damageBonus >= 30) {
                TriggerExecute(gt_banelingkamikaze, true, false);
            }
            TriggerExecute(gt_ZergBoss, true, false);
            TriggerExecute(gt_Nightinfos, true, false);
            GameSetLighting("BelShirNight", 15.0);
        }
        // Else - if currently night - start day
        else {
            if (gv_versusrandomevents && gv_GameMode == "Versus") {
                TriggerExecute(gt_VersusZergEventsDay, false, false); // Spawn Mineral event, only for versus
            }
            TimerStart(gv_chrono, gv_tempsJour, true, c_timeGame);
            gv_day = true;
            gv_temps = FixedToInt(gv_tempsJour);
            TriggerExecute(gt_CoreInside, true, false);
            TriggerExecute(gt_StartDay, true, false);
            TriggerExecute(gt_Probeseekerpointatt, true, false);
            TriggerExecute(gt_Cores, true, false);
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "SetShowStatusBar");
                if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
                    if ((gv_saved[PlayerGroupLoopCurrent()] == true) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") < 50.0)) {
                        lv_eXPday = (IntToFixed(gv_dayNb) * lv_eXPmode);
                        UnitSetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropXP, (UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropXP, c_unitPropCurrent) + lv_eXPday));
                        TextTagCreate((StringExternal("Param/Value/AF022087") + (FixedToText(lv_eXPday, c_fixedPrecisionAny) + StringExternal("Param/Value/CB8D7A4A"))), 30, UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), RandomFixed(0.0, 2.0), true, false, PlayerGroupAll());
                        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
                        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                        BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EXPP", UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropXP, c_unitPropCurrent));
                    }
                    BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                    BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
                }
            }
            PlayerGroupLoopEnd();
            if ((gv_variablevotenightshift == 5) || (gv_variablevotehell == 5) || (gv_variablevoteimpossible == 5)) {}
            else {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/229A6694"));
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                libNtve_gf_SetDialogItemColor(gv_chronolabel, Color(254*100/255,138*100/255,14*100/255), PlayerGroupActive());
                TriggerEnable(gt_ZergInvasion, false);
                TriggerEnable(gt_ZergInvasionImpossible, false);
                EnvironmentShow(c_environmentAll, true);
                // GameSetLighting("AgriaSunset", 15.0);
                GameSetLighting("AgriaSunset", 10.0);
                PlayerGroupLoopBegin(gv_probeGroupPlayer);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionnuit", 0);
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionjour", 1);
                }
                PlayerGroupLoopEnd();
                // Wait(15.0, c_timeGame);
                Wait(10.0, c_timeGame);
                SoundStopAllModelSounds();
                SoundChannelStop(PlayerGroupAll(), c_soundCategoryMusic);
                SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
                SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                GameSetLighting("Agria", 2.0);
                if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
                    TriggerExecute(gt_Limitbuildings, true, false);
                }
                if ((gv_dayNb <= 16)) {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
                else {
                    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrLow_SCI", c_soundtrackCueAny, c_soundtrackIndexAny, false);
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_SwitchTime_Init () {
        gt_SwitchTime = TriggerCreate("gt_SwitchTime_Func");
        TriggerAddEventTimer(gt_SwitchTime, gv_chrono);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: InBase
    //--------------------------------------------------------------------------------------------------
    bool gt_InBase_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_couttraj;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_couttraj = AIPathingCostUnit(gv_probe[PlayerGroupLoopCurrent()], PointFromId(292), c_includeAllBuildings);
            if ((lv_couttraj == -1)) {
                if ((gv_inBase[PlayerGroupLoopCurrent()] == false)) {
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/A305B0A5"));
                    gv_focustarget[PlayerGroupLoopCurrent()] = EventUnitProgressUnit();
                    gv_pointatt[PlayerGroupLoopCurrent()] = UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()]);
                }
                gv_inBase[PlayerGroupLoopCurrent()] = true;
            }
        }
        PlayerGroupLoopEnd();
        TriggerExecute(gt_RefreshBoard, true, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_InBase_Init () {
        gt_InBase = TriggerCreate("gt_InBase_Func");
        TriggerAddEventUnitConstructProgress(gt_InBase, null, c_unitProgressStageComplete);
        TriggerAddEventUnitConstructProgress(gt_InBase, null, c_unitProgressStageStart);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: InBase 2
    //--------------------------------------------------------------------------------------------------
    bool gt_InBase2_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_couttraj;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (UnitGetOwner(EventUnit()) == 15) {
                return false;
            }

            if (UnitGetOwner(EventUnit()) == 0) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_couttraj = AIPathingCostUnit(gv_probe[PlayerGroupLoopCurrent()], PointFromId(292), c_includeAllBuildings);
            if ((lv_couttraj == -1)) {
                gv_inBase[PlayerGroupLoopCurrent()] = true;
            }
            else {
                if ((gv_inBase[PlayerGroupLoopCurrent()] == true)) {
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/998A69B9"));
                    libNtve_gf_ShowHideBossBar(false, 1);
                }
                gv_inBase[PlayerGroupLoopCurrent()] = false;
            }
        }
        PlayerGroupLoopEnd();
        TriggerExecute(gt_RefreshBoard, true, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_InBase2_Init () {
        gt_InBase2 = TriggerCreate("gt_InBase2_Func");
        TriggerAddEventUnitDied(gt_InBase2, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: InBaseRocks
    //--------------------------------------------------------------------------------------------------
    bool gt_InBaseRocks_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_couttraj;
        bool lv_inbase;
        int lv_playerkiller;
        point lv_point;

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DestructibleRock4x42"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_playerkiller = UnitGetOwner(libNtve_gf_KillingUnit());
        lv_point = UnitGetPosition(EventUnit());

        Wait(0.5, c_timeGame);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_couttraj = AIPathingCostUnit(gv_probe[PlayerGroupLoopCurrent()], PointFromId(292), c_includeAllBuildings);
            if ((lv_couttraj == -1)) {
                lv_inbase = true;
            }
            else {
                lv_inbase = false;
            }
            if ((lv_inbase == false)) {
                if ((lv_playerkiller == lv_playerkiller)) {
                    if ((gv_inBase[PlayerGroupLoopCurrent()] == true)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/998A69B9"));
                        libNtve_gf_ShowHideBossBar(false, 1);
                    }
                    gv_inBase[PlayerGroupLoopCurrent()] = false;
                }
                else {
                    if ((UnitGetOwner(libNtve_gf_KillingUnit()) <= 6) && (lv_inbase != gv_inBase[PlayerGroupLoopCurrent()]) && (gv_dayNb <= 30)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleRock4x42", c_unitCreateIgnorePlacement, 0, lv_point);
                        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {0,255,0 2.000000}");
                        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/625EF43D") + PlayerName(lv_playerkiller)));
                        UnitGroupLoopBegin(UnitGroup(null, lv_playerkiller, RegionEntireMap(), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "ZeratulStun", lv_playerkiller, 1);
                        }
                        UnitGroupLoopEnd();
                    }
                }
            }
            else {
                if ((lv_playerkiller == PlayerGroupLoopCurrent())) {
                    gv_inBase[PlayerGroupLoopCurrent()] = true;
                }
            }
        }
        PlayerGroupLoopEnd();
        TriggerExecute(gt_RefreshBoard, true, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_InBaseRocks_Init () {
        gt_InBaseRocks = TriggerCreate("gt_InBaseRocks_Func");
        TriggerAddEventUnitDied(gt_InBaseRocks, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Probe seeker point att
    //--------------------------------------------------------------------------------------------------
    bool gt_Probeseekerpointatt_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == false) && (gv_inBase[PlayerGroupLoopCurrent()] == true)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Probeseeker", 0, 15, gv_pointatt[PlayerGroupLoopCurrent()]);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                Wait(20.0, c_timeGame);
                gv_pointatt[PlayerGroupLoopCurrent()] = UnitGetPosition(UnitLastCreated());
                UnitRemove(UnitLastCreated());
                if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == false)) {
                    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(gv_pointatt[PlayerGroupLoopCurrent()], 2.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if (((UnitGetOwner(UnitGroupLoopCurrent()) >= 1) && (UnitGetOwner(UnitGroupLoopCurrent()) <= 5))) {
                            gv_focustarget[PlayerGroupLoopCurrent()] = UnitGroupLoopCurrent();
                        }
                    }
                    UnitGroupLoopEnd();
                }
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Probeseekerpointatt_Init () {
        gt_Probeseekerpointatt = TriggerCreate("gt_Probeseekerpointatt_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Roche cass??e
    //--------------------------------------------------------------------------------------------------
    bool gt_RochecassC3A9e_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_rand;
        int lv_x;
        int lv_y;
        int lv_z;
        fixed lv_multiplier;
        color lv_color;
        point lv_pointattaquC3A9;

        // Variable Initialization
        lv_color = Color(0,66*100/255,100);
        lv_multiplier = 1.0;

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DestructibleRock4x42"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_difficulty == "Hell") {
            lv_multiplier -= 0.25;
        }
        if (gv_difficulty == "Impossible") {
            lv_multiplier -= 0.5;
        }
        if (gv_GameMode == "Versus") {
            lv_multiplier += 0.5;
        }
        if (UnitHasBehavior2(libNtve_gf_KillingUnit(), "Destroyer") == true) {
            lv_multiplier += 1.0;
        }
        if (TechTreeUpgradeCount(UnitGetOwner(libNtve_gf_KillingUnit()), "EconomyMastery1", c_techCountQueuedOrBetter) == 1) {
            lv_multiplier += 0.5;
        }
        if (gv_mutatorEnabled[15]) {
            lv_multiplier += RandomFixed(0.0, 0.75);
        }
        lv_pointattaquC3A9 = UnitGetPosition(EventUnit());
        lv_z = RandomInt(1, 5);
        lv_y = FixedToInt(((gv_dayNb + 3) + (5 - gv_nbJoueursvar)) * lv_multiplier);
        if (((RegionContainsPoint(RegionFromId(11), UnitGetPosition(EventUnit())) == true) || (RegionContainsPoint(RegionFromId(2), UnitGetPosition(EventUnit())) == true) || (RegionContainsPoint(RegionFromId(45), UnitGetPosition(EventUnit())) == true))) {
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_pointattaquC3A9, 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < 1)) {
                lv_z = RandomInt(1, 3);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_variablesTypeUnitC3A9s[lv_z], 0, 0, UnitGetPosition(EventUnit()));
            }
        }
        if ((lv_z == 2)) {
            lv_color = Color(100.00, 0.00, 0.00);
            PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropCustom, c_playerPropOperAdd, lv_y);
            TextTagCreate((StringExternal("Param/Value/3F59D8E4") + FixedToText(lv_y, 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(libNtve_gf_KillingUnit())));
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        else {
            if ((lv_z == 3)) {
                lv_color = Color(100.00, 0.00, 100.00);
                PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropTerrazine, c_playerPropOperAdd, lv_y);
                TextTagCreate((StringExternal("Param/Value/BEA61406") + FixedToText(lv_y, 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(libNtve_gf_KillingUnit())));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
            }
            else {
                if ((lv_z == 4)) {
                    lv_color = Color(0.00, 100.00, 0.00);
                    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropVespene, c_playerPropOperAdd, lv_y);
                    TextTagCreate((StringExternal("Param/Value/CE1172CB") + FixedToText(lv_y, 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(libNtve_gf_KillingUnit())));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                }
                else {
                    lv_color = Color(0.00, 100.00, 100.00);
                    PlayerModifyPropertyInt(UnitGetOwner(libNtve_gf_KillingUnit()), c_playerPropMinerals, c_playerPropOperAdd, lv_y);
                    TextTagCreate((StringExternal("Param/Value/9AC1EF5E") + FixedToText(lv_y, 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(libNtve_gf_KillingUnit())));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RochecassC3A9e_Init () {
        gt_RochecassC3A9e = TriggerCreate("gt_RochecassC3A9e_Func");
        TriggerAddEventUnitDied(gt_RochecassC3A9e, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Init def variables  Type Unit??s Ressources Roche
    //--------------------------------------------------------------------------------------------------
    bool gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_variablesTypeUnitC3A9s[1] = "MineralField";
        gv_variablesTypeUnitC3A9s[2] = "MineralField2";
        gv_variablesTypeUnitC3A9s[3] = "MineralField22";
        gv_variablesTypeUnitC3A9s[4] = "MineralField222";
        gv_variablesTypeUnitC3A9s[5] = "MineralField";
        gv_variablesTypeUnitC3A9s[6] = "MineralField222";
        gv_variablesTypeUnitC3A9s[7] = "MineralField22";
        gv_variablesTypeUnitC3A9s[8] = "MineralField2";
        gv_variablesTypeUnitC3A9s[9] = "MineralField";
        gv_variablesTypeUnitC3A9s[10] = "MineralCrystal";
        gv_variablesTypeUnitC3A9s[11] = "MineralCrystal";
        gv_variablesTypeUnitC3A9s[12] = "GasCanisterZerg";
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche_Init () {
        gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche = TriggerCreate("gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche_Func");
        TriggerAddEventMapInit(gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: - Relics Xel Naga - Update
    //--------------------------------------------------------------------------------------------------
    bool gt_RelicsXelNagaUpdate_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_player;

        // Variable Initialization
        lv_player = UnitGetOwner(EventUnitTargetUnit());

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "ProtossRelic"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (lv_player == gv_theThingPlayer) {
            return false;
        }

        UnitKill(EventUnit());
        GameAddChargeUsed("AArtifact", -1.0);
        TextTagCreate((StringExternal("Param/Value/D76059E3") + StringExternal("Param/Value/7CFD4CF1")), 28, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(93.73, 57.65, 96.86));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        SoundPlay(SoundLink("UI_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(lv_player) + StringExternal("Param/Value/4E41AA2F")));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RelicsXelNagaUpdate_Init () {
        gt_RelicsXelNagaUpdate = TriggerCreate("gt_RelicsXelNagaUpdate_Func");
        TriggerAddEventUnitAbility(gt_RelicsXelNagaUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mineral
    //--------------------------------------------------------------------------------------------------
    bool gt_Mineral_Func (bool testConds, bool runActions) {
        // Variable Declarations
        color lv_color;
        string lv_mineralType;
        fixed lv_quantity;
        int lv_mineral;
        int lv_bonus;

        // Variable Initialization
        lv_mineralType = UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0)));

        // Actions
        if (!runActions) {
            return true;
        }

        lv_bonus = 0;

        if ((lv_mineralType == "MineralField")) {
            lv_color = Color(0,66*100/255,100);
            lv_quantity = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent);
            lv_mineral = 0;
        }

        if ((lv_mineralType == "MineralField2")) {
            lv_color = Color(100.00, 0.00, 0.00);
            lv_quantity = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent);
            lv_mineral = 3;
        }

        if ((lv_mineralType == "MineralField22")) {
            lv_color = Color(50.20, 0.00, 100.00);
            lv_quantity = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent);
            lv_mineral = 2;
        }

        if ((lv_mineralType == "MineralField222")) {
            lv_color = Color(0.00, 100.00, 0.00);
            lv_quantity = UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent);
            lv_mineral = 1;
        }

        if (gv_mutatorEnabled[13]) {
            lv_bonus = UnitBehaviorCount(OrderGetTargetUnit(UnitOrder(EventUnit(), 0)), "RichMineral");
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), lv_mineral, c_playerPropOperAdd, lv_bonus);
        }

        if (EventUnit() == gv_TheThingHero) {
            TextTagCreate((StringExternal("Param/Value/2223BEE2") + FixedToText(lv_quantity+IntToFixed(lv_bonus), 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(gv_theThingPlayer));
        }
        else {
            TextTagCreate((StringExternal("Param/Value/2223BEE2") + FixedToText(lv_quantity+IntToFixed(lv_bonus), 0)), 28, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        }
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Mineral_Init () {
        gt_Mineral = TriggerCreate("gt_Mineral_Func");
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("ProbeHarvest", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("ProbeHarvest2", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("SCVHarvest", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("RaynorsRaidersBlueMuleHarvest", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("RaynorsRaidersGreenMuleHarvest", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("RaynorsRaidersPurpleMuleHarvest", 1), c_abilHarvestStageDropOff, false);
        TriggerAddEventUnitAbility(gt_Mineral, null, AbilityCommand("RaynorsRaidersRedMuleHarvest", 1), c_abilHarvestStageDropOff, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mineral r??colt?? affich??
    //--------------------------------------------------------------------------------------------------
    bool gt_MineralrC3A9coltC3A9affichC3A9_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_nbressources;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((UnitGetOwner(EventUnitTargetUnit()) == 0))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_nbressources = UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropResources, c_unitPropCurrent);
        TextTagDestroy(gv_balisetxt[EventPlayer()]);
        if (EventUnit() == gv_TheThingHero) {
            TextTagCreate((StringToText("") + FixedToText(FixedToInt(lv_nbressources), 0)), 25, UnitGetPosition(EventUnitTargetUnit()), 0.5, true, false, PlayerGroupSingle(gv_theThingPlayer));
        }
        else {
            TextTagCreate((StringToText("") + FixedToText(FixedToInt(lv_nbressources), 0)), 25, UnitGetPosition(EventUnitTargetUnit()), 0.5, true, false, gv_probeGroupPlayer);
        }
        gv_balisetxt[EventPlayer()] = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_MineralrC3A9coltC3A9affichC3A9_Init () {
        gt_MineralrC3A9coltC3A9affichC3A9 = TriggerCreate("gt_MineralrC3A9coltC3A9affichC3A9_Func");
        TriggerAddEventUnitAbility(gt_MineralrC3A9coltC3A9affichC3A9, null, AbilityCommand("ProbeHarvest", 0), c_abilHarvestStageHarvest, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Heal minerals
    //--------------------------------------------------------------------------------------------------
    bool gt_Healminerals_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_diff;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (UnitGetOwner(EventUnit()) != 0) {
                return false;
            }

            if (UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent) <= 0.0) {
                return false;
            }

            if (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent)) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }


        lv_diff = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent));
        lv_diff = lv_diff / 4.0;
        
        if (EventUnitHealLaunchUnit() == gv_VersusZergUpgrades) {
            if (lv_diff > 1000.0) {
                lv_diff = 1000.0;
            }
        } 
        else if (UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT1" || UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT2" || UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT3" || UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT4" || UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT5" || UnitGetType(EventUnitHealLaunchUnit()) == "MineralzReplenisherT6") {
            if (lv_diff > 28.0) {
                lv_diff = 28.0;
            }  
        }
        else if (UnitGetType(EventUnitHealLaunchUnit()) == "FleetBeacon3") { // Quantum Healer - 0.1875 period -> x3 lv_diff from default lv_diff for other healers (14.0)
            if (lv_diff > 42.0) {
                lv_diff = 42.0;
            }  
        }
        else {
            if (lv_diff > 14.0) {
                lv_diff = 14.0;
            }  
        }
        
        if (lv_diff >= 1) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent) + lv_diff));
            UnitSetPropertyFixed(EventUnit(), c_unitPropResources, UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Healminerals_Init () {
        gt_Healminerals = TriggerCreate("gt_Healminerals_Func");
        TriggerAddEventUnitHealed(gt_Healminerals, null, c_unitVitalLife, null);
        // TriggerAddEventUnitProperty(gt_Healminerals, null, c_unitPropLife);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: World Market Menu Show (Old trade menu)
    //--------------------------------------------------------------------------------------------------
    bool gt_WorldMarketMenuShow_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_dayNb >= 2)) {
            if ((gv_variableTrade[EventPlayer()] == 1)) {
                DialogSetVisible(gv_worldmarketdialogue, PlayerGroupSingle(EventPlayer()), true);
                gv_variableTrade[EventPlayer()] = 2;
            }
            else {
                DialogSetVisible(gv_worldmarketdialogue, PlayerGroupSingle(EventPlayer()), false);
                gv_variableTrade[EventPlayer()] = 1;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9EF38CBD"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_WorldMarketMenuShow_Init () {
        gt_WorldMarketMenuShow = TriggerCreate("gt_WorldMarketMenuShow_Func");
        TriggerAddEventUnitAbility(gt_WorldMarketMenuShow, null, AbilityCommand("TradeMenu", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Trade menu Show (Improved)
    //--------------------------------------------------------------------------------------------------
    bool gt_trademenushowimproved_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
            if (TechTreeUpgradeCount(EventPlayer(), "EconomyMastery1", c_techCountQueuedOrBetter) == 1) {
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DBAF190E"));
                return false;
            }
        }
        if ((gv_dayNb >= 2)) {
            if ((gv_OpenedTrade[EventPlayer()] == false)) {
                DialogSetVisible(gv_trademenuimproveddialogue, PlayerGroupSingle(EventPlayer()), true);
                gv_OpenedTrade[EventPlayer()] = true;
            }
            else {
                DialogSetVisible(gv_trademenuimproveddialogue, PlayerGroupSingle(EventPlayer()), false);
                gv_OpenedTrade[EventPlayer()] = false;
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9EF38CBD"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_trademenushowimproved_Init () {
        gt_trademenushowimproved = TriggerCreate("gt_trademenushowimproved_Func");
        TriggerAddEventUnitAbility(gt_trademenushowimproved, null, AbilityCommand("TradeMenu2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Trade Menu Create (Improved)
    //--------------------------------------------------------------------------------------------------
    bool gt_TradeMenuCreateImproved_Func (bool testConds, bool runActions) {
        int lv_x;
        int lv_y;
        string[5] lv_amount;
        string[5] lv_resource;
        string lv_labelamount;
        string lv_labeltype;
        string lv_labelplayer;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_amount[0] = "100";
        lv_amount[1] = "1000";
        lv_amount[2] = "10000";
        lv_amount[3] = "100000";
        lv_amount[4] = "All";
        lv_resource[0] = "DOCSTR_Blue";
        lv_resource[1] = "Param/Value/A630050A";
        lv_resource[2] = "Param/Value/BC049606";
        lv_resource[3] = "DOCSTR_Red";
        lv_resource[4] = "Param/Value/13E9CBED";
        lv_labelamount = "Amount:";
        lv_labeltype = "Resource:";
        lv_labelplayer = "Player:";
        lv_x = 50;
        lv_y = 50;
        DialogCreate(550, 350, c_anchorRight, 0, 100, true);
        gv_trademenuimproveddialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_trademenuimproveddialogue, 150, 50, c_anchorTopLeft, 50, 30, StringExternal(lv_labelamount), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_trademenuimproveddialogue, 150, 50, c_anchorTopLeft, 200, 30, StringExternal(lv_labeltype), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_trademenuimproveddialogue, 150, 50, c_anchorTopLeft, 350, 30, StringExternal(lv_labelplayer), Color(100,100,100), false, 2.0);

        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemButton(gv_trademenuimproveddialogue, 120, 35, c_anchorTopLeft, lv_x, lv_y, StringExternal(""), StringToText(lv_amount[IntLoopCurrent()]), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            gv_TradeButtonAmount[IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 45;
        }
        IntLoopEnd();

        lv_x += 150;
        lv_y = 50;

        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemButton(gv_trademenuimproveddialogue, 120, 35, c_anchorTopLeft, lv_x, lv_y, StringExternal(""), StringExternal(lv_resource[IntLoopCurrent()]), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
            gv_TradeButtonResource[IntLoopCurrent()] = DialogControlLastCreated();
            lv_y += 45;
        }

        lv_x += 150;
        lv_y = 50;

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                libNtve_gf_CreateDialogItemButton(gv_trademenuimproveddialogue, 150, 35, c_anchorTopLeft, lv_x, lv_y, StringExternal(""), TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
                gv_TradeButtonPlayer[PlayerGroupLoopCurrent()-1] = DialogControlLastCreated();
                gv_TradePlayer[PlayerGroupLoopCurrent()-1] = PlayerGroupLoopCurrent();
                lv_y += 45;
            }
        }
        PlayerGroupLoopEnd();

        libNtve_gf_CreateDialogItemButton(gv_trademenuimproveddialogue, 80, 40, c_anchorBottomLeft, 25, 25, StringExternal(""), StringExternal("Param/Value/377DA591"), "");
        gv_closetrade = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_trademenuimproveddialogue, 100, 50, c_anchorBottom, 0, 30, StringExternal(""), StringToText("Send"), "");
        gv_TradeButtonSend = DialogControlLastCreated();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_TradeMenuCreateImproved_Init () {
        gt_TradeMenuCreateImproved = TriggerCreate("gt_TradeMenuCreateImproved_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Trade Menu Click (Improved)
    //--------------------------------------------------------------------------------------------------
    bool gt_TradeMenuImprovedClick_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int[4] lv_totalres;
        text lv_allresmessage;
        text[4] lv_textrestype;
        color lv_whitecolor;

        // Actions
        if (!runActions) {
            return true;
        }

        if ((EventDialogControl() == gv_closetrade)) {
            DialogSetVisible(gv_trademenuimproveddialogue, PlayerGroupSingle(EventPlayer()), false);
            gv_OpenedTrade[EventPlayer()] = false;
        }
        lv_textrestype[0] = TextWithColor(StringToText("Blue minerals"), Color(0.0, 255.0, 255.0));
        lv_textrestype[1] = TextWithColor(StringToText("Vespene"), Color(0.0, 255.0, 0.0));
        lv_textrestype[2] = TextWithColor(StringToText("Plasma"), Color(255.0, 0.0, 255.0));
        lv_textrestype[3] = TextWithColor(StringToText("Red crystals"), Color(255.0, 0.0, 0.0));
        lv_whitecolor = Color(255.0, 255.0, 255.0);
        if ((EventDialogControl() == gv_TradeButtonAmount[0]) || (EventDialogControl() == gv_TradeButtonAmount[1]) || (EventDialogControl() == gv_TradeButtonAmount[2]) || (EventDialogControl() == gv_TradeButtonAmount[3]) || (EventDialogControl() == gv_TradeButtonAmount[4])) {
            if (EventDialogControl() == gv_TradeButtonAmount[0]) {
                gv_TradeAmountChoice[EventPlayer()-1] = 100;
            }
            if (EventDialogControl() == gv_TradeButtonAmount[1]) {
                gv_TradeAmountChoice[EventPlayer()-1] = 1000;
            }
            if (EventDialogControl() == gv_TradeButtonAmount[2]) {
                gv_TradeAmountChoice[EventPlayer()-1] = 10000;
            }
            if (EventDialogControl() == gv_TradeButtonAmount[3]) {
                gv_TradeAmountChoice[EventPlayer()-1] = 100000;
            }
            if (EventDialogControl() == gv_TradeButtonAmount[4]) {
                gv_TradeAmountChoice[EventPlayer()-1] = 999999999;
            }
            IntLoopBegin(0, 4);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if (EventDialogControl() == gv_TradeButtonAmount[IntLoopCurrent()]) {
                    DialogControlFadeTransparency(gv_TradeButtonAmount[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                }
                else {
                    DialogControlFadeTransparency(gv_TradeButtonAmount[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
            IntLoopEnd();
        }

        if ((EventDialogControl() == gv_TradeButtonResource[0]) || (EventDialogControl() == gv_TradeButtonResource[1]) || (EventDialogControl() == gv_TradeButtonResource[2]) || (EventDialogControl() == gv_TradeButtonResource[3]) || (EventDialogControl() == gv_TradeButtonResource[4])) {
            IntLoopBegin(0, 4);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if (EventDialogControl() == gv_TradeButtonResource[IntLoopCurrent()]) {
                    DialogControlFadeTransparency(gv_TradeButtonResource[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                    gv_TradeSendResourceType[EventPlayer()-1][IntLoopCurrent()] = true;
                }
                else {
                    DialogControlFadeTransparency(gv_TradeButtonResource[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                    gv_TradeSendResourceType[EventPlayer()-1][IntLoopCurrent()] = false;
                }
            }
            IntLoopEnd();
            if ((EventDialogControl() == gv_TradeButtonResource[4])) {
                gv_TradeSendResourceType[EventPlayer()-1][0] = true;
                gv_TradeSendResourceType[EventPlayer()-1][1] = true;
                gv_TradeSendResourceType[EventPlayer()-1][2] = true;
                gv_TradeSendResourceType[EventPlayer()-1][3] = true;
            }
        }

        if ((EventDialogControl() == gv_TradeButtonPlayer[0]) || (EventDialogControl() == gv_TradeButtonPlayer[1]) || (EventDialogControl() == gv_TradeButtonPlayer[2]) || (EventDialogControl() == gv_TradeButtonPlayer[3]) || (EventDialogControl() == gv_TradeButtonPlayer[4]) || (EventDialogControl() == gv_TradeButtonPlayer[5])) {
            IntLoopBegin(0, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if (EventDialogControl() == gv_TradeButtonPlayer[IntLoopCurrent()]) {
                    DialogControlFadeTransparency(gv_TradeButtonPlayer[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 0.0);
                    gv_TradePlayerChoice[EventPlayer()-1] = gv_TradePlayer[IntLoopCurrent()];
                }
                else {
                    DialogControlFadeTransparency(gv_TradeButtonPlayer[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), 0.0, 80.0);
                }
            }
            IntLoopEnd();
        }

        if ((EventDialogControl() == gv_TradeButtonSend)) {
            // Debug Errors at first (leavers, not enough resources, not all filters specified)

            if (gv_TradePlayerChoice[EventPlayer()-1] == EventPlayer()) {
                UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaError, TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (TextWithColor(StringToText(" has decided to send some resources to himself. Nice try"), lv_whitecolor)));
                return false;
            }

            if (gv_TradeAmountChoice[EventPlayer()-1] == 0) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringToText("Error: Amount of Resources is not specified"));
                return false;
            }
            if (!((gv_TradeSendResourceType[EventPlayer()-1][0] == true) || (gv_TradeSendResourceType[EventPlayer()-1][1] == true) || (gv_TradeSendResourceType[EventPlayer()-1][2] == true) || (gv_TradeSendResourceType[EventPlayer()-1][3] == true))) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor(StringToText("Error: Type of Resource is not specified"), lv_whitecolor));
                return false;
            }
            if (gv_TradePlayerChoice[EventPlayer()-1] == 0) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor(StringToText("Error: Player is not specified"), lv_whitecolor));
                return false;
            }
            if ((PlayerStatus(gv_TradePlayerChoice[EventPlayer()-1]) != c_playerStatusActive) || (PlayerType(gv_TradePlayerChoice[EventPlayer()-1]) != c_playerTypeUser)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor(StringToText("Error: This player has left the game"), lv_whitecolor));
                return false;
            }
            //

            IntLoopBegin(0, 3);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if (gv_TradeSendResourceType[EventPlayer()-1][IntLoopCurrent()] == true) {
                    lv_totalres[IntLoopCurrent()] = PlayerGetPropertyInt(EventPlayer(), IntLoopCurrent());
                    if ((lv_totalres[IntLoopCurrent()] < gv_TradeAmountChoice[EventPlayer()-1])) {
                        PlayerModifyPropertyInt(EventPlayer(), IntLoopCurrent(), c_playerPropOperSetTo, 0);
                    }
                    else {
                        PlayerModifyPropertyInt(EventPlayer(), IntLoopCurrent(), c_playerPropOperSubtract, gv_TradeAmountChoice[EventPlayer()-1]);
                    }
                    PlayerModifyPropertyInt(gv_TradePlayerChoice[EventPlayer()-1], IntLoopCurrent(), c_playerPropOperAdd, MinI(lv_totalres[IntLoopCurrent()], gv_TradeAmountChoice[EventPlayer()-1]));
                }
            }
            IntLoopEnd();

            lv_allresmessage = TextWithColor(StringToText("( "), lv_whitecolor) + TextWithColor(IntToText(MinI(lv_totalres[0], gv_TradeAmountChoice[EventPlayer()-1])), lv_whitecolor) + StringToText(" ") + TextWithColor(StringToText("B"), Color(0.0, 255.0, 255.0)) + TextWithColor(StringToText(", "), lv_whitecolor) + TextWithColor(IntToText(MinI(lv_totalres[1], gv_TradeAmountChoice[EventPlayer()-1])), lv_whitecolor) + StringToText(" ") + TextWithColor(StringToText("G"), Color(0.0, 255.0, 0.0)) + TextWithColor(StringToText(", "), lv_whitecolor) + TextWithColor(IntToText(MinI(lv_totalres[2], gv_TradeAmountChoice[EventPlayer()-1])), lv_whitecolor) + StringToText(" ") + TextWithColor(StringToText("P"), Color(255.0, 0.0, 255.0)) + TextWithColor(StringToText(", "), lv_whitecolor) + TextWithColor(IntToText(MinI(lv_totalres[3], gv_TradeAmountChoice[EventPlayer()-1])), lv_whitecolor) + StringToText(" ") + TextWithColor(StringToText("R"), Color(255.0, 0.0, 0.0)) + TextWithColor(StringToText(" )"), lv_whitecolor);
            
            if ((gv_TradeSendResourceType[EventPlayer()-1][0] == true) && (gv_TradeSendResourceType[EventPlayer()-1][1] == true) && (gv_TradeSendResourceType[EventPlayer()-1][2] == true) && (gv_TradeSendResourceType[EventPlayer()-1][3] == true)) {
                if (!((lv_totalres[0] == 0) && (lv_totalres[1] == 0) && (lv_totalres[2] == 0) && (lv_totalres[3] == 0))) {
                    if (gv_TradeAmountChoice[EventPlayer()-1] > 100001) {
                        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaError, TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringToText(" has sent "), lv_whitecolor) + TextWithColor(StringToText("all"), Color(255.0, 255.0, 0.0)) + TextWithColor(StringToText(" to "), lv_whitecolor) + TextWithColor(PlayerName(gv_TradePlayerChoice[EventPlayer()-1]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_TradePlayerChoice[EventPlayer()-1], false))) + StringExternal("Param/Value/DEA3F9C0") + lv_allresmessage);
                        return true;
                    }
                    UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaError, TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringToText(" has sent "), lv_whitecolor) + IntToText(gv_TradeAmountChoice[EventPlayer()-1]) + StringToText(" of ") + TextWithColor(StringToText("every resource"), Color(255.0, 255.0, 0.0)) + TextWithColor(StringToText(" to "), lv_whitecolor) + TextWithColor(PlayerName(gv_TradePlayerChoice[EventPlayer()-1]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_TradePlayerChoice[EventPlayer()-1], false))) + StringExternal("Param/Value/DEA3F9C0") + lv_allresmessage);
                    return true;
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor(StringToText("Error: Zero resources"), lv_whitecolor));
                    return false;
                }
            }
            else {
                IntLoopBegin(0, 3);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if ((gv_TradeSendResourceType[EventPlayer()-1][IntLoopCurrent()] == true) && (lv_totalres[IntLoopCurrent()] > 0)) {
                        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaError, TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringToText(" has sent "), lv_whitecolor) + TextWithColor(IntToText(MinI(lv_totalres[IntLoopCurrent()], gv_TradeAmountChoice[EventPlayer()-1])), lv_whitecolor) + StringToText(" ") + (lv_textrestype[IntLoopCurrent()]) + TextWithColor(StringToText(" to "), lv_whitecolor) + TextWithColor(PlayerName(gv_TradePlayerChoice[EventPlayer()-1]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_TradePlayerChoice[EventPlayer()-1], false))));   
                    }
                }
                IntLoopEnd();
            }
            
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_TradeMenuImprovedClick_Init () {
        gt_TradeMenuImprovedClick = TriggerCreate("gt_TradeMenuImprovedClick_Func");
        TriggerAddEventDialogControl(gt_TradeMenuImprovedClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: World Market Menu Create
    //--------------------------------------------------------------------------------------------------
    bool gt_WorldMarketMenuCreate_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(800, 420, c_anchorRight, 0, 0, true);
        gv_worldmarketdialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorBottomLeft, 180, 20, StringExternal("Param/Value/305A39A7"), StringExternal("Param/Value/E6A7AA53"), "");
        gv_sEE = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorBottomLeft, 20, 20, StringExternal("Param/Value/E723D74F"), StringExternal("Param/Value/377DA591"), "");
        gv_oK = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 30, StringExternal("Param/Value/5A12FFAD"), Color(100,100,100), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 200, 30, StringExternal("Param/Value/8E563399"), Color(28*100/255,167*100/255,234*100/255), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 350, 30, StringExternal("Param/Value/F9DB67B5"), Color(22*100/255,128*100/255,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 500, 30, StringExternal("Param/Value/E06F1A9C"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 650, 30, StringExternal("Param/Value/8F666669"), Color(229*100/255,91*100/255,176*100/255), false, 2.0);
        if ((PlayerStatus(1) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 65, PlayerName(1), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 50, StringExternal("Param/Value/5CB6CBF2"), StringExternal("Param/Value/C3EFA825"), "");
            gv_bLUE[1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 50, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/CAE56DA8"), "");
            gv_vESPEN[1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 50, StringExternal("Param/Value/DEDCD551"), StringExternal("Param/Value/3440B703"), "");
            gv_rED[1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 50, StringExternal("Param/Value/56FAC811"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[1] = DialogControlLastCreated();
        }

        if ((PlayerStatus(2) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 115, PlayerName(2), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 100, StringExternal("Param/Value/653168F9"), StringExternal("Param/Value/17588A81"), "");
            gv_bLUE[2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 100, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/43072683"), "");
            gv_vESPEN[2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 100, StringExternal("Param/Value/1E5F772D"), StringExternal("Param/Value/A5214E5D"), "");
            gv_rED[2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 100, StringExternal("Param/Value/DDA060DA"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[2] = DialogControlLastCreated();
        }

        if ((PlayerStatus(3) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 165, PlayerName(3), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 150, StringExternal("Param/Value/DA8A3445"), StringExternal("Param/Value/21F90B62"), "");
            gv_bLUE[3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 150, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/F95A2B9C"), "");
            gv_vESPEN[3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 150, StringExternal("Param/Value/E1C53545"), StringExternal("Param/Value/6E8298C0"), "");
            gv_rED[3] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 150, StringExternal("Param/Value/16F41570"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[3] = DialogControlLastCreated();
        }

        if ((PlayerStatus(4) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 215, PlayerName(4), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 200, StringExternal("Param/Value/C99E74CD"), StringExternal("Param/Value/C994A45B"), "");
            gv_bLUE[4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 200, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/E6DD56CC"), "");
            gv_vESPEN[4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 200, StringExternal("Param/Value/E0EDB276"), StringExternal("Param/Value/12F3717A"), "");
            gv_rED[4] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 200, StringExternal("Param/Value/12675FFA"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[4] = DialogControlLastCreated();
        }

        if ((PlayerStatus(5) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 265, PlayerName(5), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 250, StringExternal("Param/Value/5031F074"), StringExternal("Param/Value/9CD0383A"), "");
            gv_bLUE[5] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 250, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/46215E2E"), "");
            gv_vESPEN[5] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 250, StringExternal("Param/Value/FA545E71"), StringExternal("Param/Value/53F4511A"), "");
            gv_rED[5] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 250, StringExternal("Param/Value/59CB9B91"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[5] = DialogControlLastCreated();
        }

        if ((PlayerStatus(6) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemLabel(gv_worldmarketdialogue, 100, 50, c_anchorTopLeft, 50, 315, PlayerName(6), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 150, 300, StringExternal("Param/Value/625B0991"), StringExternal("Param/Value/0A726890"), "");
            gv_bLUE[6] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 300, 300, StringExternal("Param/Value/105721C8"), StringExternal("Param/Value/894319D4"), "");
            gv_vESPEN[6] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 450, 300, StringExternal("Param/Value/E886AACF"), StringExternal("Param/Value/92AF344C"), "");
            gv_rED[6] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_worldmarketdialogue, 150, 50, c_anchorTopLeft, 600, 300, StringExternal("Param/Value/4102EF02"), StringExternal("Param/Value/1715A24C"), "");
            gv_pLASMA[6] = DialogControlLastCreated();
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_WorldMarketMenuCreate_Init () {
        gt_WorldMarketMenuCreate = TriggerCreate("gt_WorldMarketMenuCreate_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: WorldMarketBuy/Sell
    //--------------------------------------------------------------------------------------------------
    bool gt_WorldMarketBuySell_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_mineralblue;
        int lv_mineralvespene;
        int lv_mineralred;
        int lv_mineralplasma;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        if ((EventDialogControl() == gv_sEE)) {
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals)) + (StringExternal("Param/Value/278AC438") + (IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene)) + (StringExternal("Param/Value/121F61B5") + (IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine)) + (StringExternal("Param/Value/D9CE32C8") + (IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom)) + (StringExternal("Param/Value/097BDC3B") + PlayerName(PlayerGroupLoopCurrent()))))))))));
            }
            PlayerGroupLoopEnd();
        }

        if ((EventDialogControl() == gv_oK)) {
            DialogSetVisible(gv_worldmarketdialogue, PlayerGroupSingle(EventPlayer()), false);
            gv_variableTrade[EventPlayer()] = 1;
            DialogSetVisible(gv_worldmarketdialogue, PlayerGroupSingle(EventPlayer()), false);
        }

        if ((EventDialogControl() == gv_bLUE[1]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/006485C2") + (PlayerName(1) + StringExternal("Param/Value/E2D9B826")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5874DF32") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_bLUE[2]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/605323AB") + (PlayerName(2) + StringExternal("Param/Value/6954453A")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/E4279E3F") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_bLUE[3]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/2BC33A6C") + (PlayerName(3) + StringExternal("Param/Value/88CCA6EE")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/C98726A1") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(3, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_bLUE[4]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/215B9B93") + (PlayerName(4) + StringExternal("Param/Value/68C37A15")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0D85E794") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(4, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_bLUE[5]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/C19E0668") + (PlayerName(5) + StringExternal("Param/Value/D3D3FC23")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/712C056C") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_bLUE[6]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1)) {
            lv_mineralblue = PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/D8EE1511") + (PlayerName(6) + StringExternal("Param/Value/658D8925")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/3FE33442") + IntToText(lv_mineralblue)));
            PlayerModifyPropertyInt(6, c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
            lv_mineralblue = 0;
        }

        if ((EventDialogControl() == gv_vESPEN[1]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/A3DF5723") + (PlayerName(1) + StringExternal("Param/Value/1D63D04F")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }

        if ((EventDialogControl() == gv_vESPEN[2]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/0423B8CD") + (PlayerName(2) + StringExternal("Param/Value/4B19834B")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(2, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }

        if ((EventDialogControl() == gv_vESPEN[3]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/864C2341") + (PlayerName(3) + StringExternal("Param/Value/AC86C9EC")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(3, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }

        if ((EventDialogControl() == gv_vESPEN[4]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/A670CD51") + (PlayerName(4) + StringExternal("Param/Value/AECFF6FE")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(4, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }

        if ((EventDialogControl() == gv_vESPEN[5]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/BFECC26C") + (PlayerName(5) + StringExternal("Param/Value/B4E5D62D")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(5, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }
        else {
        }
        if ((EventDialogControl() == gv_vESPEN[6]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 1)) {
            lv_mineralvespene = PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/1BB53766") + (PlayerName(6) + StringExternal("Param/Value/C5B3FA64")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/50140167") + IntToText(lv_mineralvespene)));
            PlayerModifyPropertyInt(6, c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
            lv_mineralvespene = 0;
        }

        if ((EventDialogControl() == gv_rED[1]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/E33300B3") + (PlayerName(1) + StringExternal("Param/Value/F059FBE0")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/2CD5B755") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(1, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_rED[2]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/22E51867") + (PlayerName(2) + StringExternal("Param/Value/FF7282C1")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/F747AD9B") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(2, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_rED[3]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/C91EDFEC") + (PlayerName(3) + StringExternal("Param/Value/5011F0E6")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/E16B9A44") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(3, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_rED[4]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/77D60052") + (PlayerName(4) + StringExternal("Param/Value/85A25250")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D49C7734") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(4, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_rED[5]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/DDF4D030") + (PlayerName(5) + StringExternal("Param/Value/9C892C6E")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A1C889F5") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(5, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_rED[6]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= 1)) {
            lv_mineralred = PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/9159F3B7") + (PlayerName(6) + StringExternal("Param/Value/92D8AB5C")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/0F0A95D7") + IntToText(lv_mineralred)));
            PlayerModifyPropertyInt(6, c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
            lv_mineralred = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[1]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/5C508532") + (PlayerName(1) + StringExternal("Param/Value/06A65328")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/DD69500C") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(1, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[2]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/11438AFC") + (PlayerName(2) + StringExternal("Param/Value/101D56A7")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/5A4BB16D") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(2, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[3]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/B0176ADC") + (PlayerName(3) + StringExternal("Param/Value/E3A76822")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D42400A8") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(3, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[4]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/CF6A7DCE") + (PlayerName(4) + StringExternal("Param/Value/C31C38DD")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/749C1B3F") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(4, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[5]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/A09FFB70") + (PlayerName(5) + StringExternal("Param/Value/06A65328")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/331E5590") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(5, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        if ((EventDialogControl() == gv_pLASMA[6]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= 1)) {
            lv_mineralplasma = PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/FBCC5EDA") + (PlayerName(6) + StringExternal("Param/Value/F3981D8D")))));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8AB52105") + IntToText(lv_mineralplasma)));
            PlayerModifyPropertyInt(6, c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
            lv_mineralplasma = 0;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_WorldMarketBuySell_Init () {
        gt_WorldMarketBuySell = TriggerCreate("gt_WorldMarketBuySell_Func");
        TriggerAddEventDialogControl(gt_WorldMarketBuySell, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -kekw
    //--------------------------------------------------------------------------------------------------
    bool gt_emotekekw_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Kekw"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotekekw_Init () {
        gt_emotekekw = TriggerCreate("gt_emotekekw_Func");
        TriggerAddEventChatMessage(gt_emotekekw, c_playerAny, "-kekw", true);
        TriggerAddEventChatMessage(gt_emotekekw, c_playerAny, "kekw", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -bonk
    //--------------------------------------------------------------------------------------------------
    bool gt_emotebonk_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Bonk"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotebonk_Init () {
        gt_emotebonk = TriggerCreate("gt_emotebonk_Func");
        TriggerAddEventChatMessage(gt_emotebonk, c_playerAny, "-bonk", true);
        TriggerAddEventChatMessage(gt_emotebonk, c_playerAny, "bonk", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -crycat
    //--------------------------------------------------------------------------------------------------
    bool gt_emotecrycat_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Crycat"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotecrycat_Init () {
        gt_emotecrycat = TriggerCreate("gt_emotecrycat_Func");
        TriggerAddEventChatMessage(gt_emotecrycat, c_playerAny, "-crycat", true);
        TriggerAddEventChatMessage(gt_emotecrycat, c_playerAny, "crycat", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -doge
    //--------------------------------------------------------------------------------------------------
    bool gt_emotedoge_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Doge"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotedoge_Init () {
        gt_emotedoge = TriggerCreate("gt_emotedoge_Func");
        TriggerAddEventChatMessage(gt_emotedoge, c_playerAny, "-doge", true);
        TriggerAddEventChatMessage(gt_emotedoge, c_playerAny, "doge", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -pepecool
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepepecool_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepecool"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepepecool_Init () {
        gt_emotepepecool = TriggerCreate("gt_emotepepecool_Func");
        TriggerAddEventChatMessage(gt_emotepepecool, c_playerAny, "-pepecool", true);
        TriggerAddEventChatMessage(gt_emotepepecool, c_playerAny, "pepecool", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -monkas
    //--------------------------------------------------------------------------------------------------
    bool gt_emotemonkas_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Monkas"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotemonkas_Init () {
        gt_emotemonkas = TriggerCreate("gt_emotemonkas_Func");
        TriggerAddEventChatMessage(gt_emotemonkas, c_playerAny, "-monkas", true);
        TriggerAddEventChatMessage(gt_emotemonkas, c_playerAny, "monkas", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -dontyell
    //--------------------------------------------------------------------------------------------------
    bool gt_emotedontyell_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Dontyell"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotedontyell_Init () {
        gt_emotedontyell = TriggerCreate("gt_emotedontyell_Func");
        TriggerAddEventChatMessage(gt_emotedontyell, c_playerAny, "-dontyell", true);
        TriggerAddEventChatMessage(gt_emotedontyell, c_playerAny, "dontyell", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -dogegun
    //--------------------------------------------------------------------------------------------------
    bool gt_emotedogegun_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Dogegun"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotedogegun_Init () {
        gt_emotedogegun = TriggerCreate("gt_emotedogegun_Func");
        TriggerAddEventChatMessage(gt_emotedogegun, c_playerAny, "-dogegun", true);
        TriggerAddEventChatMessage(gt_emotedogegun, c_playerAny, "dogegun", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -gigachad (chad)
    //--------------------------------------------------------------------------------------------------
    bool gt_emotechad_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Gigachad"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotechad_Init () {
        gt_emotechad = TriggerCreate("gt_emotechad_Func");
        TriggerAddEventChatMessage(gt_emotechad, c_playerAny, "-gigachad", true);
        TriggerAddEventChatMessage(gt_emotechad, c_playerAny, "gigachad", true);
        TriggerAddEventChatMessage(gt_emotechad, c_playerAny, "-chad", true);
        TriggerAddEventChatMessage(gt_emotechad, c_playerAny, "chad", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -pepeheart
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepepeheart_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepeheart"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepepeheart_Init () {
        gt_emotepepeheart = TriggerCreate("gt_emotepepeheart_Func");
        TriggerAddEventChatMessage(gt_emotepepeheart, c_playerAny, "-pepeheart", true);
        TriggerAddEventChatMessage(gt_emotepepeheart, c_playerAny, "pepeheart", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -pepenotes
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepepenotes_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepenotes"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepepenotes_Init () {
        gt_emotepepenotes = TriggerCreate("gt_emotepepenotes_Func");
        TriggerAddEventChatMessage(gt_emotepepenotes, c_playerAny, "-pepenotes", true);
        TriggerAddEventChatMessage(gt_emotepepenotes, c_playerAny, "pepenotes", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -pepekms
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepepekms_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepekms"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepepekms_Init () {
        gt_emotepepekms = TriggerCreate("gt_emotepepekms_Func");
        TriggerAddEventChatMessage(gt_emotepepekms, c_playerAny, "-pepekms", true);
        TriggerAddEventChatMessage(gt_emotepepekms, c_playerAny, "pepekms", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -peperee
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepeperee_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepereeee"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepeperee_Init () {
        gt_emotepeperee = TriggerCreate("gt_emotepeperee_Func");
        TriggerAddEventChatMessage(gt_emotepeperee, c_playerAny, "-peperee", true);
        TriggerAddEventChatMessage(gt_emotepeperee, c_playerAny, "peperee", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Emote -pepesuit
    //--------------------------------------------------------------------------------------------------
    bool gt_emotepepesuit_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isEnabledEmote[EventPlayer()]) {
            TimerStart(gv_EmoteCooldownTimer[EventPlayer()], gv_EmoteCooldownDuration, false, c_timeGame);
            gv_isEnabledEmote[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("DOCSTR_Emote_Pepesuit"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Wait ") + FixedToText(TimerGetRemaining(gv_EmoteCooldownTimer[EventPlayer()]), 0) + StringToText(" seconds to use emote again"));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_emotepepesuit_Init () {
        gt_emotepepesuit = TriggerCreate("gt_emotepepesuit_Func");
        TriggerAddEventChatMessage(gt_emotepepesuit, c_playerAny, "-pepesuit", true);
        TriggerAddEventChatMessage(gt_emotepepesuit, c_playerAny, "pepesuit", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Enable Emote Again
    //--------------------------------------------------------------------------------------------------
    bool gt_EnableEmoteAgain_Func (bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }

        for (init_i = 0; init_i <= 7; init_i += 1) {
            if (EventTimer() == gv_EmoteCooldownTimer[init_i]) {
                gv_isEnabledEmote[init_i] = true;
                break;
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EnableEmoteAgain_Init () {
        gt_EnableEmoteAgain = TriggerCreate("gt_EnableEmoteAgain_Func");
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[0]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[1]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[2]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[3]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[4]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[5]);
        TriggerAddEventTimer(gt_EnableEmoteAgain, gv_EmoteCooldownTimer[6]);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -Share all
    //--------------------------------------------------------------------------------------------------
    bool gt_Shareall_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                return false;
            }
            if ((gv_GameMode == "Default" || gv_GameMode == "Versus") && (gv_enabledshare == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/486B8021") + TextWithColor(IntToText(gv_enabledshareDay), Color(255.0, 128.0, 128.0)));
                return false;
            }
            // if ((gv_GameMode == "Builder")) {
            //     UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
            //     return false;
            // }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }

        if ((gv_dayNb >= 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/34C24E71")));
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals)) + (StringExternal("Param/Value/278AC438") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene)) + (StringExternal("Param/Value/121F61B5") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine)) + (StringExternal("Param/Value/ADD96F3E") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom)) + (StringExternal("Param/Value/DDB57BA5") + StringExternal("Param/Value/AD9C30DF"))))))))));
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, PlayerGroupLoopCurrent(), true);
            }
            PlayerGroupLoopEnd();
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B29A6A29"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Shareall_Init () {
        gt_Shareall = TriggerCreate("gt_Shareall_Func");
        TriggerAddEventChatMessage(gt_Shareall, c_playerAny, "-shared", true);
        TriggerAddEventChatMessage(gt_Shareall, c_playerAny, "-share all", true);
        TriggerAddEventChatMessage(gt_Shareall, c_playerAny, "-share", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -Share 1
    //--------------------------------------------------------------------------------------------------
    bool gt_Share1_Func (bool testConds, bool runActions) {
        int lv_player;
        // Conditions
        if (testConds) {
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                return false;
            }
            if ((gv_GameMode == "Default" || gv_GameMode == "Versus") && (gv_enabledshare == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/486B8021") + TextWithColor(IntToText(gv_enabledshareDay), Color(255.0, 128.0, 128.0)));
                return false;
            }
            // if ((gv_GameMode == "Builder")) {
            //     UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
            //     return false;
            // }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_player = StringToInt(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))));
        

        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }

        if ((lv_player > gv_nbJoueurs) || (lv_player == EventPlayer()) || (lv_player > PlayerGroupCount(gv_probeGroupPlayer))) {
            return false;
        }

        if ((gv_dayNb >= 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/9DC4DCCD") + PlayerName(PlayerGroupPlayer(gv_probeGroupPlayer, lv_player)))));
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("Param/Value/23CBBEDB"));
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals)) + (StringExternal("Param/Value/278AC438") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene)) + (StringExternal("Param/Value/121F61B5") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine)) + (StringExternal("Param/Value/5FDBEB23") + (IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom)) + (StringExternal("Param/Value/1C11BF07") + StringExternal("Param/Value/995926D9"))))))))));
            PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, PlayerGroupPlayer(gv_probeGroupPlayer, lv_player), true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/60E6CCC5"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Share1_Init () {
        gt_Share1 = TriggerCreate("gt_Share1_Func");
        TriggerAddEventChatMessage(gt_Share1, c_playerAny, "-share ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -Share off
    //--------------------------------------------------------------------------------------------------
    bool gt_Shareoff_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                return false;
            }
            if (!((gv_dayNb >= 2))) {
                return false;
            }
            if (((gv_GameMode == "Default") || gv_GameMode == "Versus") && (gv_enabledshare == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B2323B47"));
                return false;
            }
            // if ((gv_GameMode == "Builder")) {
            //     UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
            //     return false;
            // }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }

        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/ADCEA8BD")));
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, PlayerGroupLoopCurrent(), false);
            PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, EventPlayer(), true);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Shareoff_Init () {
        gt_Shareoff = TriggerCreate("gt_Shareoff_Func");
        TriggerAddEventChatMessage(gt_Shareoff, c_playerAny, "-share off", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -control
    //--------------------------------------------------------------------------------------------------
    bool gt_control_Func (bool testConds, bool runActions) {
        if (testConds) {
            if (!(gv_GameMode == "Classic")) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
                return false;
            }
        }
        // Actions
        if (!runActions) {
            return true;
        }

        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }

        if ((gv_dayNb >= 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/3201DAF1")));
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerSetAlliance(EventPlayer(), c_allianceIdControl, PlayerGroupLoopCurrent(), true);
            }
            PlayerGroupLoopEnd();
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2EEE84A2"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_control_Init () {
        gt_control = TriggerCreate("gt_control_Func");
        TriggerAddEventChatMessage(gt_control, c_playerAny, "-control", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -control off
    //--------------------------------------------------------------------------------------------------
    bool gt_controloff_Func (bool testConds, bool runActions) {
        if (testConds) {
            if (!(gv_GameMode == "Classic")) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }

        if ((gv_dayNb >= 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/299D6471")));
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((PlayerGroupLoopCurrent() != EventPlayer())) {
                    PlayerSetAlliance(EventPlayer(), c_allianceIdControl, PlayerGroupLoopCurrent(), false);
                }
            }
            PlayerGroupLoopEnd();
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2EEE84A2"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_controloff_Init () {
        gt_controloff = TriggerCreate("gt_controloff_Func");
        TriggerAddEventChatMessage(gt_controloff, c_playerAny, "-control off", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -Builder 1
    //--------------------------------------------------------------------------------------------------
    bool gt_Builder1_Func (bool testConds, bool runActions) {
        int lv_player;
        string lv_playertext;
        string lv_text;

        // Conditions
        if (testConds) {
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                return false;
            }

            if (((gv_GameMode == "Default") || gv_GameMode == "Versus") && (gv_enabledshare == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/486B8021") + TextWithColor(IntToText(gv_enabledshareDay), Color(255.0, 128.0, 128.0)));
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_playertext = "Player ";
        lv_text = " is not a Player or has left the game. Use -playerlist (-pl) command to see proper numbers of active players";
        lv_player = StringToInt(StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false))));
        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {
            return false;
        }
        if ((lv_player > PlayerGroupCount(gv_probeGroupPlayer)) || (lv_player == EventPlayer()) || (lv_player < 1)) {
            return false;
        }
        if (((PlayerStatus(PlayerGroupPlayer(gv_probeGroupPlayer, lv_player)) != c_playerStatusActive) || (PlayerType(PlayerGroupPlayer(gv_probeGroupPlayer, lv_player)) != c_playerTypeUser)) && (gv_dayNb >= 2)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringToText(lv_playertext) + IntToText(PlayerGroupPlayer(gv_probeGroupPlayer, lv_player)) + StringToText(lv_text)));
            return false;
        }
        if ((gv_dayNb >= 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/A83E3B12") + PlayerName(PlayerGroupPlayer(gv_probeGroupPlayer, lv_player)))));
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("Param/Value/7B5C38F9"));
            PlayerSetAlliance(EventPlayer(), c_allianceIdControl, PlayerGroupPlayer(gv_probeGroupPlayer, lv_player), true);
            PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, PlayerGroupPlayer(gv_probeGroupPlayer, lv_player), true);
            gv_builder1[EventPlayer()] = PlayerGroupPlayer(gv_probeGroupPlayer, lv_player);
            TriggerEnable(gt_Builder1each05sec, true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A00809E3"));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Builder1_Init () {
        gt_Builder1 = TriggerCreate("gt_Builder1_Func");
        TriggerAddEventChatMessage(gt_Builder1, c_playerAny, "-builder ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -Builder off
    //--------------------------------------------------------------------------------------------------
    bool gt_Builderoff_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                return false;
            }

            if (!((gv_dayNb >= 2))) {
                return false;
            }
            if ((gv_GameMode == "Builder") || (gv_GameMode == "SandBox")) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1A42F343"));
                return false;
            }
            if (gv_GameMode == "Versus") {
                if (EventPlayer() == gv_theThingPlayer) {
                    return false;
                }
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/085C8AB7") + PlayerName((gv_builder1[EventPlayer()])))));
        gv_builder1[EventPlayer()] = 0;
        PlayerSetAlliance(EventPlayer(), c_allianceIdControl, (gv_builder1[EventPlayer()]), false);
        PlayerSetAlliance(EventPlayer(), c_allianceIdSpend, (gv_builder1[EventPlayer()]), false);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_builder1[PlayerGroupLoopCurrent()] != 0)) {
                lv_x = (lv_x + 1);
            }
        }
        PlayerGroupLoopEnd();
        if ((lv_x < 1)) {
            TriggerEnable(gt_Builder1each05sec, false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Builderoff_Init () {
        gt_Builderoff = TriggerCreate("gt_Builderoff_Func");
        TriggerAddEventChatMessage(gt_Builderoff, c_playerAny, "-builder off", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Builder 1 each 0.5 sec
    //--------------------------------------------------------------------------------------------------
    bool gt_Builder1each05sec_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_mineralblue;
        int lv_mineralvespene;
        int lv_mineralred;
        int lv_mineralplasma;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_builder1[PlayerGroupLoopCurrent()] == 1) || (gv_builder1[PlayerGroupLoopCurrent()] == 2) || (gv_builder1[PlayerGroupLoopCurrent()] == 3) || (gv_builder1[PlayerGroupLoopCurrent()] == 4) || (gv_builder1[PlayerGroupLoopCurrent()] == 5)) && (PlayerStatus(gv_builder1[PlayerGroupLoopCurrent()]) == c_playerStatusActive) && (PlayerType(gv_builder1[PlayerGroupLoopCurrent()]) == c_playerTypeUser)) {
                lv_mineralblue = PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt((gv_builder1[PlayerGroupLoopCurrent()]), c_playerPropMinerals, c_playerPropOperAdd, lv_mineralblue);
                lv_mineralblue = 0;
                lv_mineralvespene = PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt((gv_builder1[PlayerGroupLoopCurrent()]), c_playerPropVespene, c_playerPropOperAdd, lv_mineralvespene);
                lv_mineralvespene = 0;
                lv_mineralred = PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt((gv_builder1[PlayerGroupLoopCurrent()]), c_playerPropCustom, c_playerPropOperAdd, lv_mineralred);
                lv_mineralred = 0;
                lv_mineralplasma = PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt((gv_builder1[PlayerGroupLoopCurrent()]), c_playerPropTerrazine, c_playerPropOperAdd, lv_mineralplasma);
                lv_mineralplasma = 0;
            }
            else {
                gv_builder1[PlayerGroupLoopCurrent()] = 0;
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Builder1each05sec_Init () {
        gt_Builder1each05sec = TriggerCreate("gt_Builder1each05sec_Func");
        TriggerEnable(gt_Builder1each05sec, false);
        TriggerAddEventTimePeriodic(gt_Builder1each05sec, 0.5, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Solo mode -Duplicate
    //--------------------------------------------------------------------------------------------------
    bool gt_SolomodeDuplicate_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_z;
        int lv_verified;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerEnable(gt_SolomodeDuplicate, false);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_z = (lv_z + 1);
        }
        PlayerGroupLoopEnd();
        if ((lv_z == 1)) {
            if ((BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "NIGHTELITE") >= 35.0) && (BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "HEAL") == 21634.0)) {
                lv_verified = 1;
            }
        }
        if ((lv_verified == 1)) {
            if ((gv_GameMode == "Default") || gv_GameMode == "Versus") {
                if (!gv_isadmin[EventPlayer()]) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("The command is not available in this mode."));
                    return false;
                }
            }
            gv_damageBonus = (gv_damageBonus + 4);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Players", 5);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/C5276FAB")));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A973DA83"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, EventPlayer(), PointWithOffset(UnitGetPosition(gv_probe[EventPlayer()]), 0.0, -2.0));
            gv_probe[7] = UnitLastCreated();
            UnitBehaviorAddPlayer(UnitLastCreated(), gv_skins[gv_skinChoose[EventPlayer()]].lv_comportement, EventPlayer(), 1);
            UnitAbilityAdd(UnitLastCreated(), gv_skillChoose[EventPlayer()]);
            UnitBehaviorAddPlayer(UnitLastCreated(), gv_specialityChoose[EventPlayer()], EventPlayer(), 1);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_skins[gv_skinChoose[EventPlayer()]].lv_skin);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_colorChoose[EventPlayer()][2]);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_colorChoose[EventPlayer()][1]);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropXP, BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "EXPP"));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "NIVO"));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLevel, c_unitPropCurrent));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 50.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyMinerals, 1.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyCustom, 1.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyTerrazine, 1.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, 1.0);
            UnitControlGroupAddUnit(EventPlayer(), 2, UnitLastCreated());
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetShowStatusBar");
            UnitAbilityShow(UnitLastCreated(), "Releasinghiddenenergy", false);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/2A11D2E4")));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_SolomodeDuplicate_Init () {
        gt_SolomodeDuplicate = TriggerCreate("gt_SolomodeDuplicate_Func");
        TriggerEnable(gt_SolomodeDuplicate, false);
        TriggerAddEventChatMessage(gt_SolomodeDuplicate, c_playerAny, "-DUPLICATE", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Limit buildings
    //--------------------------------------------------------------------------------------------------
    bool gt_Limitbuildings_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_maxbuild;
        string lv_secondary;

        // Variable Initialization
        lv_maxbuild = 350;
        lv_secondary = " or else earthquake incoming!";
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= lv_maxbuild)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/463EDC8D") + StringToText(lv_secondary)));
            Wait(15.0, c_timeGame);
            if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterAir) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= lv_maxbuild)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/B409885B") + StringExternal("Param/Value/ACA53D91")));
                PlayerGroupLoopBegin(PlayerGroupActive());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                    VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
                    UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterInvulnerable - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - 44000.0));
                    }
                    UnitGroupLoopEnd();
                }
                PlayerGroupLoopEnd();
                libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionEntireMap());
                EnvironmentShow(c_environmentAll, false);
                Wait(4.0, c_timeGame);
                EnvironmentShow(c_environmentAll, true);
            }
        }
        else {
            EnvironmentShow(c_environmentAll, true);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Limitbuildings_Init () {
        gt_Limitbuildings = TriggerCreate("gt_Limitbuildings_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: win 1 Nydus tu??
    //--------------------------------------------------------------------------------------------------
    bool gt_win1NydustuC3A9_Func (bool testConds, bool runActions) {
        // Variable Declarations
        point lv_point;
        fixed lv_x;
        fixed lv_y;
        int lv_z;

        // Variable Initialization
        lv_point = Point(lv_x, lv_y);
        lv_x = 32.0;
        lv_y = 120.0;

        // Actions
        if (!runActions) {
            return true;
        }

        if (TriggerIsEnabled(gt_CustomSkin6Unlockment)) {
            TriggerExecute(gt_CustomSkin6Unlockment, true, false);
        }

        if ((gv_damageBonus >= 0)) {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 22);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ZergMeleeWeaponsLevel12", 5);
        }
        TriggerEnable(gt_capitainezergsfinal2635, false);
        TriggerEnable(gt_capitainezergs1225, false);
        TriggerEnable(gt_capitaineMutas1725, false);
        TriggerEnable(gt_airsquadron29, false);
        TriggerEnable(gt_ZergInvasion, false);
        TriggerEnable(gt_ZergInvasionImpossible, false);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
        if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
            if (gv_difficulty == "Elite") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/82AC48D9"));
            }
            if (gv_difficulty == "Nightmare") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8E207633"));
            }
            if (gv_difficulty == "Hell") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/04112710"));
            }
            if (gv_difficulty == "Normal") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/036508A9"));
            }
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_ImpossibleWin1"));
            }
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_lives[PlayerGroupLoopCurrent()] >= 1)) {
                gv_lives[PlayerGroupLoopCurrent()] = 1;
            }
            CameraPan(PlayerGroupLoopCurrent(), PointFromId(292), 2.0, -1, 10, true);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(1), 40.0, false);
            if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
                BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") + IntToFixed(gv_win1levels)));
                BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVEXP", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") * 1224.0));
                UnitSetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropLevel, BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO"));
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }
        }
        PlayerGroupLoopEnd();
        IntLoopBegin(1, 22);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 22);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 22);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, lv_point);
        }
        IntLoopEnd();
        Wait(3.0, c_timeGame);
        if (gv_variablevotemutators == 5) {
            DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), false);
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_openedskinsdialog[PlayerGroupLoopCurrent()]) {
                DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
        }
        PlayerGroupLoopEnd();
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaCinematic, StringExternal("Param/Value/2CB83F04"));
        DialogDestroy(gv_chronodialogue);
        BoardDestroy(gv_tableau);
        gv_tempsNuit = 524000.0;
        if ((gv_day == true)) {
            TriggerExecute(gt_SwitchTime, true, false);
        }
        else {
            TriggerExecute(gt_ZergBoss, true, false);
        }
        gv_temps = 524000;
        gv_day = false;
        TriggerEnable(gt_Temps, false);
        // gv_TempsEnabled = false;
        GameSetLighting("BelShirNight", 0.0);
        TimerStart(gv_chrono, gv_tempsNuit, true, c_timeGame);
        Wait(3.0, c_timeGame);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaCinematic, StringExternal("Param/Value/DE888F91"));
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
        SoundStopAllModelSounds();
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
            VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
        }
        PlayerGroupLoopEnd();
        Wait(3.0, c_timeGame);
        if (gv_variablevotemutators == 5) {
            DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), true);
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_openedskinsdialog[PlayerGroupLoopCurrent()]) {
                DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
        }
        PlayerGroupLoopEnd();
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsB1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackSetDelay(PlayerGroupAll(), c_soundtrackCategoryMusic, 20.0);
        SoundPlay(SoundLink("Overseer_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overmind", 0, 15, PointFromId(292));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 524000.0);
        gv_overmind = UnitLastCreated();
        gv_wallbar = gv_overmind;
        TriggerEnable(gt_wallbarfocus, false);
        TriggerEnable(gt_actualisewallbar, true);
        TriggerEnable(gt_InBase, false);
        TriggerEnable(gt_InBase2, false);
        TriggerEnable(gt_InBaseRocks, false);
        libNtve_gf_SetBossBarBoss(1, EventUnit(), true);
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\overmindportrait_static.dds", StringExternal("Param/Value/598EAE80"), FixedToInt(UnitGetPropertyFixed(gv_overmind, c_unitPropLifeMax, c_unitPropCurrent)), PlayerGroupAll());
        libNtve_gf_MoveBossBar(1, c_anchorTop, 0, 30);
        libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Zerg, true);
        libNtve_gf_SetBossBarCurrentValue(1, FixedToInt(UnitGetPropertyFixed(gv_overmind, c_unitPropLife, c_unitPropCurrent)), true);
        libNtve_gf_ShowHideBossBar(true, 1);
        if ((gv_dayNb < 35)) {
            gv_dayNb = 35;
            gv_zergTypeNb = 35;
        }

        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLevel, 99.0);
        UnitBehaviorAddPlayer(UnitLastCreated(), "20000Damage", gv_zergPlayer, 1);
        TriggerEnable(gt_InBaseRocks, false);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (UnitHasBehavior2(UnitGroupLoopCurrent(), "Godmode") == false) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - 8000.0));
            }
        }
        UnitGroupLoopEnd();
        Wait(2.0, c_timeGame);

        if (gv_GameMode != "Versus") {
            if (gv_difficulty == "Impossible") {
                TriggerEnable(gt_ZergInvasionImpossible, true);
                TriggerEnable(gt_airsquadron29impossible, true);
            }
            else {
                TriggerEnable(gt_ZergInvasion, true);
                TriggerEnable(gt_airsquadron29, true);
            }
        }

        if (gv_GameMode == "Versus") {
            if (gv_versusresearch_airinvasion) {TriggerEnable(gt_airsquadron29impossible, true);}
            else {TriggerEnable(gt_airsquadron29, true);}
            if (gv_versusresearch_groundinvasion) {TriggerEnable(gt_ZergInvasionImpossible, true);}
            else {TriggerEnable(gt_ZergInvasion, true);}
        }

        TriggerEnable(gt_ZergBoss, true);
        TriggerEnable(gt_capitainezergsfinal2635, true);
        TriggerEnable(gt_win2OvermindtuC3A9, true);
        TriggerEnable(gt_capitainezergsfinal2635, false);
        TriggerEnable(gt_AttaquealC3A9atoireovermind, true);
        if ((gv_damageBonus >= 30)) {
            SoundPlay(SoundLink("TZeratul04DarkVoice00032", -1), PlayerGroupAll(), 100.0, 0.0);
            PortraitCreate(25, 0, c_anchorLeft, 237, 360, "DarkVoicePortrait", "", "Default", true, true);
            Wait(7.0, c_timeGame);
            PortraitDestroyAll();
        }
        Wait(30.0, c_timeGame);
        gv_zergLimit = 70 + gv_versusTotalBonusZergLimit;
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_win1NydustuC3A9_Init () {
        gt_win1NydustuC3A9 = TriggerCreate("gt_win1NydustuC3A9_Func");
        TriggerAddEventUnitDied(gt_win1NydustuC3A9, UnitRefFromUnit(UnitFromId(290)));
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: win 2 Overmind tu??
    //--------------------------------------------------------------------------------------------------
    bool gt_win2OvermindtuC3A9_Func (bool testConds, bool runActions) {
        int auto201D14A9_ae;
        int auto201D14A9_ai;
        int auto25222586_ae;
        int auto25222586_ai;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        string auto26222686_ai;
        string auto26222686_ae;
        string auto25222696_ae;
        fixed lv_shield;
        fixed lv_heal;
        fixed lv_healval;

        // Variable Declarations
        int lv_var;
        point lv_point;
        fixed lv_x;
        fixed lv_y;
        fixed lv_daynbX;

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "Overmind"))) {
                return false;
            }
        
            if (!((UnitGetOwner(EventUnit()) == 15))) {
                return false;
            }
        }

        // Variable Initialization
        lv_point = Point(lv_x, lv_y);
        lv_x = 32.0;
        lv_y = 120.0;
        lv_daynbX = 21634.0;
        auto26222686_ai = "i";
        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerEnable(gt_CustomSkin3Unlockment, false);

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {

            // Custom Skin Unlockments - Game win
            // Space Cow - KraveBlaze
            if (TriggerIsEnabled(gt_CustomSkin5Unlockment)) {
                BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[4].lv_bankStorageSection, gv_DonorCustomSkins[4].lv_bankStorageKey, true);
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }
            // Talon Crystalwing - Philip_B
            if (TriggerIsEnabled(gt_CustomSkin6Unlockment)) {
                BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[5].lv_bankStorageSection, gv_DonorCustomSkins[5].lv_bankStorageKey, true);
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }

        }
        PlayerGroupLoopEnd();

        TriggerEnable(gt_Deadprobe, false);
        SoundStopAllModelSounds();
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundPlay(SoundLink("UI_BNet_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaDirective, StringExternal("Param/Value/8ED602D7"));
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaCinematic, StringExternal("Param/Value/BB2BF9C7"));
        DialogDestroy(gv_chronodialogue);
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto26222686_ae = "s";
            auto25222686_ai = StringToInt(StringReplace(PlayerHandle(PlayerGroupLoopCurrent()), "0", 1, 8));
            lv_shield = AbsF(ModF(35.0*10.0, AbsF(ModF((Round((ModF((ModF(auto25322686_ai, SquareRoot(5.0)) * ModF(86, SquareRoot(8.0)) * ModF(auto25322686_ae, SquareRoot(3.0)) * ModF(auto25232686_ai, SquareRoot(2.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(6.0)) * ModF(auto25233686_ai, SquareRoot(7.0)) * ModF(auto25233686_ae, SquareRoot(5.0)) * ModF(auto25333686_ai, SquareRoot(3.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(3.0)) * 10000.0)) / 1000.0), 10.0))));
            lv_heal = (Round((ModF((ModF(auto25322686_ai, SquareRoot(3.0)) * ModF(86, SquareRoot(2.0)) * ModF(auto25322686_ae, SquareRoot(7.0)) * ModF(auto25232686_ai, SquareRoot(8.0)) * ModF(auto25232686_ae, SquareRoot(17.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
            CameraPan(PlayerGroupLoopCurrent(), PointFromId(292), 2.0, -1, 10, true);
            CameraLockInput(PlayerGroupLoopCurrent(), true);
            libNtve_gf_SwooshCamera(PlayerGroupLoopCurrent(), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), PointWithOffset(PointFromId(292), 0.0, 4.0), 8.0);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionEntireMap(), 900.0, false);
            if ((gv_GameMode != "SandBox") && (gv_GameMode != "Versus")) {
                auto25222696_ae = "m";
                if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS") < 399.0) && (gv_damageBonus >= 0)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS") + (1.0 + gv_winbonus + gv_mutatorbonusestimatedwins)));
                }
                if ((BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS") < 399.0) && (gv_damageBonus < 0) && (gv_winbonus >= 1.0)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "WINS") + (gv_winbonus + gv_mutatorbonusestimatedwins)));
                }
                if (gv_GameMode == "Default") {
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 1) {
                        BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "a", (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "a") + 4));
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 2) {
                        BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "e", (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "e") + 7));
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 3) {
                        BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "i", (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "i") + 9));
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 4) {
                        BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "f", (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "f") + 5));
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 5) {
                        BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "o", (BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "o") + 13));
                    }
                }
                BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") + IntToFixed(gv_win2levels + gv_mutatorbonusestimatedlevels)));
                BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVEXP", (BankValueGetAsFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIVO") * 1224.0));
                if ((gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true) && (gv_damageBonus >= 0)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", IntToFixed(35));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", (35.0 * 4788));
                }
                if ((gv_damageBonus < 0) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "EASY", IntToFixed(35));
                }
                if ((gv_damageBonus >= 10) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTELITE", IntToFixed(35));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HEAL", IntToFixed(21634));
                }
                if ((gv_damageBonus >= 20) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTMNHD", IntToFixed(gv_dayNb));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "KILLED", (gv_dayNb * 4788));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "NIGHTNMAR", IntToFixed(35));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNQ", IntToFixed(59120));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "XPNB", (35.0 * 1655.0));
                }
                if ((gv_damageBonus >= 30) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HL", IntToFixed(35));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HAL", (35.0 * 1631.0));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "HLO", (163.0 * 155.0));
                }
                lv_healval = (Round((ModF((ModF(auto25322686_ai, SquareRoot(2.0)) * ModF(86, SquareRoot(3.0)) * ModF(auto25322686_ae, SquareRoot(6.0)) * ModF(auto25232686_ai, SquareRoot(5.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
                if ((gv_dnavalid[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+"val"), (lv_healval));
                }
                if ((gv_damageBonus >= 40) && (gv_lives[PlayerGroupLoopCurrent()] > 0) && (gv_saved[PlayerGroupLoopCurrent()] == true)) {
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae), (lv_shield+350.0));
                    BankValueSetFromFixed(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto26222686_ae), ((lv_shield/lv_heal)*3.4));
                    BankValueSetFromInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae), 35);
                }
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }
            DialogDestroy(gv_ressourcesdialogue[PlayerGroupLoopCurrent()]);
        }
        PlayerGroupLoopEnd();
        if (gv_GameMode != "Versus") {
            if (gv_difficulty == "Easy") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/EE68264E"));
            }
            if (gv_difficulty == "Normal") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A17A9EAD"));
            }
            if (gv_difficulty == "Elite") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/1CE45AC7"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F8D84B08"));
            }
            if (gv_difficulty == "Nightmare") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/268962EB"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F631CFB8"));
            }
            if (gv_difficulty == "Hell") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/04DB0653"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FF01BDB5"));
            }
            if (gv_difficulty == "Impossible") {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("DOCSTR_ImpossibleWin2"));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_ImpossibleWin2Text"));
            }
        }
        if (gv_GameMode == "Versus") {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaDirective, StringExternal("DOCSTR_VersusOvermindWinProbeMessage2"));
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("DOCSTR_VersusOvermindWinProbeMessage2"));
            UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaDirective, StringExternal("DOCSTR_VersusOvermindWinThingMessage"));
        }
        SoundStopAllModelSounds();
        SoundChannelStop(PlayerGroupAll(), c_soundCategoryMusic);
        SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsA1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        TriggerEnable(gt_SwitchTime, false);
        DialogDestroy(gv_chronodialogue);
        DialogDestroy(gv_trademenuimproveddialogue);
        BoardDestroy(gv_tableau);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        TriggerEnable(gt_SwitchTime, false);
        TriggerEnable(gt_ZergInvasion, false);
        TriggerEnable(gt_ZergInvasionImpossible, false);
        TriggerEnable(gt_airsquadron29, false);
        TriggerEnable(gt_airsquadron29impossible, false);
        TriggerEnable(gt_capitainezergs1225, false);
        TriggerEnable(gt_capitaineMutas1725, false);
        TriggerEnable(gt_capitainezergsfinal2635, false);
        TriggerEnable(gt_AttaquealC3A9atoireovermind, false);
        TriggerEnable(gt_SkinsDialog, false);
        DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupAll(), false);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, lv_point);
        }
        IntLoopEnd();
        FogSetEnabled(false);
        libNtve_gf_UnitCreateFacingPoint(1, "ShapeSmileyFace", c_unitCreateIgnorePlacement, 0, PointWithOffset(PointFromId(292), 0.0, 2.0), Point(80.0, 0.0));
        UnitCreateEffectUnit(UnitLastCreated(), "EnergyNovaPersistent", UnitLastCreated());
        Wait(0.2, c_timeGame);
        IntLoopBegin(1, 50);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromName("Center"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DestructibleKorhalTree", 0, 0, lv_point);
            Wait(0.15, c_timeGame);
        }
        IntLoopEnd();
        IntLoopBegin(1, 50);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromName("Center"));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField2", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField222", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MineralField22", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, PointWithOffset(lv_point, 2.0, 2.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, PointWithOffset(lv_point, -2.0, -2.0));
            Wait(0.15, c_timeGame);
        }
        IntLoopEnd();
        SoundPlay(SoundLink("UI_ObjectiveBonusDiscovered", -1), PlayerGroupAll(), 200.0, 0.0);
        lv_point = PointFromId(292);
        auto201D14A9_ae = 45;
        auto201D14A9_ai = 1;
        lv_var = 1;
        for ( ; ( (auto201D14A9_ai >= 0 && lv_var <= auto201D14A9_ae) || (auto201D14A9_ai <= 0 && lv_var >= auto201D14A9_ae) ) ; lv_var += auto201D14A9_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, PointWithOffset(lv_point, 2.0, 2.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, PointWithOffset(lv_point, -2.0, -2.0));
            lv_point = PointWithOffset(lv_point, RandomFixed(-1.0, 1.0), RandomInt(-1, 1));
            Wait(0.15, c_timeGame);
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
        }
        PlayerGroupLoopEnd();
        if (gv_GameMode == "Versus") {
            GameOver(gv_theThingPlayer, c_gameOverDefeat, true, true);
        }

        TimerStart(gv_chrono, 9999.0, true, c_timeGame);
        gv_dayNb = 0;
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gv_saved[PlayerGroupLoopCurrent()] = false;
        }
        PlayerGroupLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, lv_point);
        }
        IntLoopEnd();
        IntLoopBegin(1, 20);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_point = RegionRandomPoint(RegionFromId(1));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, lv_point);
        }
        IntLoopEnd();
        auto25222586_ae = 900;
        auto25222586_ai = 1;
        lv_var = 1;
        for ( ; ( (auto25222586_ai >= 0 && lv_var <= auto25222586_ae) || (auto25222586_ai <= 0 && lv_var >= auto25222586_ae) ) ; lv_var += auto25222586_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, PointWithOffset(lv_point, 2.0, 2.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, PointWithOffset(lv_point, -2.0, -2.0));
            lv_point = PointWithOffset(lv_point, RandomFixed(-1.0, 1.0), RandomInt(-1, 1));
            Wait(1.0, c_timeGame);
        }
        gv_dayNb = 0;
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_win2OvermindtuC3A9_Init () {
        gt_win2OvermindtuC3A9 = TriggerCreate("gt_win2OvermindtuC3A9_Func");
        TriggerEnable(gt_win2OvermindtuC3A9, false);
        TriggerAddEventUnitDied(gt_win2OvermindtuC3A9, UnitRefFromVariable("gv_overmind"));
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Overmind sous 50%
    //--------------------------------------------------------------------------------------------------
    bool gt_Overmindsous50_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "Overmind"))) {
                return false;
            }

            if (!((UnitGetOwner(EventUnit()) == 15))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/310CEB21"));
        SoundPlay(SoundLink("Overseer_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor {128,0,255 4.000000}");
        UnitBehaviorAddPlayer(EventUnit(), "20000Damage", gv_zergPlayer, 1);
        SoundStopAllModelSounds();
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsQ", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
        }
        PlayerGroupLoopEnd();
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Overmindsous50_Init () {
        gt_Overmindsous50 = TriggerCreate("gt_Overmindsous50_Func");
        TriggerAddEventUnitBehaviorChange(gt_Overmindsous50, null, "Overmind50", c_unitBehaviorChangeActivate);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Attaque al??atoire overmind
    //--------------------------------------------------------------------------------------------------
    bool gt_AttaquealC3A9atoireovermind_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitBehaviorAddPlayer(gv_overmind, "4000Damage", gv_zergPlayer, 1);
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterBiological), (1 << (c_targetFilterInvulnerable - 32))), 1));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (UnitHasBehavior2(UnitGroupLoopCurrent(), "Godmode") == false) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - 44000.0));
            }
            UnitIssueOrder(gv_overmind, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupLoopCurrent()), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        TriggerExecute(gt_capitainezergsfinal2635, false, false);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AttaquealC3A9atoireovermind_Init () {
        gt_AttaquealC3A9atoireovermind = TriggerCreate("gt_AttaquealC3A9atoireovermind_Func");
        TriggerEnable(gt_AttaquealC3A9atoireovermind, false);
        TriggerAddEventTimePeriodic(gt_AttaquealC3A9atoireovermind, 22.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Raffinerie auto
    //--------------------------------------------------------------------------------------------------
    bool gt_Raffinerieauto_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_randomquantitC3A9;
        unit lv_unit;

        // Variable Initialization
        lv_unit = EventUnitProgressUnit();

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnitProgressUnit()) == "AutomatedRefinery") || (UnitGetType(EventUnitProgressUnit()) == "AutomatedRefinery2"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        gv_corePlayer[UnitGetOwner(lv_unit)] += 1;
        UnitAbilityShow(lv_unit, "Improveharvest", true);
        UnitAbilityShow(lv_unit, "Improveharvest3", false);
        UnitAbilityShow(lv_unit, "Improveharvest32", false);
        UnitAbilityShow(lv_unit, "Improveharvest2", false);
        UnitAbilityShow(lv_unit, "Improveharvest100", false);
        if (UnitGetType(EventUnitProgressUnit()) == "AutomatedRefinery") {
            UnitAbilityShow(lv_unit, "Specializationonpurpleminerals", false);
            UnitAbilityShow(lv_unit, "Specializationonblueminerals", false);
            UnitAbilityShow(lv_unit, "Specializationonredminerals", false);
            UnitAbilityShow(lv_unit, "Specializationongreenminerals", false);
        }
        BoardItemSetText(gv_tableau, 6, gv_playerLine[UnitGetOwner(lv_unit)], IntToText(gv_corePlayer[UnitGetOwner(lv_unit)]));
        UnitSetPropertyFixed(lv_unit, c_unitPropResources, 250000.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Raffinerieauto_Init () {
        gt_Raffinerieauto = TriggerCreate("gt_Raffinerieauto_Func");
        TriggerAddEventUnitConstructProgress(gt_Raffinerieauto, null, c_unitProgressStageComplete);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +2
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest2_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 500.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 2.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 10.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest", false);
            UnitAbilityShow(EventUnit(), "Improveharvest3", true);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest2_Init () {
        gt_improveharvest2 = TriggerCreate("gt_improveharvest2_Func");
        TriggerAddEventUnitAbility(gt_improveharvest2, null, AbilityCommand("Improveharvest", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +10
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest10_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 2500.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 10.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 40.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest3", false);
            UnitAbilityShow(EventUnit(), "Improveharvest32", true);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest10_Init () {
        gt_improveharvest10 = TriggerCreate("gt_improveharvest10_Func");
        TriggerAddEventUnitAbility(gt_improveharvest10, null, AbilityCommand("Improveharvest3", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +20
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest20_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 5000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 20.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 100.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest32", false);
            UnitAbilityShow(EventUnit(), "Improveharvest2", true);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest20_Init () {
        gt_improveharvest20 = TriggerCreate("gt_improveharvest20_Func");
        TriggerAddEventUnitAbility(gt_improveharvest20, null, AbilityCommand("Improveharvest32", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +50
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest50_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 50.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 200.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest2", false);
            UnitAbilityShow(EventUnit(), "Specializationonpurpleminerals", true);
            UnitAbilityShow(EventUnit(), "Specializationonblueminerals", true);
            UnitAbilityShow(EventUnit(), "Specializationonredminerals", true);
            UnitAbilityShow(EventUnit(), "Specializationongreenminerals", true);
            UnitAbilityShow(EventUnit(), "Improveharvest50refnightshift", true);
            UnitAbilityShow(EventUnit(), "Improveharvest100", true);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest50_Init () {
        gt_improveharvest50 = TriggerCreate("gt_improveharvest50_Func");
        TriggerAddEventUnitAbility(gt_improveharvest50, null, AbilityCommand("Improveharvest2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +50 (night shift)
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest50shift_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 50.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 250.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest50refnightshift", false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest50shift_Init () {
        gt_improveharvest50shift = TriggerCreate("gt_improveharvest50shift_Func");
        TriggerAddEventUnitAbility(gt_improveharvest50shift, null, AbilityCommand("Improveharvest50refnightshift", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: improve harvest +100
    //--------------------------------------------------------------------------------------------------
    bool gt_improveharvest100_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 100.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) >= 1000.0)) {
            UnitAbilityShow(EventUnit(), "Improveharvest100", false);
        }
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) >= 450000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 12500.0));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_improveharvest100_Init () {
        gt_improveharvest100 = TriggerCreate("gt_improveharvest100_Func");
        TriggerAddEventUnitAbility(gt_improveharvest100, null, AbilityCommand("Improveharvest100", 0), c_unitAbilStageComplete, false);
    }

    // //--------------------------------------------------------------------------------------------------
    // // Trigger: R??colte des raffineries (Refinery work)
    // //--------------------------------------------------------------------------------------------------
    // bool gt_RefineryWorking_Func (bool testConds, bool runActions) {
    //     // Variable Declarations
    //     unit lv_unit;
    //     color lv_color;
    //     fixed lv_quantity;
    //     int lv_alC3A9atoire;
    //     color[5] lv_colors;
    //     bool lv_specialized;
    //     bool[4] lv_mineral;
    //     int lv_i;

    //     // Variable Initialization
    //     lv_specialized = false;
    //     lv_unit = EventUnit();
    //     lv_color = Color(0,66*100/255,100);
    //     lv_colors[0] = Color(0.00, 100.00, 100.00);
    //     lv_colors[1] = Color(0.00, 100.00, 0.00);
    //     lv_colors[2] = Color(100.00, 0.00, 100.00);
    //     lv_colors[3] = Color(100.00, 0.00, 0.00);
    //     lv_colors[4] = Color(100.00, 100.00, 0.00);
    //     lv_mineral[0] = false;
    //     lv_mineral[1] = false;
    //     lv_mineral[2] = false;
    //     lv_mineral[3] = false;

    //     // Conditions
    //     if (testConds) {
    //         if (!((UnitGetType(lv_unit) == "AutomatedRefinery") || (UnitGetType(lv_unit) == "AutomatedRefinery2"))) {
    //             return false;
    //         }

    //         if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropResources, c_unitPropCurrent) > 0.0))) {
    //             return false;
    //         }

    //         if (!((libNtve_gf_UnitIsUnderConstruction(EventUnit()) == false))) {
    //             return false;
    //         }

    //         if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) == 0.0))) {
    //             return false;
    //         }
    //     }

    //     // Actions
    //     if (!runActions) {
    //         return true;
    //     }

    //     UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 1.0);
    //     PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperSubtract, 1);
    //     lv_quantity = (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
    //     IntLoopBegin(0, 4);
    //     for ( ; !IntLoopDone() ; IntLoopStep() ) {
    //         if ((UnitHasBehavior2(EventUnit(), ("SpecializationOnMinerals"+IntToString(IntLoopCurrent()))) == true)) {
    //             if (IntLoopCurrent() != 4) {
    //                 lv_mineral[IntLoopCurrent()] = true;
    //             }
    //             else {
    //                 lv_mineral[0] = true;
    //                 lv_mineral[1] = true;
    //                 lv_mineral[2] = true;
    //                 lv_mineral[3] = true;
    //             }
    //             lv_color = lv_colors[IntLoopCurrent()];
    //             lv_specialized = true;
    //             break;
    //         }
    //     }
    //     IntLoopEnd();
    //     if (lv_specialized == false) {
    //         lv_i = RandomInt(0, 3);
    //         lv_mineral[lv_i] = true;
    //         lv_color = lv_colors[lv_i];
    //     }

    //     IntLoopBegin(0, 3);
    //     for ( ; !IntLoopDone() ; IntLoopStep() ) {
    //         if (lv_mineral[IntLoopCurrent()] == true) {
    //             PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), IntLoopCurrent(), c_playerPropOperAdd, FixedToInt(lv_quantity));
    //         }
    //     }
    //     IntLoopEnd();

    //     TextTagCreate((StringExternal("Param/Value/41070280") + FixedToText(lv_quantity, 0)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
    //     TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
    //     TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    //     TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
    //     TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    //     Wait(0.1, c_timeGame);
    //     UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 0.0);
    //     Wait(3.0, c_timeGame);
    //     return true;
    // }

    // //--------------------------------------------------------------------------------------------------
    // void gt_RefineryWorking_Init () {
    //     gt_RefineryWorking = TriggerCreate("gt_RefineryWorking_Func");
    //     TriggerAddEventUnitProperty(gt_RefineryWorking, null, c_unitPropResources);
    // }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (Blue)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingBlue_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 0, c_playerPropOperAdd, lv_quantity);

        if (gv_hiddeneffects == false) {
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingBlue_Init () {
        gt_RefineryWorkingBlue = TriggerCreate("gt_RefineryWorkingBlue_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingBlue, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamageBlue");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (Green)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingGreen_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 1, c_playerPropOperAdd, lv_quantity);

        if (gv_hiddeneffects == false) {
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingGreen_Init () {
        gt_RefineryWorkingGreen = TriggerCreate("gt_RefineryWorkingGreen_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingGreen, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamageGreen");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (Plasma)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingPlasma_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 2, c_playerPropOperAdd, lv_quantity);

        if (gv_hiddeneffects == false) {
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 100.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingPlasma_Init () {
        gt_RefineryWorkingPlasma = TriggerCreate("gt_RefineryWorkingPlasma_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingPlasma, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamagePlasma");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (Red)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingRed_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 3, c_playerPropOperAdd, lv_quantity);

        if (gv_hiddeneffects == false) {
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingRed_Init () {
        gt_RefineryWorkingRed = TriggerCreate("gt_RefineryWorkingRed_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingRed, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamageRed");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (All)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingAll_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 0, c_playerPropOperAdd, lv_quantity);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 1, c_playerPropOperAdd, lv_quantity);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 2, c_playerPropOperAdd, lv_quantity);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), 3, c_playerPropOperAdd, lv_quantity);

        if (gv_hiddeneffects == false) {
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingAll_Init () {
        gt_RefineryWorkingAll = TriggerCreate("gt_RefineryWorkingAll_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingAll, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamageAll");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Refinery working (None)
    //--------------------------------------------------------------------------------------------------
    bool gt_RefineryWorkingNone_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_quantity;
        int lv_color;
        color[5] lv_colors;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_color = RandomInt(0, 3);
        lv_quantity = (UnitGetPropertyInt(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent));
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), lv_color, c_playerPropOperAdd, FixedToInt(lv_quantity));

        if (gv_hiddeneffects == false) {
            lv_colors[0] = Color(0.00, 100.00, 100.00);
            lv_colors[1] = Color(0.00, 100.00, 0.00);
            lv_colors[2] = Color(100.00, 0.00, 100.00);
            lv_colors[3] = Color(100.00, 0.00, 0.00);
            TextTagCreate((StringToText("+") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, gv_probeGroupPlayer);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_colors[lv_color]);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.2);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.4);
            TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_RefineryWorkingNone_Init () {
        gt_RefineryWorkingNone = TriggerCreate("gt_RefineryWorkingNone_Func");
        TriggerAddEventUnitDamaged(gt_RefineryWorkingNone, null, c_unitDamageTypeAny, c_unitDamageEither, "RefineryDummyDamageNone");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Prestige behaviors
    //--------------------------------------------------------------------------------------------------
    bool gt_prestigebehaviors_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        fixed lv_mining;

        // Actions
        if (!runActions) {
            return true;
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "Grenadeability") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "BonesTossGrenade2");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "Seekermissile") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "SeekerMissile2");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "PsiStorm2") == true) {
                if (gv_GameMode == "Versus") {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "PsiStormVersus2");
                }
                else {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "PsiStormskill");
                }
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "CrazyMineralz") == true) {
                TriggerEnable(gt_CrazyMineralz, true);
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "CrazyMineralzSwitch");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "GuardianShield2") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "GuardianShield2");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "RepairDrones") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "CalldownRepairDrone");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "ChronoAccelerator") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "TimeWarp");
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "ChronoBoostpermanent");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "SpeedUp") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "SpeedUpGenMultiple");
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "SpeedUpGen2");
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "Hallucinator") == true) {
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "HallucinationProbe2");
                UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "HallucinationHighTemplar2");
                TriggerEnable(gt_Hallucinator, true);
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "AccumulativeReserves") == true) {
                TriggerEnable(gt_AccumulativeReserves, true);
                gv_AccumulativeReservesEnabled = true;
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "CoreInside") == true) {
                TriggerEnable(gt_CoreInside, true);
                // Wall role - Blue Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 1) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "BlueCoreT1");
                }
                // Cannon role - Purple Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 2) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "PurpleCoreT1");
                }
                // Healer role - Green Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 3) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "GreenCoreT1");
                }
                // Generator role - Red Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 4) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "RedCoreT1");
                }
                // Economy role - Greatest Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 5) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "GreatestCoreT1");
                }
                // Other roles - Greatest Core Inside
                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 6) {
                    UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "GreatestCoreT1");
                }
                // UnitAbilityAdd(gv_probe[PlayerGroupLoopCurrent()], "SellCoreInsideAll");
                // UnitAbilityShow(gv_probe[PlayerGroupLoopCurrent()], "SellCoreInsideAll", false);
                // libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "CoreInsidedummyshowpassive", 1);
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "PlasmaCollector") == true) {
                lv_mining = UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyTerrazine, c_unitPropCurrent);
                UnitSetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyTerrazine, (lv_mining + 1.0));
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "GasGatherer") == true) {
                lv_mining = UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyVespene, c_unitPropCurrent);
                UnitSetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyVespene, (lv_mining + 1.0));
            }
            if (UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "RedLazer") == true) {
                lv_mining = UnitGetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyCustom, c_unitPropCurrent);
                UnitSetPropertyFixed(gv_probe[PlayerGroupLoopCurrent()], c_unitPropBountyCustom, (lv_mining + 1.0));
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_prestigebehaviors_Init () {
        gt_prestigebehaviors = TriggerCreate("gt_prestigebehaviors_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Accumulative Reserves
    //--------------------------------------------------------------------------------------------------
    bool gt_AccumulativeReserves_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        fixed lv_quantity;
        color lv_color;

        // Variable Initialization
        lv_quantity = (gv_dayNb)*24.0;
        // Actions
        if (!runActions) {
            return true;
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "AccumulativeReserves") == true)) {
                lv_color = Color(0.00, 100.00, 100.00);
                TextTagCreate((StringExternal("Param/Value/41070280") + FixedToText(lv_quantity, 0)), 35, PointWithOffset(UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), 0.0, 0.0), 1.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_quantity));
                PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, FixedToInt(lv_quantity));
                PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropTerrazine, c_playerPropOperAdd, FixedToInt(lv_quantity));
                PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_quantity));
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AccumulativeReserves_Init () {
        gt_AccumulativeReserves = TriggerCreate("gt_AccumulativeReserves_Func");
        TriggerEnable(gt_AccumulativeReserves, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Crazy Mineralz
    //--------------------------------------------------------------------------------------------------
    bool gt_CrazyMineralz_Func (bool testConds, bool runActions) {
        // Variable Declarations
        color lv_color;
        fixed lv_quantity;
        fixed lv_randomgain;
        int lv_alC3A9atoire;

        // Variable Initialization
        lv_randomgain = IntToFixed(RandomInt(1, 2));
        lv_quantity = (gv_dayNb)*(lv_randomgain);
        
        // Actions
        if (!runActions) {
            return true;
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "CrazyMineralz") == true)) {
                lv_alC3A9atoire = RandomInt(1, 4);
                if ((lv_alC3A9atoire == 1)) {
                    lv_color = Color(0.00, 100.00, 100.00);
                    PlayerModifyPropertyInt(UnitGetOwner(gv_probe[PlayerGroupLoopCurrent()]), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_quantity));
                }
                else {
                    if ((lv_alC3A9atoire == 2)) {
                        lv_color = Color(100.00, 0.00, 0.00);
                        PlayerModifyPropertyInt(UnitGetOwner(gv_probe[PlayerGroupLoopCurrent()]), c_playerPropCustom, c_playerPropOperAdd, FixedToInt(lv_quantity));
                    }
                    else {
                        if ((lv_alC3A9atoire == 3)) {
                            lv_color = Color(100.00, 0.00, 100.00);
                            PlayerModifyPropertyInt(UnitGetOwner(gv_probe[PlayerGroupLoopCurrent()]), c_playerPropTerrazine, c_playerPropOperAdd, FixedToInt(lv_quantity));
                        }
                        else {
                            lv_color = Color(0.00, 100.00, 0.00);
                            PlayerModifyPropertyInt(UnitGetOwner(gv_probe[PlayerGroupLoopCurrent()]), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_quantity));
                        }
                    }
                }
                if ((gv_showcrazy[PlayerGroupLoopCurrent()] == true)) {
                    TextTagCreate((StringToText("+") + FixedToText(lv_quantity, 0)), 20, PointWithOffset(UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), 0.6, 0.0), 1.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
                }

            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CrazyMineralz_Init () {
        gt_CrazyMineralz = TriggerCreate("gt_CrazyMineralz_Func");
        TriggerEnable(gt_CrazyMineralz, false);
        TriggerAddEventTimePeriodic(gt_CrazyMineralz, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Crazy Mineralz Switch
    //--------------------------------------------------------------------------------------------------
    bool gt_CrazyMineralzSwitch_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (EventPlayer() != UnitGetOwner(EventUnit())) {
            return false;
        }

        if ((gv_showcrazy[EventPlayer()] == true)) {
            gv_showcrazy[EventPlayer()] = false;
        }
        else {
            gv_showcrazy[EventPlayer()] = true;
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CrazyMineralzSwitch_Init () {
        gt_CrazyMineralzSwitch = TriggerCreate("gt_CrazyMineralzSwitch_Func");
        TriggerAddEventUnitAbility(gt_CrazyMineralzSwitch, null, AbilityCommand("CrazyMineralzSwitch", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Cores
    //--------------------------------------------------------------------------------------------------
    bool gt_Cores_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_joueur;
        int lv_mineral;
        int lv_mineralall;
        int lv_red;
        int lv_redall;
        int lv_plasma;
        int lv_plasmaall;
        int lv_vespene;
        int lv_vespeneall;
        int lv_core;
        int lv_coreall;
        int lv_mostCorePlayer;
        int lv_int;
        bool lv_partageCore;

        // Variable Initialization
        lv_partageCore = true;

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_mineral += FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyMinerals, c_unitPropCurrent));
                lv_red += FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyCustom, c_unitPropCurrent));
                lv_plasma += FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyTerrazine, c_unitPropCurrent));
                lv_vespene += FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyVespene, c_unitPropCurrent));
                lv_core += 1;
            }
            UnitGroupLoopEnd();
            if ((gv_dayNb >= 1)) {
                if ((lv_core > 0)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, lv_mineral);
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, lv_red);
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, lv_plasma);
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/C90897EB") + IntToText(lv_mineral)));
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/2B575735") + IntToText(lv_vespene)));
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/1EF659C5") + IntToText(lv_red)));
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/052F93B1") + IntToText(lv_plasma)));
                    lv_mineralall = (lv_mineralall + lv_mineral);
                    lv_plasmaall = (lv_plasmaall + lv_plasma);
                    lv_redall = (lv_redall + lv_red);
                    lv_vespeneall = (lv_vespeneall + lv_vespene);
                    lv_coreall = (lv_coreall + lv_core);
                }
                else {
                }
                lv_mineral = 0;
                lv_vespene = 0;
                lv_red = 0;
                lv_plasma = 0;
                lv_core = 0;
            }
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((lv_coreall > 0)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, (lv_mineralall / gv_nbJoueursvar));
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, (lv_redall / gv_nbJoueursvar));
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, (lv_plasmaall / gv_nbJoueursvar));
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, (lv_vespeneall / gv_nbJoueursvar));
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/596B4B10") + (IntToText((100 / gv_nbJoueursvar)) + StringExternal("Param/Value/C21187F3"))));
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (IntToText((lv_mineralall / gv_nbJoueursvar)) + (StringExternal("Param/Value/278AC438") + (IntToText((lv_vespeneall / gv_nbJoueursvar)) + (StringExternal("Param/Value/121F61B5") + (IntToText((lv_plasmaall / gv_nbJoueursvar)) + (StringExternal("Param/Value/38DC3312") + (IntToText((lv_redall / gv_nbJoueursvar)) + (StringExternal("Param/Value/9924E276") + StringToText(""))))))))));
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Cores_Init () {
        gt_Cores = TriggerCreate("gt_Cores_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Fill green core
    //--------------------------------------------------------------------------------------------------
    bool gt_Fillgreencore_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent) < 2000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyVespene, 0.0);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyVespene, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 0,255,0");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent) >= 12000.0)) {
            UnitAbilityShow(EventUnit(), "Fillthestockofthecore", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Fillgreencore_Init () {
        gt_Fillgreencore = TriggerCreate("gt_Fillgreencore_Func");
        TriggerAddEventUnitAbility(gt_Fillgreencore, null, AbilityCommand("Fillthestockofthecore", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Fill blue core
    //--------------------------------------------------------------------------------------------------
    bool gt_Fillbluecore_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) < 2000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, 0.0);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 0,255,255");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) >= 12000.0)) {
            UnitAbilityShow(EventUnit(), "Fillthestockofthecore2", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Fillbluecore_Init () {
        gt_Fillbluecore = TriggerCreate("gt_Fillbluecore_Func");
        TriggerAddEventUnitAbility(gt_Fillbluecore, null, AbilityCommand("Fillthestockofthecore2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Fill red core 
    //--------------------------------------------------------------------------------------------------
    bool gt_Fillredcore_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent) < 2000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyCustom, 0.0);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyCustom, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,128,128");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent) >= 12000.0)) {
            UnitAbilityShow(EventUnit(), "Fillthestockofthecore3", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Fillredcore_Init () {
        gt_Fillredcore = TriggerCreate("gt_Fillredcore_Func");
        TriggerAddEventUnitAbility(gt_Fillredcore, null, AbilityCommand("Fillthestockofthecore3", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Fill plasma core
    //--------------------------------------------------------------------------------------------------
    bool gt_Fillplasmacore_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent) < 2000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, 0.0);
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,0,255");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent) >= 12000.0)) {
            UnitAbilityShow(EventUnit(), "Fillthestockofthecore4", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Fillplasmacore_Init () {
        gt_Fillplasmacore = TriggerCreate("gt_Fillplasmacore_Func");
        TriggerAddEventUnitAbility(gt_Fillplasmacore, null, AbilityCommand("Fillthestockofthecore4", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Fill greatest core
    //--------------------------------------------------------------------------------------------------
    bool gt_Fillgreatestcore_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) < 2000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyVespene, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropBountyCustom, 0.0);
        }
        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyVespene, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyVespene, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyTerrazine, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropBountyCustom, (UnitGetPropertyFixed(EventUnit(), c_unitPropBountyCustom, c_unitPropCurrent) + 2000.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 10000.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,255,0");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropBountyMinerals, c_unitPropCurrent) >= 12000.0)) {
            UnitAbilityShow(EventUnit(), "Fillthestockofthecore42", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Fillgreatestcore_Init () {
        gt_Fillgreatestcore = TriggerCreate("gt_Fillgreatestcore_Func");
        TriggerAddEventUnitAbility(gt_Fillgreatestcore, null, AbilityCommand("Fillthestockofthecore42", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: wall bar focus
    //--------------------------------------------------------------------------------------------------
    bool gt_wallbarfocus_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_wallbar = EventUnit();
        libNtve_gf_SetBossBarBoss(1, EventUnit(), true);
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\wireframe-protoss-darkpylon.dds", StringExternal("Param/Value/82CCACA8"), FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent)), gv_probeGroupPlayer);
        libNtve_gf_MoveBossBar(1, c_anchorTopLeft, -120, 30);
        libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
        libNtve_gf_SetBossBarCurrentValue(1, FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)), true);
        libNtve_gf_ShowHideBossBar(true, 1);
        TriggerEnable(gt_actualisewallbar, true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_wallbarfocus_Init () {
        gt_wallbarfocus = TriggerCreate("gt_wallbarfocus_Func");
        TriggerAddEventUnitAbility(gt_wallbarfocus, null, AbilityCommand("Thewallbarforfocus", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: actualise wall bar
    //--------------------------------------------------------------------------------------------------
    bool gt_actualisewallbar_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) > 1)) {
            libNtve_gf_SetBossBarCurrentValue(1, FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)), true);
            libNtve_gf_SetBossBarMaximumValue(1, FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent)), true);
        }
        else {
            libNtve_gf_ShowHideBossBar(false, 1);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_actualisewallbar_Init () {
        gt_actualisewallbar = TriggerCreate("gt_actualisewallbar_Func");
        TriggerAddEventUnitProperty(gt_actualisewallbar, UnitRefFromVariable("gv_wallbar"), c_unitPropLife);
        TriggerAddEventUnitProperty(gt_actualisewallbar, UnitRefFromVariable("gv_wallbar"), c_unitPropLifeMax);
        TriggerAddEventUnitDied(gt_actualisewallbar, UnitRefFromVariable("gv_wallbar"));
        TriggerEnable(gt_actualisewallbar, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Autonomous generator
    //--------------------------------------------------------------------------------------------------
    bool gt_Autonomousgenerator_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyRegen, c_unitPropCurrent) + 500.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) <= 375000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) + 25000.0));
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyMax, 400000.0);
            UnitAbilityShow(EventUnit(), "independentgenerator", false);
        }
        TextTagCreate((StringExternal("Param/Value/A93AB953") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Autonomousgenerator_Init () {
        gt_Autonomousgenerator = TriggerCreate("gt_Autonomousgenerator_Func");
        TriggerAddEventUnitAbility(gt_Autonomousgenerator, null, AbilityCommand("independentgenerator", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: +50 000 HP or 50 armor points
    //--------------------------------------------------------------------------------------------------
    bool gt__50000HPor50armorpoints_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) <= 450000.0)) {
            TextTagCreate((StringExternal("Param/Value/37A5D5EC") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 50000.0));
        }
        else {
            TextTagCreate((StringExternal("Param/Value/0B35D6FA") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            UnitBehaviorAdd(EventUnit(), "4Armorpoint", EventUnit(), 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "4Armorpoint", c_techCountQueuedOrBetter) >= 10)) {
            UnitBehaviorRemove(EventUnit(), "4Armorpoint", 10);
            UnitBehaviorAdd(EventUnit(), "4Armorpoint2", EventUnit(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "4Armorpoint2", c_techCountQueuedOrBetter) >= 6)) {
            UnitBehaviorRemove(EventUnit(), "4Armorpoint2", 6);
            UnitBehaviorAdd(EventUnit(), "3000Armorpoints", EventUnit(), 1);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt__50000HPor50armorpoints_Init () {
        gt__50000HPor50armorpoints = TriggerCreate("gt__50000HPor50armorpoints_Func");
        TriggerAddEventUnitAbility(gt__50000HPor50armorpoints, null, AbilityCommand("4ArmorPoint", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: +100 000 HP or 100 armor points
    //--------------------------------------------------------------------------------------------------
    bool gt_100000HPor100armorpoints_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) <= 400000.0)) {
            TextTagCreate((StringExternal("Param/Value/EB22AB6D") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 100000.0));
        }
        else {
            TextTagCreate((StringExternal("Param/Value/E7C5D996") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            UnitBehaviorAdd(EventUnit(), "100Armorpoints", EventUnit(), 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "100Armorpoints", c_techCountQueuedOrBetter) >= 10)) {
            UnitBehaviorRemove(EventUnit(), "100Armorpoints", 10);
            UnitBehaviorAdd(EventUnit(), "1000Armorpoints", EventUnit(), 1);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_100000HPor100armorpoints_Init () {
        gt_100000HPor100armorpoints = TriggerCreate("gt_100000HPor100armorpoints_Func");
        TriggerAddEventUnitAbility(gt_100000HPor100armorpoints, null, AbilityCommand("4ArmorPoint2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: 100 armor points
    //--------------------------------------------------------------------------------------------------
    bool gt__100Aresarmorpoints_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) <= 450000.0)) {
            TextTagCreate((StringExternal("Param/Value/37A5D5EC") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 50000.0));
        }
        else {
            TextTagCreate((StringExternal("Param/Value/E7C5D996") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            UnitBehaviorAdd(EventUnit(), "100Armorpoints", EventUnit(), 1);

            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt__100Aresarmorpoints_Init () {
        gt__100Aresarmorpoints = TriggerCreate("gt__100Aresarmorpoints_Func");
        TriggerAddEventUnitAbility(gt__100Aresarmorpoints, null, AbilityCommand("ARESArmor", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: 1000 armor points
    //--------------------------------------------------------------------------------------------------
    bool gt__1000Aresarmorpoints_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) <= 450000.0)) {
            TextTagCreate((StringExternal("Param/Value/37A5D5EC") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 50000.0));
        }
        else {
            TextTagCreate((StringExternal("Param/Value/FF7F1D7F") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            UnitBehaviorAdd(EventUnit(), "1000Armorpoints", EventUnit(), 1);
            // UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 524000.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt__1000Aresarmorpoints_Init () {
        gt__1000Aresarmorpoints = TriggerCreate("gt__1000Aresarmorpoints_Func");
        TriggerAddEventUnitAbility(gt__1000Aresarmorpoints, null, AbilityCommand("ARESArmor1000", 0), c_unitAbilStageComplete, false);
    }



    //--------------------------------------------------------------------------------------------------
    // Trigger: + 25 000 HP
    //--------------------------------------------------------------------------------------------------
    bool gt__25000HP_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        TextTagCreate((StringExternal("Param/Value/3A9C0FC5") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) >= 250000.0)) {
            UnitAbilityShow(EventUnit(), "25000HP", false);
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) <= 475000.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 25000.0));
        }
        else {
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            UnitAbilityShow(EventUnit(), "25000HP", false);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt__25000HP_Init () {
        gt__25000HP = TriggerCreate("gt__25000HP_Func");
        TriggerAddEventUnitAbility(gt__25000HP, null, AbilityCommand("25000HP", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Damage increased +500
    //--------------------------------------------------------------------------------------------------
    bool gt_Damageincreased500_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitBehaviorAddPlayer(EventUnit(), "500Damage", EventPlayer(), 1);
        TextTagCreate(StringExternal("Param/Value/C9A83F14"), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        if ((UnitTechTreeBehaviorCount(EventUnit(), "500Damage", c_techCountQueuedOrBetter) == 2)) {
            UnitBehaviorRemove(EventUnit(), "500Damage", 2);
            UnitBehaviorAddPlayer(EventUnit(), "1000Damage", EventPlayer(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "1000Damage", c_techCountQueuedOrBetter) == 10)) {
            UnitBehaviorRemove(EventUnit(), "1000Damage", 10);
            UnitBehaviorAddPlayer(EventUnit(), "10000Damage", EventPlayer(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "10000Damage", c_techCountQueuedOrBetter) == 2)) {
            UnitAbilityShow(EventUnit(), "Damageincreased250", false);
            UnitAbilityShow(EventUnit(), "Damageincreased500", false);
            UnitAbilityShow(EventUnit(), "Damageincreased5002", false);
            UnitAbilityShow(EventUnit(), "Damageincreased1000", false);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Damageincreased500_Init () {
        gt_Damageincreased500 = TriggerCreate("gt_Damageincreased500_Func");
        TriggerAddEventUnitAbility(gt_Damageincreased500, null, AbilityCommand("Damageincreased500", 0), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_Damageincreased500, null, AbilityCommand("Damageincreased5002", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Damage increased +1000
    //--------------------------------------------------------------------------------------------------
    bool gt_Damageincreased1000_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitBehaviorAddPlayer(EventUnit(), "1000Damage", EventPlayer(), 1);
        TextTagCreate(StringExternal("Param/Value/54B6A346"), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        if ((UnitTechTreeBehaviorCount(EventUnit(), "1000Damage", c_techCountQueuedOrBetter) == 10)) {
            UnitBehaviorRemove(EventUnit(), "1000Damage", 10);
            UnitBehaviorAddPlayer(EventUnit(), "10000Damage", EventPlayer(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "10000Damage", c_techCountQueuedOrBetter) >= 2)) {
            UnitAbilityShow(EventUnit(), "Damageincreased500", false);
            UnitAbilityShow(EventUnit(), "Damageincreased1000", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Damageincreased1000_Init () {
        gt_Damageincreased1000 = TriggerCreate("gt_Damageincreased1000_Func");
        TriggerAddEventUnitAbility(gt_Damageincreased1000, null, AbilityCommand("Damageincreased1000", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Damage increased +250
    //--------------------------------------------------------------------------------------------------
    bool gt_Damageincreased250_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitBehaviorAddPlayer(EventUnit(), "250Damage", EventPlayer(), 1);
        TextTagCreate(StringExternal("Param/Value/FA34452A"), 32, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        if ((UnitTechTreeBehaviorCount(EventUnit(), "250Damage", c_techCountQueuedOrBetter) == 4)) {
            UnitBehaviorRemove(EventUnit(), "250Damage", 4);
            UnitBehaviorAddPlayer(EventUnit(), "1000Damage", EventPlayer(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "1000Damage", c_techCountQueuedOrBetter) == 10)) {
            UnitBehaviorRemove(EventUnit(), "1000Damage", 10);
            UnitBehaviorAddPlayer(EventUnit(), "10000Damage", EventPlayer(), 1);
        }
        if ((UnitTechTreeBehaviorCount(EventUnit(), "10000Damage", c_techCountQueuedOrBetter) == 1)) {
            UnitAbilityShow(EventUnit(), "Damageincreased250", false);
            UnitAbilityShow(EventUnit(), "Damageincreased500", false);
            UnitAbilityShow(EventUnit(), "Damageincreased5002", false);
            UnitAbilityShow(EventUnit(), "Damageincreased1000", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Damageincreased250_Init () {
        gt_Damageincreased250 = TriggerCreate("gt_Damageincreased250_Func");
        TriggerAddEventUnitAbility(gt_Damageincreased250, null, AbilityCommand("Damageincreased250", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Upgrade G generators
    //--------------------------------------------------------------------------------------------------
    bool gt_UpgradeGgenerators_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_nBgeneratorsupgrades = (gv_nBgeneratorsupgrades + 1);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/D654D3FA") + IntToText((gv_nBgeneratorsupgrades + 0))));
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ProtossGroundArmorsLevel1", gv_nBgeneratorsupgrades);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_UpgradeGgenerators_Init () {
        gt_UpgradeGgenerators = TriggerCreate("gt_UpgradeGgenerators_Func");
        TriggerAddEventUnitAbility(gt_UpgradeGgenerators, null, AbilityCommand("ForgeResearch", 3), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_UpgradeGgenerators, null, AbilityCommand("ForgeResearch", 29), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Upgrade G healers
    //--------------------------------------------------------------------------------------------------
    bool gt_UpgradeGhealers_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_nBhealersupgrades = (gv_nBhealersupgrades + 1);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/267BF474") + IntToText((gv_nBhealersupgrades))));
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel2", gv_nBhealersupgrades);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_UpgradeGhealers_Init () {
        gt_UpgradeGhealers = TriggerCreate("gt_UpgradeGhealers_Func");
        TriggerAddEventUnitAbility(gt_UpgradeGhealers, null, AbilityCommand("ForgeResearch", 1), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_UpgradeGhealers, null, AbilityCommand("ForgeResearch", 28), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Upgrade G cannons
    //--------------------------------------------------------------------------------------------------
    bool gt_UpgradeGcannons_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        gv_nBCannonsupgrades = (gv_nBCannonsupgrades + 1);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (StringExternal("Param/Value/260135BF") + IntToText((gv_nBCannonsupgrades))));
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "ProtossGroundWeaponsLevel3", gv_nBCannonsupgrades);
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Improvethesiegecannons", gv_nBCannonsupgrades);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_UpgradeGcannons_Init () {
        gt_UpgradeGcannons = TriggerCreate("gt_UpgradeGcannons_Func");
        TriggerAddEventUnitAbility(gt_UpgradeGcannons, null, AbilityCommand("ForgeResearch", 2), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Shield absorber -5%
    //--------------------------------------------------------------------------------------------------
    bool gt_Shieldabsorber5_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        TextTagCreate((StringExternal("Param/Value/6AA1BD5F") + StringToText("")), 32, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsRegen, c_unitPropCurrent) + 125.0));
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropCurrent) >= 400000.0)) {
            // UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 524000.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 500000.0);
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropCurrent) + 100000.0));
        }
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) < 5.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 5.0);
            UnitBehaviorAdd(EventUnit(), "DivineArmor2222", EventUnit(), 1);
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) < 10.0)) {
                UnitBehaviorRemove(EventUnit(), "DivineArmor2222", 1);
                UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 10.0);
                UnitBehaviorAdd(EventUnit(), "DivineArmor22222", EventUnit(), 1);
            }
            else {
                if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) < 15.0)) {
                    UnitBehaviorRemove(EventUnit(), "DivineArmor22222", 1);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 15.0);
                    UnitBehaviorAdd(EventUnit(), "DivineArmor222222", EventUnit(), 1);
                }
                else {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) < 20.0)) {
                        UnitBehaviorRemove(EventUnit(), "DivineArmor222222", 1);
                        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 20.0);
                        UnitBehaviorAdd(EventUnit(), "DivineArmor222", EventUnit(), 1);
                    }
                    else {
                        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) < 25.0)) {
                            UnitBehaviorRemove(EventUnit(), "DivineArmor222", 1);
                            UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 25.0);
                            UnitBehaviorAdd(EventUnit(), "DivineArmor2223", EventUnit(), 1);
                            UnitAbilityShow(EventUnit(), "Armorabsorber5", false);
                        }
                        else {
                            UnitAbilityShow(EventUnit(), "Armorabsorber5", false);
                        }
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Shieldabsorber5_Init () {
        gt_Shieldabsorber5 = TriggerCreate("gt_Shieldabsorber5_Func");
        TriggerAddEventUnitAbility(gt_Shieldabsorber5, null, AbilityCommand("Armorabsorber5", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mysterious box
    //--------------------------------------------------------------------------------------------------
    bool gt_Mysteriousbox_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_dmg;
        int lv_damage;
        point lv_pointvisC3A9;
        int lv_resources;
        int lv_trC3A9sorvesp;
        int lv_killed;
        int lv_playernumbervar;

        // Variable Initialization
        lv_pointvisC3A9 = EventUnitTargetPoint();

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_playernumbervar = (lv_playernumbervar + 1);
        }
        PlayerGroupLoopEnd();
        if ((lv_playernumbervar == 1)) {
            libNtve_gf_CreateModelAtPoint("HighTemplarPsiStormModel", lv_pointvisC3A9);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, 0.0);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slow", EventUnit(), 1);
            }
            UnitGroupLoopEnd();
            lv_damage = RandomInt(99000, 524000);
            Wait(0.25, c_timeGame);
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            libNtve_gf_CreateModelAtPoint("BattlecruiserYamatoAttackImpact", lv_pointvisC3A9);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - lv_damage));
                }
                if ((UnitIsAlive(UnitGroupLoopCurrent()) == false)) {
                    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyVespene, c_unitPropCurrent)));
                }

            }
            UnitGroupLoopEnd();
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/544796C1") + IntToText(lv_damage))));
        }
        if ((lv_playernumbervar == 2)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/DD9D182A") + StringToText(""))));
            libNtve_gf_CreateModelAtPoint("SiegeBreakerSiegedAttackImpact", lv_pointvisC3A9);
            libNtve_gf_CreateModelAtPoint("HighTemplarPsiStormModel", lv_pointvisC3A9);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropCurrent) / 2.0));
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) / 2.0));
                }
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slow", EventUnit(), 1);
            }
            UnitGroupLoopEnd();
        }
        if ((lv_playernumbervar == 3)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/0539E8A7") + StringToText(""))));
            libNtve_gf_CreateModelAtPoint("SiegeBreakerSiegedAttackImpact", lv_pointvisC3A9);
            libNtve_gf_CreateModelAtPoint("HighTemplarPsiStormModel", lv_pointvisC3A9);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropCurrent) / 3.0));
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) / 3.0));
                }
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slow", EventUnit(), 1);
            }
            UnitGroupLoopEnd();
        }
        if ((lv_playernumbervar >= 4)) {
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/60A38609") + StringToText(""))));
            libNtve_gf_CreateModelAtPoint("SiegeBreakerSiegedAttackImpact", lv_pointvisC3A9);
            libNtve_gf_CreateModelAtPoint("HighTemplarPsiStormModel", lv_pointvisC3A9);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShields, c_unitPropCurrent) / 4.0));
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) / 4.0));
                }
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slow", EventUnit(), 1);
            }
            UnitGroupLoopEnd();
        }
        Wait(0.25, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Mysteriousbox_Init () {
        gt_Mysteriousbox = TriggerCreate("gt_Mysteriousbox_Func");
        TriggerAddEventUnitAbility(gt_Mysteriousbox, null, AbilityCommand("EMP", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Releasing hidden energy
    //--------------------------------------------------------------------------------------------------
    bool gt_Releasinghiddenenergy_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        libNtve_gf_UnitCreateFacingPoint(1, "Archon", 0, EventPlayer(), UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
        if (EventUnitAbility() == AbilityCommand("Releasinghiddenenergy2", 0)) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap DarkProtossArchon");
        }
        UnitBehaviorAddPlayer(UnitLastCreated(), gv_prestiges[gv_prestigeChoose[EventPlayer()]].lv_behavior, EventPlayer(), 1);
        libNtve_gf_ShowHideUnit(gv_probe[EventPlayer()], false);
        UnitClearSelection(EventPlayer());
        UnitSelect(UnitLastCreated(), EventPlayer(), true);
        // UnitSetPosition(gv_probe[EventPlayer()], UnitGetPosition(UnitLastCreated()), false);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AutoTurretTimedLife", EventPlayer(), 1);
        if (UnitHasBehavior2(UnitLastCreated(), "Destroyer") == true) {
            Wait(20.0, c_timeGame);
        }
        else {
            Wait(10.0, c_timeGame);
        }
        UnitRemove(UnitLastCreated());
        libNtve_gf_ShowHideUnit(gv_probe[EventPlayer()], true);
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_probe[EventPlayer()], EventPlayer(), true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Releasinghiddenenergy_Init () {
        gt_Releasinghiddenenergy = TriggerCreate("gt_Releasinghiddenenergy_Func");
        TriggerAddEventUnitAbility(gt_Releasinghiddenenergy, null, AbilityCommand("Releasinghiddenenergy", 0), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_Releasinghiddenenergy, null, AbilityCommand("Releasinghiddenenergy2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Nuclear BOMB
    //--------------------------------------------------------------------------------------------------
    bool gt_NuclearBOMB_Func (bool testConds, bool runActions) {
        // Variable Declarations
        point lv_pointvisC3A9;
        int lv_damage;

        // Variable Initialization
        lv_pointvisC3A9 = EventUnitTargetPoint();

        // Actions
        if (!runActions) {
            return true;
        }
        Wait(1.25, c_timeGame);
        lv_damage = (FixedToInt(UnitGetPropertyFixed(gv_probe[UnitGetOwner(EventUnit())], c_unitPropLevel, c_unitPropCurrent)) * 2000);
        if ((lv_damage > 400000)) {
            lv_damage = 400000;
        }
        Wait(0.25, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 8.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - lv_damage));
            }
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == false)) {
                PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyVespene, c_unitPropCurrent)));
            }
        }
        UnitGroupLoopEnd();
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/B9CAA809") + IntToText(lv_damage))));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_NuclearBOMB_Init () {
        gt_NuclearBOMB = TriggerCreate("gt_NuclearBOMB_Func");
        TriggerAddEventUnitAbility(gt_NuclearBOMB, null, AbilityCommand("OdinNuclearStrike", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Yamato BOMB
    //--------------------------------------------------------------------------------------------------
    bool gt_YamatoBOMB_Func (bool testConds, bool runActions) {
        // Variable Declarations
        point lv_pointvisC3A9;
        int lv_damage;

        // Variable Initialization
        lv_pointvisC3A9 = EventUnitTargetPoint();

        // Actions
        if (!runActions) {
            return true;
        }

        lv_damage = (FixedToInt(UnitGetPropertyFixed(gv_probe[UnitGetOwner(EventUnit())], c_unitPropLevel, c_unitPropCurrent)) * 1000);
        if ((lv_damage > 250000)) {
            lv_damage = 250000;
        }

        Wait(0.15, c_timeGame);
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionCircle(lv_pointvisC3A9, 4.0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (!(UnitGetType(UnitGroupLoopCurrent()) == "Godlisk")) {
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) - lv_damage));
            }
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == false)) {
                PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyVespene, c_unitPropCurrent)));
            }
        }
        UnitGroupLoopEnd();
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + (StringExternal("Param/Value/80AA7131") + IntToText(lv_damage))));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_YamatoBOMB_Init () {
        gt_YamatoBOMB = TriggerCreate("gt_YamatoBOMB_Func");
        TriggerAddEventUnitAbility(gt_YamatoBOMB, null, AbilityCommand("HyperionYamatoSpecial", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Improvement Final A-A
    //--------------------------------------------------------------------------------------------------
    bool gt_ImprovementFinalAA_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitAbilityShow(EventUnit(), "Improverabgeattack1", false);
        UnitWeaponRemove(EventUnit(), "LongboltMissile");
        UnitWeaponAdd(EventUnit(), "LongboltMissile2", "MissileTurret");
        UnitBehaviorAdd(EventUnit(), "4Armorpoint", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "2000Damage", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 1.200000 2.000000");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor {255,128,0 2.000000}");
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) >= 250000.0)) {
            UnitAbilityShow(EventUnit(), "25000HPmax", false);
            // UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 524000.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500000.0);
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + 250000.0));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ImprovementFinalAA_Init () {
        gt_ImprovementFinalAA = TriggerCreate("gt_ImprovementFinalAA_Func");
        TriggerAddEventUnitAbility(gt_ImprovementFinalAA, null, AbilityCommand("Improverabgeattack1", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Change color
    //--------------------------------------------------------------------------------------------------
    bool gt_Changecolor_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_colorvar[EventPlayer()] == 1)) {
            gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
            gv_colorChoose[EventPlayer()][1] = "SetTintColor {255,128,0 3.000000}";
            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
        }
        else {
            if ((gv_colorvar[EventPlayer()] == 2)) {
                gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                gv_colorChoose[EventPlayer()][1] = "SetTintColor {255,255,0 3.000000}";
                libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
            }
            else {
                if ((gv_colorvar[EventPlayer()] == 3)) {
                    gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                    gv_colorChoose[EventPlayer()][1] = "SetTintColor {255,0,0 2.000000}";
                    libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                    libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                }
                else {
                    if ((gv_colorvar[EventPlayer()] == 4)) {
                        gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                        gv_colorChoose[EventPlayer()][1] = "SetTintColor {0,128,0 3.000000}";
                        libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                        libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                    }
                    else {
                        if ((gv_colorvar[EventPlayer()] == 5)) {
                            gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                            gv_colorChoose[EventPlayer()][1] = "SetTintColor {0,255,0 2.000000}";
                            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                        }
                        else {
                            if ((gv_colorvar[EventPlayer()] == 6)) {
                                gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                                gv_colorChoose[EventPlayer()][1] = "SetTintColor {0,255,255 2.000000}";
                                libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                                libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                            }
                            else {
                                if ((gv_colorvar[EventPlayer()] == 7)) {
                                    gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                                    gv_colorChoose[EventPlayer()][1] = "SetTintColor {128,0,255 3.000000}";
                                    libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                                    libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                                }
                                else {
                                    if ((gv_colorvar[EventPlayer()] == 8)) {
                                        gv_colorvar[EventPlayer()] = (gv_colorvar[EventPlayer()] + 1);
                                        gv_colorChoose[EventPlayer()][1] = "SetTintColor {0,0,255 3.000000}";
                                        libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                                        libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                                    }
                                    else {
                                        if ((gv_colorvar[EventPlayer()] >= 9)) {
                                            gv_colorvar[EventPlayer()] = 1;
                                            gv_colorChoose[EventPlayer()][1] = "SetTintColor {255,255,255 2.000000}";
                                            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][2]);
                                            libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_colorChoose[EventPlayer()][1]);
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Changecolor_Init () {
        gt_Changecolor = TriggerCreate("gt_Changecolor_Func");
        TriggerAddEventUnitAbility(gt_Changecolor, null, AbilityCommand("Resetcolor", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Chrono cr????
    //--------------------------------------------------------------------------------------------------
    bool gt_ChronocrC3A9C3A9_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(200, 200, c_anchorTop, 0, 50, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_chronodialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_chronodialogue, 200, 200, c_anchorCenter, 0, 0, StringExternal("Param/Value/8129C3FA"), Color(100,100,100), false, 2.0);
        gv_chronolabel = DialogControlLastCreated();
        DialogSetVisible(gv_chronodialogue, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemStyle(gv_chronolabel, "CantinaLevelStart", PlayerGroupAll());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ChronocrC3A9C3A9_Init () {
        gt_ChronocrC3A9C3A9 = TriggerCreate("gt_ChronocrC3A9C3A9_Func");
        TriggerEnable(gt_ChronocrC3A9C3A9, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Chrono each 1 sec
    //--------------------------------------------------------------------------------------------------
    bool gt_Chronoeach1sec_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        libNtve_gf_SetDialogItemText(gv_chronolabel, FixedToText(gv_temps, 0), PlayerGroupAll());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Chronoeach1sec_Init () {
        gt_Chronoeach1sec = TriggerCreate("gt_Chronoeach1sec_Func");
        TriggerEnable(gt_Chronoeach1sec, false);
        TriggerAddEventTimePeriodic(gt_Chronoeach1sec, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: est cliqu??
    //--------------------------------------------------------------------------------------------------
    bool gt_estcliquC3A9_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetOwner(EventUnit()) != 15))) {
                return false;
            }

            if (!((UnitGetOwner(EventUnit()) != 0))) {
                return false;
            }

            if (!((gv_uI[EventPlayer()] != 0))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        DialogSetVisible(gv_ressourcesdialogue[1], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ressourcesdialogue[2], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ressourcesdialogue[3], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ressourcesdialogue[4], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ressourcesdialogue[5], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ressourcesdialogue[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_estcliquC3A9_Init () {
        gt_estcliquC3A9 = TriggerCreate("gt_estcliquC3A9_Func");
        TriggerAddEventUnitSelected(gt_estcliquC3A9, null, c_playerAny, true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Ressources panel create
    //--------------------------------------------------------------------------------------------------
    bool gt_Ressourcespanelcreate_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            DialogCreate(215, 99, c_anchorBottom, 250, 80, true);
            DialogSetImage(DialogLastCreated(), "Assets\\Textures\\ui_battlereport_blackbox.dds");
            gv_ressourcesdialogue[PlayerGroupLoopCurrent()] = DialogLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_ressourcesdialogue[PlayerGroupLoopCurrent()], 220, 50, c_anchorBottomRight, 0, 50, (StringExternal("DOCSTR_TableScoreMineralsCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender")), Color(28*100/255,167*100/255,234*100/255), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
            gv_labelbleu[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_ressourcesdialogue[PlayerGroupLoopCurrent()], 220, 50, c_anchorBottomRight, 0, 25, (StringExternal("DOCSTR_TableScoreVespeneCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender")), Color(0.00, 79.22, 0.00), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
            gv_labelvert[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_ressourcesdialogue[PlayerGroupLoopCurrent()], 220, 50, c_anchorBottomRight, 0, 0, (StringExternal("DOCSTR_TableScoreTerrazineCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender")), Color(86.27, 19.61, 86.27), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
            gv_labelplasma[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_ressourcesdialogue[PlayerGroupLoopCurrent()], 220, 50, c_anchorBottomRight, 0, -25, (StringExternal("DOCSTR_TableScoreCustomCurrent") + IntToText(PlayerGroupLoopCurrent()) + StringExternal("DOCSTR_TableScoreResourceAppender")), Color(100.00, 27.45, 27.45), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScore", PlayerGroupAll());
            gv_labelred[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        }
        PlayerGroupLoopEnd();
        // TriggerEnable(gt_Ressourceseach025sec, true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Ressourcespanelcreate_Init () {
        gt_Ressourcespanelcreate = TriggerCreate("gt_Ressourcespanelcreate_Func");
        TriggerEnable(gt_Ressourcespanelcreate, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Changer ress panel -UI
    //--------------------------------------------------------------------------------------------------
    bool gt_ChangerresspanelUI_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (EventPlayer() == gv_theThingPlayer) {
            return false;
        }

        if ((gv_uI[EventPlayer()] == 0)) {
            gv_uI[EventPlayer()] = 1;
            DialogSetPosition(gv_ressourcesdialogue[EventPlayer()], c_anchorBottom, 250, 80);
            DialogSetVisible(gv_ressourcesdialogue[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            if ((gv_uI[EventPlayer()] == 1)) {
                gv_uI[EventPlayer()] = 2;
                DialogSetPosition(gv_ressourcesdialogue[EventPlayer()], c_anchorLeft, 31, 220);
                DialogSetVisible(gv_ressourcesdialogue[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
                if ((gv_uI[EventPlayer()] == 2)) {
                    gv_uI[EventPlayer()] = 0;
                    DialogSetVisible(gv_ressourcesdialogue[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_ChangerresspanelUI_Init () {
        gt_ChangerresspanelUI = TriggerCreate("gt_ChangerresspanelUI_Func");
        TriggerAddEventChatMessage(gt_ChangerresspanelUI, c_playerAny, "-UI", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Resources each 0.25 sec
    //--------------------------------------------------------------------------------------------------
    bool gt_Ressourceseach025sec_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

    //     PlayerGroupLoopBegin(gv_probeGroupPlayer);
    //     for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
    //         libNtve_gf_SetDialogItemText(gv_labelbleu[PlayerGroupLoopCurrent()], IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals)), PlayerGroupAll());
    //         libNtve_gf_SetDialogItemText(gv_labelvert[PlayerGroupLoopCurrent()], IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene)), PlayerGroupAll());
    //         libNtve_gf_SetDialogItemText(gv_labelred[PlayerGroupLoopCurrent()], IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom)), PlayerGroupAll());
    //         libNtve_gf_SetDialogItemText(gv_labelplasma[PlayerGroupLoopCurrent()], IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine)), PlayerGroupAll());
    //         BoardItemSetText(gv_tableau, 2, (gv_playerLine[PlayerGroupLoopCurrent()]), IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals)));
    //         BoardItemSetText(gv_tableau, 3, (gv_playerLine[PlayerGroupLoopCurrent()]), IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene)));
    //         BoardItemSetText(gv_tableau, 4, (gv_playerLine[PlayerGroupLoopCurrent()]), IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine)));
    //         BoardItemSetText(gv_tableau, 5, (gv_playerLine[PlayerGroupLoopCurrent()]), IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom)));
    //     }
    //     PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Ressourceseach025sec_Init () {
        gt_Ressourceseach025sec = TriggerCreate("gt_Ressourceseach025sec_Func");
        TriggerEnable(gt_Ressourceseach025sec, false);
        // TriggerAddEventTimePeriodic(gt_Ressourceseach025sec, 0.25, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: -VOTEKICK show
    //--------------------------------------------------------------------------------------------------
    bool gt_VOTEKICKshow_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_x;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!((gv_variableAdC3A9jaVK[EventPlayer()] <= 0))) {
                return false;
            }

            if (!((gv_timevk == 60))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        gv_nbJoueursvar = PlayerGroupCount(gv_probeGroupPlayer);
        if (gv_nbJoueursvar < 3) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Cannot start votekick with less than 3 players in game"));
            return false;
        }
        gv_timevk = 59;
        gv_variableAdC3A9jaVK[EventPlayer()] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/687F9BDE")));
        IntLoopBegin(1, 6);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            gv_variablevotekick[IntLoopCurrent()] = 0;
        }
        IntLoopEnd();
        DialogSetVisible(gv_votekickDialogue, gv_probeGroupPlayer, true);
        if ((gv_timevk < 60)) {
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive)) {
                    libNtve_gf_CreateDialogItemButton(gv_votekickDialogue, 300, 50, c_anchorTop, 0, (60+(IntLoopCurrent()-1)*50), StringToText(""), PlayerName(IntLoopCurrent()), "");
                    gv_dialogButtonvotekick[IntLoopCurrent()] = DialogControlLastCreated();
                }
                else {
                    DialogControlDestroy(gv_dialogButtonvotekick[IntLoopCurrent()]);
                }
            }
            IntLoopEnd();
            IntLoopBegin(1, 59);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                Wait(1.0, c_timeGame);
                gv_timevk = (gv_timevk - 1);
                if ((gv_timevk <= 0)) {
                    DialogSetVisible(gv_votekickDialogue, gv_probeGroupPlayer, false);
                    gv_timevk = 60;
                }
                libNtve_gf_CreateDialogItemButton(gv_votekickDialogue, 300, 50, c_anchorTop, 0, 320, StringToText(""), (StringExternal("Param/Value/AB9A0981") + IntToText(gv_timevk)), "");
                gv_dialogButtonnobody = DialogControlLastCreated();
            }
            IntLoopEnd();
        }
        else {
            TriggerStop(gt_VOTEKICKshow);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VOTEKICKshow_Init () {
        gt_VOTEKICKshow = TriggerCreate("gt_VOTEKICKshow_Func");
        TriggerEnable(gt_VOTEKICKshow, false);
        TriggerAddEventChatMessage(gt_VOTEKICKshow, c_playerAny, "-VOTEKICK", true);
        TriggerAddEventChatMessage(gt_VOTEKICKshow, c_playerAny, "-VK", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: votekick Create
    //--------------------------------------------------------------------------------------------------
    bool gt_votekickCreate_Func (bool testConds, bool runActions) {
        int autoA0753961_ae;
        int autoA0753961_ai;

        // Variable Declarations
        int lv_i;
        int lv_j;

        // Variable Initialization

        // Actions
        if (!runActions) {
            return true;
        }

        autoA0753961_ae = 6;
        autoA0753961_ai = 1;
        lv_i = 1;
        for ( ; ( (autoA0753961_ai >= 0 && lv_i <= autoA0753961_ae) || (autoA0753961_ai <= 0 && lv_i >= autoA0753961_ae) ) ; lv_i += autoA0753961_ai ) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                DialogCreate(525, 450, c_anchorLeft, 0, 0, true);
                gv_votekickDialogue = DialogLastCreated();
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 480, 50, c_anchorTop, 0, 25, StringExternal("Param/Value/E0D708E3"), Color(100,100,100), true, 2.0);
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, (60+(IntLoopCurrent()-1)*50), StringToText(""), PlayerName(IntLoopCurrent()), "");
                    gv_dialogButtonvotekick[IntLoopCurrent()] = DialogControlLastCreated();
                }
                IntLoopEnd();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, 320, StringToText(""), (StringExternal("Param/Value/8F28582B") + IntToText(gv_timevk)), "");
                gv_dialogButtonnobody = DialogControlLastCreated();
            }

        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_votekickCreate_Init () {
        gt_votekickCreate = TriggerCreate("gt_votekickCreate_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: votekickdialog
    //--------------------------------------------------------------------------------------------------
    bool gt_votekickdialog_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_cODID;
        int lv_x;
        int lv_y;
        int lv_nBjoueursauvote;
        int lv_nbjoueursauvote2;

        // Variable Initialization
        lv_x = 44444;
        lv_y = 79999;

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_nBjoueursauvote = (lv_nBjoueursauvote + 1);
        }
        PlayerGroupLoopEnd();
        lv_nbjoueursauvote2 = (lv_nBjoueursauvote / 2);
        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((EventDialogControl() == gv_dialogButtonvotekick[IntLoopCurrent()])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/06D575E0") + PlayerName(IntLoopCurrent()))));
                DialogSetVisible(gv_votekickDialogue, PlayerGroupSingle(EventPlayer()), false);
                gv_variablevotekick[IntLoopCurrent()] = (gv_variablevotekick[IntLoopCurrent()] + 1);
                if ((gv_variablevotekick[IntLoopCurrent()] > lv_nbjoueursauvote2)) {
                    UnitGroupLoopBegin(UnitGroup(null, IntLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore34") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore342") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore3422") || (UnitGetType(UnitGroupLoopCurrent()) == "CyberneticsCore34222")) {
                            GameAddChargeUsed("Abil/UpgradeCore13224", -1.0);
                        }
                        if ((UnitGetType(UnitGroupLoopCurrent()) == "AutomatedRefinery2") && (UnitHasBehavior2(UnitGroupLoopCurrent(), "SpecializationOnMinerals4") == true)) {
                            GameAddChargeUsed("Abil/SpecializationonALLmineralsnightshift", -1.0);
                        }
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    GameOver(IntLoopCurrent(), c_gameOverDefeat, false, false);
                    DialogSetVisible(gv_votekickDialogue, gv_probeGroupPlayer, false);
                    gv_timevk = 60;
                    TriggerStop(gt_VOTEKICKshow);
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/9D7725CD") + FixedToText(gv_variablevotekick[IntLoopCurrent()], c_fixedPrecisionAny)));
                }
            }  
        }
        IntLoopEnd();

        if ((EventDialogControl() == gv_dialogButtonnobody)) {
            DialogSetVisible(gv_votekickDialogue, PlayerGroupSingle(EventPlayer()), false);
            gv_variablevotekick[6] = (gv_variablevotekick[6] + 1);
            if ((gv_variablevotekick[6] >= 3)) {
                DialogSetVisible(gv_votekickDialogue, gv_probeGroupPlayer, false);
                gv_timevk = 60;
                TriggerStop(gt_VOTEKICKshow);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_votekickdialog_Init () {
        gt_votekickdialog = TriggerCreate("gt_votekickdialog_Func");
        TriggerAddEventDialogControl(gt_votekickdialog, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Player List
    //--------------------------------------------------------------------------------------------------
    bool gt_PlayerList_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }


        IntLoopBegin(1, 5);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/3F4D3AE5") + PlayerName(IntLoopCurrent())));
                Wait(1.0, c_timeGame);
            }
        }
        IntLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_PlayerList_Init () {
        gt_PlayerList = TriggerCreate("gt_PlayerList_Func");
        TriggerAddEventChatMessage(gt_PlayerList, c_playerAny, "-playerlist", true);
        TriggerAddEventChatMessage(gt_PlayerList, c_playerAny, "-PL", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Boss Randomizer
    //--------------------------------------------------------------------------------------------------
    bool gt_BossRandomizer_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }
        gv_BossArray[1] = "InfestedAbomination";
        gv_BossArray[2] = "Lurker";
        gv_BossArray[3] = "Brutalisk";
        gv_BossArray[4] = "Hydralisk42";
        gv_BossArray[5] = "Brutalisk22";
        gv_BossArray[6] = "Ultralisk2";
        gv_BossArray[7] = "Infestor";
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_BossRandomizer_Init () {
        gt_BossRandomizer = TriggerCreate("gt_BossRandomizer_Func");
        TriggerEnable(gt_BossRandomizer, false);
    }

    // //--------------------------------------------------------------------------------------------------
    // // Trigger: Vote restart dialog
    // //--------------------------------------------------------------------------------------------------
    // bool gt_Voterestartdialog_Func (bool testConds, bool runActions) {
    //     // Variable Declarations
    //     int lv_nBjoueursauvote;
    //     int lv_nbjoueursauvote2;

    //     // Variable Initialization

    //     // Actions
    //     if (!runActions) {
    //         return true;
    //     }

    //     PlayerGroupLoopBegin(PlayerGroupActive());
    //     for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
    //         lv_nBjoueursauvote = (lv_nBjoueursauvote + 1);
    //     }
    //     PlayerGroupLoopEnd();
    //     lv_nbjoueursauvote2 = (lv_nBjoueursauvote / 2);
    //     if ((EventDialogControl() == gv_dialogButtonVoteYES)) {
    //         DialogSetVisible(gv_voterestartdialog, PlayerGroupSingle(EventPlayer()), false);
    //         UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/DF65955D")));
    //         gv_variablevoterestart = (gv_variablevoterestart + 1);
    //         UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((IntToText(gv_variablevoterestart) + StringExternal("Param/Value/B514A216")) + IntToText(lv_nBjoueursauvote)));
    //         if ((lv_nBjoueursauvote == 1)) {
    //             RestartGame(PlayerGroupAll());
    //         }

    //     }
    //     else {
    //         if ((EventDialogControl() == gv_dialogButtonVoteNO)) {
    //             DialogSetVisible(gv_voterestartdialog, PlayerGroupSingle(EventPlayer()), false);
    //             UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/9C175EFA")));
    //         }

    //     }
    //     if ((gv_variablevoterestart > lv_nbjoueursauvote2)) {
    //         UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/0C9F9938"));
    //         RestartGame(PlayerGroupAll());
    //         Wait(1.0, c_timeGame);
    //     }

    //     return true;
    // }

    // //--------------------------------------------------------------------------------------------------
    // void gt_Voterestartdialog_Init () {
    //     gt_Voterestartdialog = TriggerCreate("gt_Voterestartdialog_Func");
    //     TriggerAddEventDialogControl(gt_Voterestartdialog, c_playerAny, EventDialogControl(), c_triggerControlEventTypeClick);
    // }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Lets see
    //--------------------------------------------------------------------------------------------------
    bool gt_Reset_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_requirements;
        fixed lv_requirementslevel;
        int lv_dialogButtonVoteYES;
        int lv_dialogButtonVoteNO;
        int lv_voteresetprestigedialog;

        // Actions
        if (!runActions) {
            return true;
        }

        if (!gv_enabledreset) {
            return false;
        }

        if (gv_attempted_reset[EventPlayer()]) {
            return false;
        }

        lv_requirements = BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "WINS");
        lv_requirementslevel = BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "NIVO");
        if ((lv_requirements >= 50.0) && (lv_requirementslevel == 200.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/122547FA"));
            gv_attempted_reset[EventPlayer()] = true;
            TriggerEnable(gt_Resettrue, true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/146A2DB3"));
        }
        
        BankOptionSet(gv_playerbanks[EventPlayer()], c_bankOptionSignature, true);
        BankSave(gv_playerbanks[EventPlayer()]);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Reset_Init () {
        gt_Reset = TriggerCreate("gt_Reset_Func");
        TriggerAddEventChatMessage(gt_Reset, c_playerAny, "-reset", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Oh good one
    //--------------------------------------------------------------------------------------------------
    bool gt_Resettrue_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_requirements;
        fixed lv_requirementslevel;
        int lv_plevel;

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_isbanned[EventPlayer()]) {
            return false;
        }

        if (gv_prestigeused[EventPlayer()]) {
            return false;
        }

        if (!gv_attempted_reset[EventPlayer()]) {
            return false;
        }

        lv_requirements = BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "WINS");
        lv_requirementslevel = BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "NIVO");
        lv_plevel = BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR");
        if ((lv_requirements >= 50.0) && (lv_requirementslevel == 200.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/7C06F000"));
            gv_prestigeused[EventPlayer()] = true;
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "NIVO", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "NIVEXP", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "NIGHTMNHD", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "KILLED", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "NIGHTELITE", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "HEAL", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "WINS", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "NIGHTNMAR", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "VERSION", 6.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "EASY", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "XPNQ", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "XPNB", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "HL", 0.0);
            BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "HAL", 0.0);
            if (lv_plevel < 42) {
                BankValueSetFromFixed(gv_playerbanks[EventPlayer()], "Sec", "PR", ((BankValueGetAsFixed(gv_playerbanks[EventPlayer()], "Sec", "PR") + 39.0) * 1.2));
            }
            else {
                BankValueSetFromInt(gv_playerbanks[EventPlayer()], "Sec", "PHR2", (BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR2") + 1));
            }
            BankValueSetFromInt(gv_playerbanks[EventPlayer()], "Sec", "PHR", (BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR") + 1));
        }
        BankOptionSet(gv_playerbanks[EventPlayer()], c_bankOptionSignature, true);
        BankSave(gv_playerbanks[EventPlayer()]);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Resettrue_Init () {
        gt_Resettrue = TriggerCreate("gt_Resettrue_Func");
        TriggerEnable(gt_Resettrue, false);
        TriggerAddEventChatMessage(gt_Resettrue, c_playerAny, "-reset true", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statues init code
    //--------------------------------------------------------------------------------------------------
    bool gt_Statuesinitcode_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        TriggerExecute(gt_Statuesreset, true, false);
        TriggerEnable(gt_StatuetouchC3A91, true);
        TriggerEnable(gt_StatuetouchC3A92, true);
        TriggerEnable(gt_StatuetouchC3A93, true);
        TriggerEnable(gt_StatuetouchC3A94, true);
        gv_cODE1 = RandomInt(1, 4);
        if ((gv_cODE1 == 1)) {
            gv_cODE2 = RandomInt(2, 4);
            if ((gv_cODE2 == 2)) {
                gv_cODE3 = RandomInt(3, 4);
                if ((gv_cODE3 == 3)) {
                    gv_cODE4 = 4;
                }
                else {
                    gv_cODE4 = 3;
                }
            }
            else {
                if ((gv_cODE2 == 3)) {
                    gv_cODE3 = 2;
                    gv_cODE4 = 4;
                }
                else {
                    if ((gv_cODE2 == 4)) {
                        gv_cODE3 = RandomInt(2, 3);
                        if ((gv_cODE3 == 3)) {
                            gv_cODE4 = 2;
                        }
                        else {
                            gv_cODE4 = 3;
                        }
                    }
                    else {
                    }
                }
            }
        }
        else {
        }
        if ((gv_cODE1 == 2)) {
            gv_cODE2 = RandomInt(3, 4);
            if ((gv_cODE2 == 3)) {
                gv_cODE3 = 1;
                gv_cODE4 = 4;
            }
            else {
                gv_cODE3 = 3;
                gv_cODE4 = 1;
            }
        }
        else {
        }
        if ((gv_cODE1 == 3)) {
            gv_cODE2 = RandomInt(1, 2);
            if ((gv_cODE2 == 1)) {
                gv_cODE3 = 4;
                gv_cODE4 = 2;
            }
            else {
                gv_cODE3 = 1;
                gv_cODE4 = 4;
            }
        }
        else {
        }
        if ((gv_cODE1 == 4)) {
            gv_cODE2 = RandomInt(1, 3);
            if ((gv_cODE2 == 1)) {
                gv_cODE3 = 2;
                gv_cODE4 = 3;
            }
            else {
                if ((gv_cODE2 == 2)) {
                    gv_cODE3 = 3;
                    gv_cODE4 = 1;
                }
                else {
                    gv_cODE3 = 1;
                    gv_cODE4 = 2;
                }
            }
        }
        else {
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Statuesinitcode_Init () {
        gt_Statuesinitcode = TriggerCreate("gt_Statuesinitcode_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statues reset
    //--------------------------------------------------------------------------------------------------
    bool gt_Statuesreset_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(UnitFromId(30), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(31), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(85), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(86), c_unitPropLifePercent, 100.0);
        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStop");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor 255,255,255");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor 255,255,255");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor 255,255,255");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor 255,255,255");
        gv_cODEOK1 = 0;
        gv_cODEOK2 = 0;
        gv_cODEOK3 = 0;
        gv_cODEOK4 = 0;
        TriggerEnable(gt_StatuetouchC3A91, true);
        TriggerEnable(gt_StatuetouchC3A92, true);
        TriggerEnable(gt_StatuetouchC3A93, true);
        TriggerEnable(gt_StatuetouchC3A94, true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Statuesreset_Init () {
        gt_Statuesreset = TriggerCreate("gt_Statuesreset_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statues 1234 ok
    //--------------------------------------------------------------------------------------------------
    bool gt_Statues1234ok_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("DOCSTR_PortalsActivated"));
        // UnitCreate(1, "ProtossRelic", 0, 0, Point(80.0, 95.0), libNtve_gf_RandomAngle());
        TriggerExecute(gt_StatuesPortal, false, false);
        UnitSetPropertyFixed(UnitFromId(30), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(31), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(85), c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(UnitFromId(86), c_unitPropLifePercent, 100.0);
        libNtve_gf_UnitSetVariation(UnitFromId(30), "TempleStatue", 5, "");
        libNtve_gf_UnitSetVariation(UnitFromId(31), "TempleStatue", 5, "");
        libNtve_gf_UnitSetVariation(UnitFromId(85), "TempleStatue", 5, "");
        libNtve_gf_UnitSetVariation(UnitFromId(86), "TempleStatue", 5, "");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor 255,255,0 4.000000");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor 255,255,0 4.000000");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor 255,255,0 4.000000");
        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor 255,255,0 4.000000");
        gv_cODEOK1 = 0;
        gv_cODEOK2 = 0;
        gv_cODEOK3 = 0;
        gv_cODEOK4 = 0;
        TriggerEnable(gt_StatuetouchC3A91, false);
        TriggerEnable(gt_StatuetouchC3A92, false);
        TriggerEnable(gt_StatuetouchC3A93, false);
        TriggerEnable(gt_StatuetouchC3A94, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Statues1234ok_Init () {
        gt_Statues1234ok = TriggerCreate("gt_Statues1234ok_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statue touch?? 1
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuetouchC3A91_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(UnitFromId(30), c_unitPropLifePercent, 100.0);
        if ((gv_cODE1 == 1)) {
            gv_cODEOK1 = 1;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStart");
            libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor {0,255,0 4.000000}");
            TriggerEnable(gt_StatuetouchC3A91, false);
        }
        else {
            if ((gv_cODE1 == 2)) {
                if ((gv_cODEOK1 == 1)) {
                    gv_cODEOK2 = 1;
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor {0,255,0 4.000000}");
                    TriggerEnable(gt_StatuetouchC3A91, false);
                }
                else {
                    TriggerExecute(gt_Statuesreset, true, false);
                }
            }
            else {
                if ((gv_cODE1 == 3)) {
                    if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1)) {
                        gv_cODEOK3 = 1;
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStart");
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor {0,255,0 4.000000}");
                        TriggerEnable(gt_StatuetouchC3A91, false);
                    }
                    else {
                        TriggerExecute(gt_Statuesreset, true, false);
                    }
                }
                else {
                    if ((gv_cODE1 == 4)) {
                        if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1) && (gv_cODEOK3 == 1)) {
                            gv_cODEOK4 = 1;
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "HaloStart");
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(30), "SetTintColor {0,255,0 4.000000}");
                            TriggerEnable(gt_StatuetouchC3A91, false);
                            TriggerExecute(gt_Statues1234ok, true, false);
                        }
                        else {
                            TriggerExecute(gt_Statuesreset, true, false);
                        }
                    }
                    else {
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StatuetouchC3A91_Init () {
        gt_StatuetouchC3A91 = TriggerCreate("gt_StatuetouchC3A91_Func");
        TriggerEnable(gt_StatuetouchC3A91, false);
        TriggerAddEventUnitAttacked2(gt_StatuetouchC3A91, UnitRefFromUnit(UnitFromId(30)), null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statue touch?? 2
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuetouchC3A92_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(UnitFromId(31), c_unitPropLifePercent, 100.0);
        if ((gv_cODE2 == 1)) {
            gv_cODEOK1 = 1;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStart");
            libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor {0,255,0 4.000000}");
            TriggerEnable(gt_StatuetouchC3A92, false);
        }
        else {
            if ((gv_cODE2 == 2)) {
                if ((gv_cODEOK1 == 1)) {
                    gv_cODEOK2 = 1;
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor {0,255,0 4.000000}");
                    TriggerEnable(gt_StatuetouchC3A92, false);
                }
                else {
                    TriggerExecute(gt_Statuesreset, true, false);
                }
            }
            else {
                if ((gv_cODE2 == 3)) {
                    if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1)) {
                        gv_cODEOK3 = 1;
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStart");
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor {0,255,0 4.000000}");
                        TriggerEnable(gt_StatuetouchC3A92, false);
                    }
                    else {
                        TriggerExecute(gt_Statuesreset, true, false);
                    }
                }
                else {
                    if ((gv_cODE2 == 4)) {
                        if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1) && (gv_cODEOK3 == 1)) {
                            gv_cODEOK4 = 1;
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "HaloStart");
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(31), "SetTintColor {0,255,0 4.000000}");
                            TriggerEnable(gt_StatuetouchC3A92, false);
                            TriggerExecute(gt_Statues1234ok, true, false);
                        }
                        else {
                            TriggerExecute(gt_Statuesreset, true, false);
                        }
                    }
                    else {
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StatuetouchC3A92_Init () {
        gt_StatuetouchC3A92 = TriggerCreate("gt_StatuetouchC3A92_Func");
        TriggerEnable(gt_StatuetouchC3A92, false);
        TriggerAddEventUnitAttacked2(gt_StatuetouchC3A92, UnitRefFromUnit(UnitFromId(31)), null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statue touch?? 3
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuetouchC3A93_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(UnitFromId(85), c_unitPropLifePercent, 100.0);
        if ((gv_cODE3 == 1)) {
            gv_cODEOK1 = 1;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStart");
            libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor {0,255,0 4.000000}");
            TriggerEnable(gt_StatuetouchC3A93, false);
        }
        else {
            if ((gv_cODE3 == 2)) {
                if ((gv_cODEOK1 == 1)) {
                    gv_cODEOK2 = 1;
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor {0,255,0 4.000000}");
                    TriggerEnable(gt_StatuetouchC3A93, false);
                }
                else {
                    TriggerExecute(gt_Statuesreset, true, false);
                }
            }
            else {
                if ((gv_cODE3 == 3)) {
                    if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1)) {
                        gv_cODEOK3 = 1;
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStart");
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor {0,255,0 4.000000}");
                        TriggerEnable(gt_StatuetouchC3A93, false);
                    }
                    else {
                        TriggerExecute(gt_Statuesreset, true, false);
                    }
                }
                else {
                    if ((gv_cODE3 == 4)) {
                        if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1) && (gv_cODEOK3 == 1)) {
                            gv_cODEOK4 = 1;
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "HaloStart");
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(85), "SetTintColor {0,255,0 4.000000}");
                            TriggerEnable(gt_StatuetouchC3A93, false);
                            TriggerExecute(gt_Statues1234ok, true, false);
                        }
                        else {
                            TriggerExecute(gt_Statuesreset, true, false);
                        }
                    }
                    else {
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StatuetouchC3A93_Init () {
        gt_StatuetouchC3A93 = TriggerCreate("gt_StatuetouchC3A93_Func");
        TriggerEnable(gt_StatuetouchC3A93, false);
        TriggerAddEventUnitAttacked2(gt_StatuetouchC3A93, UnitRefFromUnit(UnitFromId(85)), null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statue touch?? 4
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuetouchC3A94_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(UnitFromId(86), c_unitPropLifePercent, 100.0);
        if ((gv_cODE4 == 1)) {
            gv_cODEOK1 = 1;
            libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStart");
            libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor {0,255,0 4.000000}");
            TriggerEnable(gt_StatuetouchC3A94, false);
        }
        else {
            if ((gv_cODE4 == 2)) {
                if ((gv_cODEOK1 == 1)) {
                    gv_cODEOK2 = 1;
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStart");
                    libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor {0,255,0 4.000000}");
                    TriggerEnable(gt_StatuetouchC3A94, false);
                }
                else {
                    TriggerExecute(gt_Statuesreset, true, false);
                }
            }
            else {
                if ((gv_cODE4 == 3)) {
                    if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1)) {
                        gv_cODEOK3 = 1;
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStart");
                        libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor {0,255,0 4.000000}");
                        TriggerEnable(gt_StatuetouchC3A94, false);
                    }
                    else {
                        TriggerExecute(gt_Statuesreset, true, false);
                    }
                }
                else {
                    if ((gv_cODE4 == 4)) {
                        if ((gv_cODEOK1 == 1) && (gv_cODEOK2 == 1) && (gv_cODEOK3 == 1)) {
                            gv_cODEOK4 = 1;
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "HaloStart");
                            libNtve_gf_SendActorMessageToUnit(UnitFromId(86), "SetTintColor {0,255,0 4.000000}");
                            TriggerEnable(gt_StatuetouchC3A94, false);
                            TriggerExecute(gt_Statues1234ok, true, false);
                        }
                        else {
                            TriggerExecute(gt_Statuesreset, true, false);
                        }
                    }
                    else {
                    }
                }
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_StatuetouchC3A94_Init () {
        gt_StatuetouchC3A94 = TriggerCreate("gt_StatuetouchC3A94_Func");
        TriggerEnable(gt_StatuetouchC3A94, false);
        TriggerAddEventUnitAttacked2(gt_StatuetouchC3A94, UnitRefFromUnit(UnitFromId(86)), null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Admin Money
    //--------------------------------------------------------------------------------------------------
    bool gt_AdminMoney_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 900000000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 900000000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 900000000);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 900000000);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AdminMoney_Init () {
        gt_AdminMoney = TriggerCreate("gt_AdminMoney_Func");
        TriggerAddEventChatMessage(gt_AdminMoney, c_playerAny, "-money", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Heal & Gens lvl 100
    //--------------------------------------------------------------------------------------------------
    bool gt_HealGens_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", 98);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", 98);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_HealGens_Init () {
        gt_HealGens = TriggerCreate("gt_HealGens_Func");
        TriggerAddEventChatMessage(gt_HealGens, c_playerAny, "-powah", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: AdminKick
    //--------------------------------------------------------------------------------------------------
    bool gt_AdminKick_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, UnitGroupSelected(PlayerGroupLoopCurrent()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((PlayerGroupLoopCurrent() == UnitGetOwner(UnitGroupLoopCurrent()))) {
                }
                else {
                    GameOver(UnitGetOwner(UnitGroupLoopCurrent()), c_gameOverDefeat, false, false);
                }
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AdminKick_Init () {
        gt_AdminKick = TriggerCreate("gt_AdminKick_Func");
        TriggerAddEventChatMessage(gt_AdminKick, c_playerAny, "-kick", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Reveal
    //--------------------------------------------------------------------------------------------------
    bool gt_Reveal_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        VisRevealArea(EventPlayer(), RegionEntireMap(), 0.0, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Reveal_Init () {
        gt_Reveal = TriggerCreate("gt_Reveal_Func");
        TriggerAddEventChatMessage(gt_Reveal, c_playerAny, "-reveal", true);
        TriggerAddEventChatMessage(gt_Reveal, c_playerAny, "-vision", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Swap (skin)
    //--------------------------------------------------------------------------------------------------
    bool gt_swap_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        string lv_value;
        string lv_placeholder;
        string lv_message;
        string lv_skin;


        // Actions
        if (!runActions) {
            return true;
        }

        if (!gv_isadmin[EventPlayer()]) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Command is no longer available and is replaced with newer '-skins' command."));
            return false;
        }
        lv_placeholder = "ModelSwap ";
        // lv_value = StringCase(StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))), false);
        lv_value = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));

        if ((lv_value == "default")) {
            if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            }
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_skins[gv_skinChoose[EventPlayer()]].lv_skin);
            return true;
        }


        if (lv_value == "purifiertemplar" || lv_value == "purifier templar") {
            if (gv_isadmin[EventPlayer()] == false) {return false;}
            if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            }
            lv_skin = "SwapPurifierTemplar";
        }
        if (lv_value == "carbot") {
            if (gv_isadmin[EventPlayer()] == false) {return false;}
            if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            }
            lv_skin = "SwapCarbot";
        }    
        if (lv_value == "god" || lv_value == "goddess") {
            if (gv_isadmin[EventPlayer()] == false) {return false;}
            lv_skin = "SwapDeathGoddess";
            UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
        }
        if ((lv_value == "zeratul") || (lv_value == "purifier zeratul")) {
            if ((gv_isadmin[EventPlayer()] != true)) {
                return false;
            }
            if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            }
            lv_skin = "PurifierZeratul";
        }
        if ((lv_value == "mecha")) {
            if ((gv_isadmin[EventPlayer()] != true)) {
                return false;
            }
            if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            }
            lv_skin = "SwapMecha";
        }


        if (lv_value == "36") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-3434195") || (PlayerHandle(EventPlayer()) == "2-S2-1-6816503") || (PlayerHandle(EventPlayer()) == "2-S2-1-2486203") || (PlayerHandle(EventPlayer()) == "2-S2-1-432065") || (PlayerHandle(EventPlayer()) == "2-S2-1-7741735") || (PlayerHandle(EventPlayer()) == "2-S2-1-4963743") || (PlayerHandle(EventPlayer()) == "2-S2-2-1747037") || (PlayerHandle(EventPlayer()) == "2-S2-1-809720") || (PlayerHandle(EventPlayer()) == "2-S2-1-4772117") || (PlayerHandle(EventPlayer()) == "2-S2-1-8777112") || (PlayerHandle(EventPlayer()) == "2-S2-1-3359187") || (PlayerHandle(EventPlayer()) == "2-S2-2-1135632") || (PlayerHandle(EventPlayer()) == "2-S2-1-2586937") || (PlayerHandle(EventPlayer()) == "2-S2-1-4349015") || (PlayerHandle(EventPlayer()) == "2-S2-1-7317868")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "Swap36";
            }
            else {return false;}
        }
        if (lv_value == "impossible" || lv_value == "imp") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-432065") || (PlayerHandle(EventPlayer()) == "2-S2-1-4996699") || (PlayerHandle(EventPlayer()) == "2-S2-1-4772117") || (PlayerHandle(EventPlayer()) == "2-S2-1-1030178") || (PlayerHandle(EventPlayer()) == "2-S2-1-1195224") || (PlayerHandle(EventPlayer()) == "2-S2-1-9983537") || (PlayerHandle(EventPlayer()) == "2-S2-1-8409975") || (PlayerHandle(EventPlayer()) == "2-S2-1-7794011") || (PlayerHandle(EventPlayer()) == "2-S2-1-2171888") || (PlayerHandle(EventPlayer()) == "2-S2-1-4262675") || (PlayerHandle(EventPlayer()) == "2-S2-1-3680336") || (PlayerHandle(EventPlayer()) == "2-S2-1-2429853") || (PlayerHandle(EventPlayer()) == "2-S2-1-482532") || (PlayerHandle(EventPlayer()) == "2-S2-1-3193295") || (PlayerHandle(EventPlayer()) == "2-S2-2-594823") || (PlayerHandle(EventPlayer()) == "2-S2-1-4963743") || (PlayerHandle(EventPlayer()) == "2-S2-1-4319543") || (PlayerHandle(EventPlayer()) == "2-S2-1-809720") || (PlayerHandle(EventPlayer()) == "2-S2-1-7410316") || (PlayerHandle(EventPlayer()) == "2-S2-1-4403442") || (PlayerHandle(EventPlayer()) == "2-S2-1-3434195") || (PlayerHandle(EventPlayer()) == "2-S2-1-5648271") || (PlayerHandle(EventPlayer()) == "2-S2-1-2586937") || (PlayerHandle(EventPlayer()) == "2-S2-1-7741735") || (PlayerHandle(EventPlayer()) == "2-S2-2-1789482")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapImpossible";
            }
            else {return false;}
        }
        

        if ((lv_value == "bmaks")) {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-2-1135632")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapBMaks";
            }
            else {return false;}
        }
        if ((lv_value == "karim") || (lv_value == "karimkarfax")) {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-8578992") || (PlayerHandle(EventPlayer()) == "2-S2-1-432065")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapKarim";
            }
            else {return false;}
        }
        if (lv_value == "raz" || lv_value == "razdva" || lv_value == "razdvaraz") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-2-594823")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapRazdvaraz";
            }
            else {return false;}
        }
        if (lv_value == "unari") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-9983537")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapUnari";
            }
            else {return false;}
        }
        if (lv_value == "punkt") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-3434195")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapPunkt";
            }
            else {return false;}
        }
        if (lv_value == "ananas") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-2486203")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapAnanas";
            }
            else {return false;}
        }
        if (lv_value == "hikari") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-4963743")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapHikari";
            }
            else {return false;}
        }
        if (lv_value == "serenity") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-7741735")) {
                // UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapSerenity";
            }
            else {return false;}
        }
        if (lv_value == "curino") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-4772117")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapCurino";
            }
            else {return false;}
        }
        if (lv_value == "wicked" || lv_value == "wickedwolf") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-4319543") || (PlayerHandle(EventPlayer()) == "1-S2-1-9668573")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapWickedWolf";
            }
            else {return false;}
        }
        if (lv_value == "wros" || lv_value == "wr0s") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-1030178")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "Swapwr0s";
            }
            else {return false;}
        }
        if (lv_value == "killer") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-4996699")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapKiller";
            }
            else {return false;}
        }
        if (lv_value == "kath" || lv_value == "katherine") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-809720")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapKath";
            }
            else {return false;}
        }
        if (lv_value == "erik" || lv_value == "magyarerik") {
            if ((gv_isadmin[EventPlayer()] == true) || (PlayerHandle(EventPlayer()) == "2-S2-1-3975502")) {
                if ((UnitHasBehavior2(gv_probe[EventPlayer()], "FlyerHeightBehavior") == true)) {
                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                }
                lv_skin = "SwapMagyarerik";
            }
            else {return false;}
        }

        // lv_message = lv_placeholder + lv_skin;
        lv_message = lv_placeholder + lv_value;
        libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], lv_message);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_swap_Init () {
        gt_swap = TriggerCreate("gt_swap_Func");
        TriggerAddEventChatMessage(gt_swap, c_playerAny, "-swap ", false);
        TriggerEnable(gt_swap, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Set Color
    //--------------------------------------------------------------------------------------------------
    bool gt_color_Func (bool testConds, bool runActions) {
        string lv_color;
        int lv_index;
        // Conditions

        // Actions
        if (!runActions) {
            return true;
        }

        if (!((BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR") >= 50) || gv_isadmin[EventPlayer()] || gv_DonateLevelPlayer[EventPlayer()] >= 1)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Requires Prestige 50+ to work."));
            return false;
        }

        if (EventChatMessage(true) == "-color") {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Available colors: white, red, blue, teal, purple, yellow, orange, green, light pink, violet, light grey, dark green, brown, light green, dark grey, pink, rainbow"));
            return true; 
        }
        
        lv_color = StringCase(StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false))), false);

        gv_rainbowColor[EventPlayer()] = false;

        if (lv_color == "white" || lv_color == "0") {
            lv_index = 0;
        }
        if (lv_color == "red" || lv_color == "1") {
            lv_index = 1;
        }
        if (lv_color == "blue" || lv_color == "2") {
            lv_index = 2;
        }
        if (lv_color == "teal" || lv_color == "3") {
            lv_index = 3;
        }
        if (lv_color == "purple" || lv_color == "4") {
            lv_index = 4;
        }
        if (lv_color == "yellow" || lv_color == "5") {
            lv_index = 5;
        }
        if (lv_color == "orange" || lv_color == "6") {
            lv_index = 6;
        }
        if (lv_color == "green" || lv_color == "7") {
            lv_index = 7;
        }
        if (lv_color == "light pink" || lv_color == "lightpink" || lv_color == "8") {
            lv_index = 8;
        }
        if (lv_color == "violet" || lv_color == "9") {
            lv_index = 9;
        }
        if (lv_color == "light grey" || lv_color == "lightgrey" || lv_color == "10") {
            lv_index = 10;
        }
        if (lv_color == "dark green" || lv_color == "darkgreen" || lv_color == "11") {
            lv_index = 11;
        }
        if (lv_color == "brown" || lv_color == "12") {
            lv_index = 12;
        }
        if (lv_color == "light green" || lv_color == "lightgreen" || lv_color == "13") {
            lv_index = 13;
        }
        if (lv_color == "dark grey" || lv_color == "darkgrey" || lv_color == "14") {
            lv_index = 14;
        }
        // if (lv_color == "white") {
        //     lv_index = 15;
        // }
        // if (lv_color == "pink" || lv_color == "16") {
        //     lv_index = 16;
        // }
        if (lv_color == "pink" || lv_color == "15") {
            lv_index = 16;
        }

        if (lv_color == "rainbow" || lv_color == "16") {
            gv_rainbowColor[EventPlayer()] = true;
            while ((gv_rainbowColor[EventPlayer()])) {
                PlayerSetColorIndex(EventPlayer(), 1, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 6, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 5, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 13, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 7, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 11, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 3, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 2, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 9, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 4, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 8, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 15, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 12, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 14, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 0, true);
                Wait(0.5, c_timeGame);
                PlayerSetColorIndex(EventPlayer(), 10, true);
                Wait(0.5, c_timeGame);
            }
        }

        if (lv_index == 0 && lv_color != "white" && lv_color != "0") {
            return false;
            // Preventing color from switching to White when its invalid value
        }

        PlayerSetColorIndex(EventPlayer(), lv_index, true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_color_Init () {
        gt_color = TriggerCreate("gt_color_Func");
        TriggerAddEventChatMessage(gt_color, c_playerAny, "-color ", false);
        TriggerAddEventChatMessage(gt_color, c_playerAny, "-color", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Commands - Zoom
    //--------------------------------------------------------------------------------------------------
    bool gt_CommandsZoom_Func(bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_zoomValue;

        // Actions
        if (!runActions) {
        return true;
        }

        lv_zoomValue = StringToInt(StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
        if ((lv_zoomValue > 100.0)) {
        lv_zoomValue = 100.0;
        }

        CameraSetValue(EventPlayer(), c_cameraValueDistance, lv_zoomValue, 2.0, -1, 10.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CommandsZoom_Init() {
    gt_CommandsZoom = TriggerCreate("gt_CommandsZoom_Func");
    TriggerAddEventChatMessage(gt_CommandsZoom, c_playerAny, "-zoom ", false);
    TriggerEnable(gt_CommandsZoom, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Save Zoom
    //--------------------------------------------------------------------------------------------------
    bool gt_savezoom_Func(bool testConds, bool runActions) {
        int lv_zoominput;
        // Actions
        if (!runActions) {
        return true;
        }

        lv_zoominput = StringToInt(StringSub(EventChatMessage(false), 11, StringLength(EventChatMessage(false))));
        if (lv_zoominput < 1 || lv_zoominput > 100) {return false;}
        BankValueSetFromInt(gv_playerbanks[EventPlayer()], "Sec", "zvl", lv_zoominput);
        BankSave(gv_playerbanks[EventPlayer()]);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("DOCSTR_savezoommessage"));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_savezoom_Init() {
    gt_savezoom = TriggerCreate("gt_savezoom_Func");
    TriggerAddEventChatMessage(gt_savezoom, c_playerAny, "-savezoom ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Auto zoom start
    //--------------------------------------------------------------------------------------------------
    bool gt_autozoom_Func(bool testConds, bool runActions) {
        int lv_zoom;
        // Actions
        if (!runActions) {
        return true;
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (BankKeyExists(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "zvl")) {
                lv_zoom = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "zvl");
                if (lv_zoom > 1 && lv_zoom < 100) {
                    CameraSetValue(PlayerGroupLoopCurrent(), c_cameraValueDistance, lv_zoom, 2.0, -1, 10.0);
                }
            }
        }
        PlayerGroupLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_autozoom_Init() {
        gt_autozoom = TriggerCreate("gt_autozoom_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Admin rights
    //--------------------------------------------------------------------------------------------------
    bool gt_admin_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gv_isadmin[PlayerGroupLoopCurrent()] = true;
        }
        PlayerGroupLoopEnd();
        TriggerEnable(gt_commands, true);
        TechTreeRequirementsEnable(1, false);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "SandBoxGameModedummy", 1);
        PlayerAddChargeUsed(1, "Crystalquantum", -4.0);
        GameAddChargeUsed("Abil/RemoveMinerals", -95.0);
        GameAddChargeUsed("Abil/OdinWreckage", -1.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_admin_Init() {
    gt_admin = TriggerCreate("gt_admin_Func");
    TriggerEnable(gt_admin, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Restore stats
    //--------------------------------------------------------------------------------------------------
    bool gt_restore_Func(bool testConds, bool runActions) {
        // Variable Declarations
        int lv_i;
        int lv_pl;
        int lv_nnl;
        int lv_ne;
        int lv_nne;
        int lv_lvl;
        int lv_w;
        int lv_iau;
        int lv_prl;
        int lv_hel;
        int lv_rww;
        int lv_rwc;
        int lv_rwh;
        int lv_rwg;
        int lv_rwe;
        int lv_nim;
        int lv_lwo;
        fixed lv_pri;
        string auto26222686_ai;
        string auto26222686_ae;
        string auto25222696_ae;
        int auto25222686_ai;
        fixed auto25322686_ai;
        fixed auto25322686_ae;
        fixed auto25232686_ai;
        fixed auto25232686_ae;
        fixed auto25223686_ai;
        fixed auto25223686_ae;
        fixed auto25233686_ai;
        fixed auto25233686_ae;
        fixed auto25333686_ai;
        fixed lv_shield;
        fixed lv_heal;
        fixed lv_healval;

        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
        return true;
        }

        auto26222686_ai = "i";
        auto25322686_ai = ModF(86.2, SquareRoot(5))*47.42;
        auto25322686_ae = Round(ModF(1229.3, SquareRoot(auto25322686_ai))*ModF(1229.3, SquareRoot(5)))*2;
        auto25232686_ai = Round(ModF(9139.1, SquareRoot(auto25322686_ae))*ModF(9139.1, SquareRoot(auto25322686_ai))*ModF(9139.1, SquareRoot(5)))*2;
        auto25232686_ae = Round(ModF(12213.1, SquareRoot(auto25232686_ai))*ModF(12213.1, SquareRoot(auto25322686_ae))*ModF(12213.1, SquareRoot(auto25322686_ai))*ModF(12213.1, SquareRoot(5)))*2;
        auto25223686_ai = Round(ModF(113.1, SquareRoot(auto25232686_ae))*ModF(113.1, SquareRoot(auto25232686_ai))*ModF(113.1, SquareRoot(auto25322686_ae))*ModF(113.1, SquareRoot(auto25322686_ai))*ModF(113.1, SquareRoot(5)))*2;
        auto25223686_ae = Round(ModF(678.9, SquareRoot(auto25223686_ai))*ModF(678.9, SquareRoot(auto25232686_ae))*ModF(678.9, SquareRoot(auto25232686_ai))*ModF(678.9, SquareRoot(auto25322686_ae))*ModF(678.9, SquareRoot(auto25322686_ai))*ModF(678.9, SquareRoot(5)))*2;
        auto25233686_ai = Round(ModF(422.4, SquareRoot(auto25223686_ae))*ModF(422.4, SquareRoot(auto25223686_ai))*ModF(422.4, SquareRoot(auto25232686_ae))*ModF(422.4, SquareRoot(auto25232686_ai))*ModF(422.4, SquareRoot(auto25322686_ae))*ModF(422.4, SquareRoot(auto25322686_ai))*ModF(422.4, SquareRoot(5)))*2;
        auto25233686_ae = Round(ModF(397.4, SquareRoot(auto25233686_ai))*ModF(397.4, SquareRoot(auto25223686_ae))*ModF(397.4, SquareRoot(auto25223686_ai))*ModF(397.4, SquareRoot(auto25232686_ae))*ModF(397.4, SquareRoot(auto25232686_ai))*ModF(397.4, SquareRoot(auto25322686_ae))*ModF(397.4, SquareRoot(auto25322686_ai))*ModF(397.4, SquareRoot(5)))*2;
        auto25333686_ai = Round(ModF(333.22, SquareRoot(auto25233686_ai))*ModF(333.22, SquareRoot(auto25223686_ae))*ModF(333.22, SquareRoot(auto25223686_ai))*ModF(333.22, SquareRoot(auto25232686_ae))*ModF(333.22, SquareRoot(auto25232686_ai))*ModF(333.22, SquareRoot(auto25322686_ae))*ModF(333.22, SquareRoot(auto25322686_ai))*ModF(333.22, SquareRoot(5)));
        lv_pri = 0;
        lv_pl = StringToInt(StringWord(EventChatMessage(false), 2));
        lv_nnl = StringToInt(StringWord(EventChatMessage(false), 3));
        lv_ne = StringToInt(StringWord(EventChatMessage(false), 4));
        lv_nne = StringToInt(StringWord(EventChatMessage(false), 5));
        lv_hel = StringToInt(StringWord(EventChatMessage(false), 6));
        lv_nim = StringToInt(StringWord(EventChatMessage(false), 7));
        lv_lvl = StringToInt(StringWord(EventChatMessage(false), 8));
        lv_w = StringToInt(StringWord(EventChatMessage(false), 9));
        lv_iau = StringToInt(StringWord(EventChatMessage(false), 10));
        lv_prl = StringToInt(StringWord(EventChatMessage(false), 11));
        lv_rww = StringToInt(StringWord(EventChatMessage(false), 12));
        lv_rwc = StringToInt(StringWord(EventChatMessage(false), 13));
        lv_rwh = StringToInt(StringWord(EventChatMessage(false), 14));
        lv_rwg = StringToInt(StringWord(EventChatMessage(false), 15));
        lv_rwe = StringToInt(StringWord(EventChatMessage(false), 16));
        lv_lwo = StringToInt(StringWord(EventChatMessage(false), 17));

        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "NIGHTMNHD", lv_nnl);
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "KILLED", (lv_nnl * 4788.0));
        auto25222696_ae = "m";

        if ((lv_ne > 0)) {
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "NIGHTELITE", IntToFixed(lv_ne));
        if ((lv_ne >= 35)) {
            BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "HEAL", IntToFixed(21634));
        }
        }

        if ((lv_nne > 0)) {
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "NIGHTNMAR", IntToFixed(lv_nne));
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "XPNB", IntToFixed(lv_nne * 1655));
        if ((lv_nne >= 35)) {
            BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "XPNQ", IntToFixed(59120));
        }
        }

        if ((lv_hel > 0)) {
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "HL", IntToFixed(lv_hel));
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "HAL", IntToFixed(lv_hel * 1631));
        if ((lv_hel >= 35)) {
            BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "HLO", IntToFixed(163*155));
        }
        }

        if (lv_nim > 0) {
            auto26222686_ae = "s";
            auto25222686_ai = StringToInt(StringReplace(PlayerHandle(lv_pl), "0", 1, 8));
            lv_shield = AbsF(ModF(IntToFixed(lv_nim)*10.0, AbsF(ModF((Round((ModF((ModF(auto25322686_ai, SquareRoot(5.0)) * ModF(86, SquareRoot(8.0)) * ModF(auto25322686_ae, SquareRoot(3.0)) * ModF(auto25232686_ai, SquareRoot(2.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(6.0)) * ModF(auto25233686_ai, SquareRoot(7.0)) * ModF(auto25233686_ae, SquareRoot(5.0)) * ModF(auto25333686_ai, SquareRoot(3.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(3.0)) * 10000.0)) / 1000.0), 10.0))));
            BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", (auto26222686_ai+auto25222696_ae), (lv_shield+IntToFixed(lv_nim*10)));
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", (auto26222686_ai+auto25222696_ae+auto26222686_ae), lv_nim);
            if ((lv_nim >= 35)) {
                lv_heal = (Round((ModF((ModF(auto25322686_ai, SquareRoot(3.0)) * ModF(86, SquareRoot(2.0)) * ModF(auto25322686_ae, SquareRoot(7.0)) * ModF(auto25232686_ai, SquareRoot(8.0)) * ModF(auto25232686_ae, SquareRoot(17.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
                BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", (auto26222686_ai+auto26222686_ae), ((lv_shield/lv_heal)*3.4));
            }
        }

        if ((lv_prl > 0)) {
        BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "PHR", lv_prl);
        if (lv_prl > 42) {
            for (lv_i = 0; lv_i < 42; lv_i += 1) {
                lv_pri += 39.0;
                lv_pri = lv_pri * 1.2;
            }
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "PHR2", (lv_prl-42));
        }
        else {
            for (lv_i = 0; lv_i < lv_prl; lv_i += 1) {
                lv_pri += 39.0;
                lv_pri = lv_pri * 1.2;
            }
        }      
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "PR", lv_pri);
        }

        if (lv_iau == 1) {
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "ZUHIB", (9322.0 * 13.0));
        }

        if (lv_rww > 0) {
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "a", (lv_rww * 4));
        }
        if (lv_rwc > 0) {
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "e", (lv_rwc * 7));
        }
        if (lv_rwh > 0) {
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "i", (lv_rwh * 9));
        }
        if (lv_rwg > 0) {
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "f", (lv_rwg * 5));
        }
        if (lv_rwe > 0) {
            BankValueSetFromInt(gv_playerbanks[lv_pl], "Sec", "o", (lv_rwe * 13));
        }

        if (lv_lwo > 0) {
            lv_healval = (Round((ModF((ModF(auto25322686_ai, SquareRoot(2.0)) * ModF(86, SquareRoot(3.0)) * ModF(auto25322686_ae, SquareRoot(6.0)) * ModF(auto25232686_ai, SquareRoot(5.0)) * ModF(auto25232686_ae, SquareRoot(7.0)) * ModF(auto25223686_ai, SquareRoot(3.0)) * ModF(auto25223686_ae, SquareRoot(2.0)) * ModF(auto25233686_ai, SquareRoot(5.0)) * ModF(auto25233686_ae, SquareRoot(11.0)) * ModF(auto25333686_ai, SquareRoot(5.0)) * ModF(auto25222686_ai, 65537.0)), SquareRoot(10.0)) * 10000.0)) / 1000.0);
            BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", (auto26222686_ai+auto25222696_ae+"val"), lv_healval);
        }

        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "NIVO", lv_lvl);
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "NIVEXP", (lv_lvl * 1224.0));
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "WINS", lv_w);
        BankValueSetFromFixed(gv_playerbanks[lv_pl], "Sec", "VERSION", 6.0);
        BankOptionSet(gv_playerbanks[lv_pl], c_bankOptionSignature, true);
        BankSave(gv_playerbanks[lv_pl]);

        // e.g.
        // -restore 2 35 35 35 35 35 200 399 1 40 999 999 999 999 999 1
        // -restore Player Normal Elite Nightmare Hell Impossible LVL Wins isUnlockedAscended PrestigeLvl WallWins CannonWins HealerWins GeneratorWins EconomyWins isUnlockedPurifier
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_restore_Init() {
    gt_restore = TriggerCreate("gt_restore_Func");
    TriggerAddEventChatMessage(gt_restore, c_playerAny, "-restore ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Boss pool
    //--------------------------------------------------------------------------------------------------
    bool gt_bosspool_Func(bool testConds, bool runActions) {
        int init_i;

        // Actions
        if (!runActions) {
        return true;
        }

        gv_zergBoss[1] = "InfestedCivilian2";
        gv_zergBoss[2] = "InfestedCivilian2";
        gv_zergBoss[3] = "InfestedCivilian2";
        gv_zergBoss[4] = "Queen";
        gv_zergBoss[5] = "Hydralisk42";
        gv_zergBoss[6] = "Hydralisk42";
        gv_zergBoss[7] = "Hydralisk42";
        gv_zergBoss[8] = "Hydralisk42";
        gv_zergBoss[9] = "Hydralisk42";
        gv_zergBoss[10] = "Hydralisk42";
        gv_zergBoss[11] = "Hydralisk42";
        gv_zergBoss[12] = "Infestor";
        gv_zergBoss[13] = "Infestor";
        gv_zergBoss[14] = "InfestedAbomination";
        gv_zergBoss[15] = "InfestedAbomination";
        gv_zergBoss[16] = "InfestedAbomination";
        gv_zergBoss[17] = "Lurker";
        gv_zergBoss[19] = "Brutalisk";
        gv_zergBoss[20] = "Brutalisk";
        gv_zergBoss[21] = "Brutalisk";
        gv_zergBoss[22] = "Ultralisk2";
        gv_zergBoss[23] = "Ultralisk2";
        gv_zergBoss[25] = "Brutalisk22";

        if ((gv_damageBonus < 0)) {
            gv_zergBoss[1] = "InfestedCivilian2";
            gv_zergBoss[2] = "InfestedCivilian2";
            gv_zergBoss[3] = "InfestedCivilian2";
            gv_zergBoss[4] = "Queen";
            gv_zergBoss[5] = "InfestedCivilian2";
            gv_zergBoss[6] = "InfestedCivilian2";
            gv_zergBoss[7] = "InfestedCivilian2";
            gv_zergBoss[8] = "Queen";
            gv_zergBoss[9] = "InfestedCivilian2";
            gv_zergBoss[10] = "Hydralisk42";
            gv_zergBoss[11] = "Hydralisk42";
            gv_zergBoss[12] = "Hydralisk42";
            gv_zergBoss[13] = "Hydralisk42";
            gv_zergBoss[14] = "Infestor";
            gv_zergBoss[15] = "InfestedAbomination";
            gv_zergBoss[16] = "InfestedAbomination";
            gv_zergBoss[17] = "Lurker";
            gv_zergBoss[18] = "Brutalisk";
            gv_zergBoss[19] = "Brutalisk";
            gv_zergBoss[20] = "Ultralisk2";
            gv_zergBoss[22] = "Brutalisk22";
        }

        if ((gv_damageBonus >= 20)) {
            gv_zergBoss[1] = "Queen";
            gv_zergBoss[2] = "Hydralisk42";
            gv_zergBoss[3] = "Hydralisk42";
            gv_zergBoss[4] = "Hydralisk42";
            gv_zergBoss[5] = "Hydralisk42";
            gv_zergBoss[6] = "Hydralisk42";
            gv_zergBoss[7] = "Hydralisk42";
            gv_zergBoss[8] = "Hydralisk42";
            gv_zergBoss[9] = "Infestor";
            gv_zergBoss[10] = "Infestor";
            gv_zergBoss[11] = "InfestedAbomination";
            gv_zergBoss[12] = "InfestedAbomination";
            gv_zergBoss[13] = "InfestedAbomination";
            gv_zergBoss[14] = "InfestedAbomination";
            gv_zergBoss[15] = "Lurker";
            gv_zergBoss[16] = "Brutalisk";
            gv_zergBoss[17] = "Brutalisk";
            gv_zergBoss[18] = "Brutalisk";
            gv_zergBoss[19] = "Ultralisk2";
            gv_zergBoss[20] = "Ultralisk2";
            gv_zergBoss[22] = "Brutalisk22";
        }

        if ((gv_variablevotebossrandomizer == 5)) {
            gv_BossArray[1] = "InfestedAbomination";
            gv_BossArray[2] = "Lurker";
            gv_BossArray[3] = "Brutalisk";
            gv_BossArray[4] = "Hydralisk42";
            gv_BossArray[5] = "Brutalisk22";
            gv_BossArray[6] = "Ultralisk2";
            gv_BossArray[7] = "Infestor";
            for (init_i = 1; init_i <= 22; init_i += 1) {
                gv_zergBoss[init_i] = gv_BossArray[(RandomInt(1, 7))];
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_bosspool_Init() {
    gt_bosspool = TriggerCreate("gt_bosspool_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Nightmare mutalisks (early mutas)
    //--------------------------------------------------------------------------------------------------
    bool gt_nightmaremutas_Func(bool testConds, bool runActions) {
        int lv_startingday;
        unitgroup lv_group;
        int lv_UnitGroupIterator;
        unit auto792A11611_var;

        unit lv_testUnit;
        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_damageBonus >= 40) {
            lv_startingday = 4;
        }
        else {
            lv_startingday = 5;
        }
        if ((gv_dayNb > lv_startingday) && (gv_dayNb < 17) && (gv_day == false)) {
            UnitCreate(3, "Mutalisk", 0, 15, RegionRandomPoint(RegionFromId(3)), libNtve_gf_RandomAngle());
            lv_group = UnitLastCreatedGroup();
            lv_UnitGroupIterator = UnitGroupCount(lv_group, c_unitCountAll);
            for (;; lv_UnitGroupIterator -= 1) {
                auto792A11611_var = UnitGroupUnitFromEnd(lv_group, lv_UnitGroupIterator);
                if (auto792A11611_var == null) { break; }
                // libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Probe", "", "", 15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_testUnit = UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                // UnitIssueOrder(auto792A11611_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_testUnit)), c_orderQueueReplace);
                UnitIssueOrder(auto792A11611_var, OrderTargetingUnit(AbilityCommand("attack", 0), lv_testUnit), c_orderQueueReplace);

                // UnitIssueOrder(auto792A11611_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(gv_zergPlayer, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_nightmaremutas_Init() {
    gt_nightmaremutas = TriggerCreate("gt_nightmaremutas_Func");
    TriggerAddEventTimePeriodic(gt_nightmaremutas, 11.00, c_timeGame);
    TriggerEnable(gt_nightmaremutas, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Show/HideSpecialEffects
    //--------------------------------------------------------------------------------------------------
    bool lib1_gt_ShowHideSpecialEffects_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        // Actions
        if (!runActions) {
            return true;
        }

        if (EventPlayer() != UnitGetOwner(EventUnit())) {
            return false;
        }
        
        if ((lib1_gv_specialEffects[UnitGetOwner(EventUnit())] == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ShowHideSpecialEffects", 0);
            lib1_gv_specialEffects[UnitGetOwner(EventUnit())] = false;
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ShowHideSpecialEffects", 1);
            lib1_gv_specialEffects[UnitGetOwner(EventUnit())] = true;
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void lib1_gt_ShowHideSpecialEffects_Init () {
        lib1_gt_ShowHideSpecialEffects = TriggerCreate("lib1_gt_ShowHideSpecialEffects_Func");
        TriggerAddEventUnitOrder(lib1_gt_ShowHideSpecialEffects, null, AbilityCommand("Miscellaneous", 1));
        TriggerAddEventUnitOrder(lib1_gt_ShowHideSpecialEffects, null, AbilityCommand("Miscellaneous", 0));
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Initiate Hide Global Effects Vote
    //--------------------------------------------------------------------------------------------------
    bool lib1_gt_InitiateHideGlobalEffectsVote_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_remainingtime;

        // Automatic Variable Declarations
        playergroup auto6DEB94A6_g;
        int auto6DEB94A6_var;
        const int autoE79505B2_n = 15;
        int autoE79505B2_i;
        playergroup auto3CCD9D83_g;
        int auto3CCD9D83_var;
        const int auto6CEA6CAB_ae = 2;
        int auto6CEA6CAB_var;
        playergroup auto67AE87D7_g;
        int auto67AE87D7_var;

        // Variable Initialization
        lv_remainingtime = 15;

        // Actions
        if (!runActions) {
            return true;
        }

        lib1_gv_votes = true;
        lv_remainingtime = 15;
        lib1_gv_votesTotal[1] = 0;
        lib1_gv_votesTotal[2] = 0;
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/AAF0257E")));
        DialogCreate(428, 155, c_anchorTopLeft, 0, 666, true);
        lib1_gv_voteDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 37, 37, StringExternal("Param/Value/2C267899"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gv_voteButton[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 184, 50, c_anchorTopLeft, 28, 77, StringToText(""), StringExternal("Param/Value/A7C5D8AD"), "");
        lib1_gv_voteButton[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 184, 50, c_anchorTopLeft, 216, 77, StringToText(""), StringExternal("Param/Value/440736E3"), "");
        lib1_gv_voteButton[2] = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), gv_probeGroupPlayer, true);
        auto6DEB94A6_g = gv_probeGroupPlayer;
        auto6DEB94A6_var = -1;
        while (true) {
            auto6DEB94A6_var = PlayerGroupNextPlayer(auto6DEB94A6_g, auto6DEB94A6_var);
            if (auto6DEB94A6_var < 0) { break; }
            lib1_gv_selectedVote[auto6DEB94A6_var] = 0;
        }
        for (autoE79505B2_i = 1; autoE79505B2_i <= autoE79505B2_n; autoE79505B2_i += 1) {
            libNtve_gf_SetDialogItemText(lib1_gv_voteButton[3], (StringExternal("Param/Value/2C267899") + IntToText(lv_remainingtime)), gv_probeGroupPlayer);
            lv_remainingtime -= 1;
            Wait(1.0, c_timeGame);
        }
        auto3CCD9D83_g = gv_probeGroupPlayer;
        auto3CCD9D83_var = -1;
        while (true) {
            auto3CCD9D83_var = PlayerGroupNextPlayer(auto3CCD9D83_g, auto3CCD9D83_var);
            if (auto3CCD9D83_var < 0) { break; }
            auto6CEA6CAB_var = 1;
            for ( ; auto6CEA6CAB_var <= auto6CEA6CAB_ae; auto6CEA6CAB_var += 1 ) {
                if ((lib1_gv_selectedVote[auto3CCD9D83_var] == auto6CEA6CAB_var)) {
                    lib1_gv_votesTotal[auto6CEA6CAB_var] += 1;
                }

            }
        }
        if ((lib1_gv_votesTotal[1] > lib1_gv_votesTotal[2])) {
            auto67AE87D7_g = gv_probeGroupPlayer;
            auto67AE87D7_var = -1;
            while (true) {
                auto67AE87D7_var = PlayerGroupNextPlayer(auto67AE87D7_g, auto67AE87D7_var);
                if (auto67AE87D7_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto67AE87D7_var, "HideEffectsGlobal", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(auto67AE87D7_var, "ShowHideSpecialEffects", 0);
                lib1_gv_specialEffects[auto67AE87D7_var] = false;
            }
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ShowHideSpecialEffects", 0);
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("Param/Value/A4A866BB"));
            gv_hiddeneffects = true;
        }

        DialogDestroy(lib1_gv_voteDialog);
        lib1_gv_votes = false;
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void lib1_gt_InitiateHideGlobalEffectsVote_Init () {
        lib1_gt_InitiateHideGlobalEffectsVote = TriggerCreate("lib1_gt_InitiateHideGlobalEffectsVote_Func");
        TriggerAddEventUnitOrder(lib1_gt_InitiateHideGlobalEffectsVote, null, AbilityCommand("Miscellaneous", 5));
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Vote Buttons
    //--------------------------------------------------------------------------------------------------
    bool lib1_gt_VoteButtons_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int[3] lv_votesdisplay;

        // Automatic Variable Declarations
        const int autoC26003EA_ae = 2;
        int autoC26003EA_var;
        playergroup autoE9EBD8D1_g;
        int autoE9EBD8D1_var;
        const int autoD59AC830_ae = 2;
        int autoD59AC830_var;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (!(((PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer()) == true) && ((lib1_gv_voteButton[1] == EventDialogControl()) || (lib1_gv_voteButton[2] == EventDialogControl()))))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_votesdisplay[1] = 0;
        lv_votesdisplay[2] = 0;
        autoC26003EA_var = 1;
        for ( ; autoC26003EA_var <= autoC26003EA_ae; autoC26003EA_var += 1 ) {
            if ((EventDialogControl() == lib1_gv_voteButton[autoC26003EA_var])) {
                lib1_gv_selectedVote[EventPlayer()] = autoC26003EA_var;
            }

        }
        autoE9EBD8D1_g = gv_probeGroupPlayer;
        autoE9EBD8D1_var = -1;
        while (true) {
            autoE9EBD8D1_var = PlayerGroupNextPlayer(autoE9EBD8D1_g, autoE9EBD8D1_var);
            if (autoE9EBD8D1_var < 0) { break; }
            autoD59AC830_var = 1;
            for ( ; autoD59AC830_var <= autoD59AC830_ae; autoD59AC830_var += 1 ) {
                if ((lib1_gv_selectedVote[autoE9EBD8D1_var] == autoD59AC830_var)) {
                    lv_votesdisplay[autoD59AC830_var] += 1;
                }

            }
        }
        libNtve_gf_SetDialogItemText(lib1_gv_voteButton[1], (StringExternal("Param/Value/9AA3C631") + IntToText(lv_votesdisplay[1]) + StringExternal("Param/Value/8FA5FE4F")), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib1_gv_voteButton[2], (StringExternal("Param/Value/8DDFBFC4") + IntToText(lv_votesdisplay[2]) + StringExternal("Param/Value/6B105F3B")), PlayerGroupAll());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void lib1_gt_VoteButtons_Init () {
        lib1_gt_VoteButtons = TriggerCreate("lib1_gt_VoteButtons_Func");
        TriggerAddEventDialogControl(lib1_gt_VoteButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Maar 36 (final hybrids secret night)
    //--------------------------------------------------------------------------------------------------
    bool gt_maar36_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        IntLoopBegin(1, gv_dayNb);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            Wait(5.0, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Maar", 0, 15, RegionRandomPoint(RegionFromId(1)));
            UnitBehaviorAdd(UnitLastCreated(), "InvulnerabilityShield", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "20Damage22", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "4Armorpoint", UnitLastCreated(), (gv_dayNb * 2));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(RandomFixed(35.0, 125.0), RandomFixed(35.0, 125.0))), c_orderQueueReplace);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.000000}");
        }
        IntLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_maar36_Init () {
        gt_maar36 = TriggerCreate("gt_maar36_Func");
        TriggerEnable(gt_maar36, false);
        TriggerAddEventTimePeriodic(gt_maar36, 25.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Timer 36+
    //--------------------------------------------------------------------------------------------------
    bool gt_timer36_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        DialogCreate(200, 200, c_anchorTop, 0, 150, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_chronodialogue = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_chronodialogue, 200, 200, c_anchorCenter, 0, 0, StringExternal("Param/Value/8129C3FA"), Color(100,100,100), false, 2.0);
        gv_chronolabel = DialogControlLastCreated();
        DialogSetVisible(gv_chronodialogue, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemStyle(gv_chronolabel, "CantinaLevelStart", PlayerGroupAll());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_timer36_Init () {
        gt_timer36 = TriggerCreate("gt_timer36_Func");
        TriggerEnable(gt_timer36, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Illusion Hallucinator
    //--------------------------------------------------------------------------------------------------
    bool gt_Hallucinator_Func(bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;

        // Automatic Variable Declarations
        // Variable Initialization
        for (init_i = 0; init_i <= 6; init_i += 1) {
            gv_hallucinationprobegroup[init_i] = UnitGroup("Probe2", (init_i), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        // Actions
        if (!runActions) {
        return true;
        }

        IntLoopBegin(26, 29);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupUnit(gv_hallucinationprobegroup[EventPlayer()], 1), IntLoopCurrent(), (UnitGetPropertyFixed(gv_probe[EventPlayer()], IntLoopCurrent(), c_unitPropCurrent) + 0.0));
        }
        IntLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Hallucinator_Init() {
    gt_Hallucinator = TriggerCreate("gt_Hallucinator_Func");
    TriggerEnable(gt_Hallucinator, false);
    TriggerAddEventPlayerEffectUsed(gt_Hallucinator, c_playerAny, "HallucinationCreateProbe");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInside_Func(bool testConds, bool runActions) {
        // Variable Declarations
        int init_i;
        int lv_quantity;
        color[5] lv_color;

        // Variable Initialization
        lv_color[0] = Color(0.00, 255.00, 255.00);
        lv_color[1] = Color(0.00, 255.00, 0.00);
        lv_color[2] = Color(255.00, 0.00, 255.00);
        lv_color[3] = Color(255.00, 0.00, 0.00);
        lv_color[4] = Color(255.00, 255.00, 0.00);

        if (!runActions) {
            return true;
        }
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitHasBehavior2(gv_probe[PlayerGroupLoopCurrent()], "CoreInside") == true)) {
                lv_quantity = UnitGetPropertyInt(gv_probe[PlayerGroupLoopCurrent()], c_unitPropKillXP, c_unitPropCurrent);
                if (lv_quantity > 11) {
                    IntLoopBegin(0, 3);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if ((gv_corecolor[PlayerGroupLoopCurrent()] == IntLoopCurrent()+1)) {
                            PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), IntLoopCurrent(), c_playerPropOperAdd, FixedToInt(lv_quantity));
                        }
                    }
                    IntLoopEnd();
                    if ((gv_corecolor[PlayerGroupLoopCurrent()] == 5)) {
                        PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_quantity));
                        PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropCustom, c_playerPropOperAdd, FixedToInt(lv_quantity));
                        PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropTerrazine, c_playerPropOperAdd, FixedToInt(lv_quantity));
                        PlayerModifyPropertyInt((PlayerGroupLoopCurrent()), c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_quantity));
                    }
                    TextTagCreate((StringExternal("Param/Value/41070280") + IntToText(lv_quantity)), 35, PointWithOffset(UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), 0.0, 0.0), 1.0, true, false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, lv_color[gv_corecolor[PlayerGroupLoopCurrent()]-1]);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
                    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
                    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);  
                }
            }
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInside_Init() {
    gt_CoreInside = TriggerCreate("gt_CoreInside_Func");
    TriggerEnable(gt_CoreInside, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside T1
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideT1_Func(bool testConds, bool runActions) {
        // Variable Initialization
        fixed lv_quantity;

        // Actions
        if (!runActions) {
        return true;
        }

        lv_quantity = 32.0;

        UnitAbilityShow(EventUnit(), "BlueCoreT1", false);
        UnitAbilityShow(EventUnit(), "GreenCoreT1", false);
        UnitAbilityShow(EventUnit(), "PurpleCoreT1", false);
        UnitAbilityShow(EventUnit(), "RedCoreT1", false);
        UnitAbilityShow(EventUnit(), "GreatestCoreT1", false);
        // libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CoreInsidedummyshowpassive", 0);
        // UnitAbilityShow(EventUnit(), "SellCoreInsideAll", true);

        Wait(0.0625, c_timeGame);
        if (EventUnitAbility() == AbilityCommand("BlueCoreT1", 0)) {
            gv_corecolor[UnitGetOwner(EventUnit())] = 1;
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 0,0,255");
            UnitAbilityAdd(EventUnit(), "BlueCoreT2");
        }

        if (EventUnitAbility() == AbilityCommand("GreenCoreT1", 0)) {
            gv_corecolor[UnitGetOwner(EventUnit())] = 2;
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 0,255,0");
            UnitAbilityAdd(EventUnit(), "GreenCoreT2");
        }

        if (EventUnitAbility() == AbilityCommand("PurpleCoreT1", 0)) {
            gv_corecolor[UnitGetOwner(EventUnit())] = 3;
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,0,255");
            UnitAbilityAdd(EventUnit(), "PurpleCoreT2");
        }

        if (EventUnitAbility() == AbilityCommand("RedCoreT1", 0)) {
            gv_corecolor[UnitGetOwner(EventUnit())] = 4;
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,0,0");
            UnitAbilityAdd(EventUnit(), "RedCoreT2");
        }

        if (EventUnitAbility() == AbilityCommand("GreatestCoreT1", 0)) {
            gv_corecolor[UnitGetOwner(EventUnit())] = 5;
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,255,0");
            UnitAbilityAdd(EventUnit(), "GreatestCoreT2");
            lv_quantity = 16.0;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, lv_quantity);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideT1_Init() {
    gt_CoreInsideT1 = TriggerCreate("gt_CoreInsideT1_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideT1, null, AbilityCommand("BlueCoreT1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT1, null, AbilityCommand("GreenCoreT1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT1, null, AbilityCommand("PurpleCoreT1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT1, null, AbilityCommand("RedCoreT1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT1, null, AbilityCommand("GreatestCoreT1", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside T2
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideT2_Func(bool testConds, bool runActions) {
        // Variable Initialization
        fixed lv_quantity;

        // Actions
        if (!runActions) {
        return true;
        }

        lv_quantity = 128.0;

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 1) {
            UnitAbilityRemove(EventUnit(), "BlueCoreT2");
            UnitAbilityAdd(EventUnit(), "BlueCoreT3");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 2) {
            UnitAbilityRemove(EventUnit(), "GreenCoreT2");
            UnitAbilityAdd(EventUnit(), "GreenCoreT3");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 3) {
            UnitAbilityRemove(EventUnit(), "PurpleCoreT2");
            UnitAbilityAdd(EventUnit(), "PurpleCoreT3");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 4) {
            UnitAbilityRemove(EventUnit(), "RedCoreT2");
            UnitAbilityAdd(EventUnit(), "RedCoreT3");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5) {
            UnitAbilityRemove(EventUnit(), "GreatestCoreT2");
            UnitAbilityAdd(EventUnit(), "GreatestCoreT3");
            lv_quantity = 64.0;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, lv_quantity);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideT2_Init() {
    gt_CoreInsideT2 = TriggerCreate("gt_CoreInsideT2_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideT2, null, AbilityCommand("BlueCoreT2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT2, null, AbilityCommand("GreenCoreT2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT2, null, AbilityCommand("PurpleCoreT2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT2, null, AbilityCommand("RedCoreT2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT2, null, AbilityCommand("GreatestCoreT2", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside T3
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideT3_Func(bool testConds, bool runActions) {
        // Variable Initialization
        fixed lv_quantity;

        // Actions
        if (!runActions) {
        return true;
        }

        lv_quantity = 512.0;

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 1) {
            UnitAbilityRemove(EventUnit(), "BlueCoreT3");
            UnitAbilityAdd(EventUnit(), "BlueCoreT4");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 2) {
            UnitAbilityRemove(EventUnit(), "GreenCoreT3");
            UnitAbilityAdd(EventUnit(), "GreenCoreT4");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 3) {
            UnitAbilityRemove(EventUnit(), "PurpleCoreT3");
            UnitAbilityAdd(EventUnit(), "PurpleCoreT4");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 4) {
            UnitAbilityRemove(EventUnit(), "RedCoreT3");
            UnitAbilityAdd(EventUnit(), "RedCoreT4");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5) {
            UnitAbilityRemove(EventUnit(), "GreatestCoreT3");
            UnitAbilityAdd(EventUnit(), "GreatestCoreT4");
            lv_quantity = 256.0;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, lv_quantity);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideT3_Init() {
    gt_CoreInsideT3 = TriggerCreate("gt_CoreInsideT3_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideT3, null, AbilityCommand("BlueCoreT3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT3, null, AbilityCommand("GreenCoreT3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT3, null, AbilityCommand("PurpleCoreT3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT3, null, AbilityCommand("RedCoreT3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT3, null, AbilityCommand("GreatestCoreT3", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside T4
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideT4_Func(bool testConds, bool runActions) {
        // Variable Initialization
        fixed lv_quantity;

        // Actions
        if (!runActions) {
        return true;
        }

        lv_quantity = 2048.0;

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 1) {
            UnitAbilityRemove(EventUnit(), "BlueCoreT4");
            UnitAbilityAdd(EventUnit(), "BlueCoreT5");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 2) {
            UnitAbilityRemove(EventUnit(), "GreenCoreT4");
            UnitAbilityAdd(EventUnit(), "GreenCoreT5");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 3) {
            UnitAbilityRemove(EventUnit(), "PurpleCoreT4");
            UnitAbilityAdd(EventUnit(), "PurpleCoreT5");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 4) {
            UnitAbilityRemove(EventUnit(), "RedCoreT4");
            UnitAbilityAdd(EventUnit(), "RedCoreT5");
        }
        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5) {
            UnitAbilityRemove(EventUnit(), "GreatestCoreT4");
            UnitAbilityAdd(EventUnit(), "GreatestCoreT5");
            lv_quantity = 1024.0;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, lv_quantity);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideT4_Init() {
    gt_CoreInsideT4 = TriggerCreate("gt_CoreInsideT4_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideT4, null, AbilityCommand("BlueCoreT4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT4, null, AbilityCommand("GreenCoreT4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT4, null, AbilityCommand("PurpleCoreT4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT4, null, AbilityCommand("RedCoreT4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT4, null, AbilityCommand("GreatestCoreT4", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside T5
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideT5_Func(bool testConds, bool runActions) {
        // Variable Initialization
        fixed lv_quantity;

        // Actions
        if (!runActions) {
        return true;
        }


        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5) {
            lv_quantity = 2000.0;
        }
        else {
            lv_quantity = 4000.0;
        }

        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) == 1024.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) == 2048.0)) {
            UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, lv_quantity);
        }
        else {
            UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, (UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) + lv_quantity));
        }

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5) {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) >= 12000.0)) {
                UnitAbilityRemove(EventUnit(), "GreatestCoreT5");
            }
        }
        else {
            if ((UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) >= 24000.0)) {
                if (gv_corecolor[UnitGetOwner(EventUnit())] == 1) {
                    UnitAbilityRemove(EventUnit(), "BlueCoreT5");
                }
                if (gv_corecolor[UnitGetOwner(EventUnit())] == 2) {
                    UnitAbilityRemove(EventUnit(), "GreenCoreT5");
                }
                if (gv_corecolor[UnitGetOwner(EventUnit())] == 3) {
                    UnitAbilityRemove(EventUnit(), "PurpleCoreT5");
                }
                if (gv_corecolor[UnitGetOwner(EventUnit())] == 4) {
                    UnitAbilityRemove(EventUnit(), "RedCoreT5");
                }
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideT5_Init() {
    gt_CoreInsideT5 = TriggerCreate("gt_CoreInsideT5_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideT5, null, AbilityCommand("BlueCoreT5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT5, null, AbilityCommand("GreenCoreT5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT5, null, AbilityCommand("PurpleCoreT5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT5, null, AbilityCommand("RedCoreT5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideT5, null, AbilityCommand("GreatestCoreT5", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Core Inside Salvage
    //--------------------------------------------------------------------------------------------------
    bool gt_CoreInsideSalvage_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropKillXP, 1.0);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 100,100,100");

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 1) {
            UnitAbilityRemove(EventUnit(), "BlueCoreT2");
            UnitAbilityRemove(EventUnit(), "BlueCoreT3");
            UnitAbilityRemove(EventUnit(), "BlueCoreT4");
            UnitAbilityRemove(EventUnit(), "BlueCoreT5");
        }

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 2) {
            UnitAbilityRemove(EventUnit(), "GreenCoreT2");
            UnitAbilityRemove(EventUnit(), "GreenCoreT3");
            UnitAbilityRemove(EventUnit(), "GreenCoreT4");
            UnitAbilityRemove(EventUnit(), "GreenCoreT5");
        }

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 3)  {
            UnitAbilityRemove(EventUnit(), "PurpleCoreT2");
            UnitAbilityRemove(EventUnit(), "PurpleCoreT3");
            UnitAbilityRemove(EventUnit(), "PurpleCoreT4");
            UnitAbilityRemove(EventUnit(), "PurpleCoreT5");
        }

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 4)  {
            UnitAbilityRemove(EventUnit(), "RedCoreT2");
            UnitAbilityRemove(EventUnit(), "RedCoreT3");
            UnitAbilityRemove(EventUnit(), "RedCoreT4");
            UnitAbilityRemove(EventUnit(), "RedCoreT5");
        }

        if (gv_corecolor[UnitGetOwner(EventUnit())] == 5)  {
            UnitAbilityRemove(EventUnit(), "GreatestCoreT2");
            UnitAbilityRemove(EventUnit(), "GreatestCoreT3");
            UnitAbilityRemove(EventUnit(), "GreatestCoreT4");
            UnitAbilityRemove(EventUnit(), "GreatestCoreT5");
        }

        gv_corecolor[UnitGetOwner(EventUnit())] = 0;
        UnitAbilityShow(EventUnit(), "BlueCoreT1", true);
        UnitAbilityShow(EventUnit(), "GreenCoreT1", true);
        UnitAbilityShow(EventUnit(), "PurpleCoreT1", true);
        UnitAbilityShow(EventUnit(), "RedCoreT1", true);
        UnitAbilityShow(EventUnit(), "GreatestCoreT1", true);
        UnitAbilityShow(EventUnit(), "SellCoreInsideAll", false);
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "CoreInsidedummyshowpassive", 1);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CoreInsideSalvage_Init() {
    gt_CoreInsideSalvage = TriggerCreate("gt_CoreInsideSalvage_Func");
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInside", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInside2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInside3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInside4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInside5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CoreInsideSalvage, null, AbilityCommand("SellCoreInsideAll", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Give role (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxgiverole_Func(bool testConds, bool runActions) {
        string lv_role;
        int lv_rolenumber;
        int lv_player;
        color[8] lv_color;
        string[8] lv_rolename;
        int init_i;
        bool lv_valid;

        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
        return true;
        }

        lv_rolenumber = 0;
        lv_valid = false;

        lv_rolename[0] = "None";
        lv_rolename[1] = "Wall role";
        lv_rolename[2] = "Cannon role";
        lv_rolename[3] = "Healer role";
        lv_rolename[4] = "Generator role";
        lv_rolename[5] = "Economy role";
        lv_rolename[6] = "Mercenary role";
        lv_rolename[7] = "All roles (Mercenary excluded)";
        lv_color[0] = Color(128.0, 128.0, 128.0);
        lv_color[1] = Color(0.0, 255.0, 255.0);
        lv_color[2] = Color(255.0, 0.0, 255.0);
        lv_color[3] = Color(0.0, 255.0, 0.0);
        lv_color[4] = Color(255.0, 0.0, 0.0);
        lv_color[5] = Color(255.0, 255.0, 0.0);
        lv_color[6] = Color(100.0, 100.0, 0.0);
        lv_color[7] = Color(100.0, 100.0, 50.0);
        lv_role = StringCase(StringSub(EventChatMessage(false), 11, StringLength(EventChatMessage(false))), false);
        if (lv_role == "0" || lv_role == "none") {
            lv_rolenumber = 0;
            lv_role = "none";
            lv_valid = true;
        }
        if (lv_role == "1" || lv_role == "wall" || lv_role == "waller") {
            lv_rolenumber = 1;
        }
        if (lv_role == "2" || lv_role == "cannon" || lv_role == "cannons") {
            lv_rolenumber = 2;
        }
        if (lv_role == "3" || lv_role == "healer" || lv_role == "healers" || lv_role == "heal" || lv_role == "heals") {
            lv_rolenumber = 3;
        }
        if (lv_role == "4" || lv_role == "generator" || lv_role == "generators" || lv_role == "gen" || lv_role == "gens") {
            lv_rolenumber = 4;
        }
        if (lv_role == "5" || lv_role == "economy") {
            lv_rolenumber = 5;
        }
        if (lv_role == "6" || lv_role == "mercenary") {
            lv_rolenumber = 6;
        } 
        if (lv_role == "7" || lv_role == "all") {
            lv_rolenumber = 7;
        } 
        if (lv_rolenumber == 6 && gv_DonateLevelPlayer[EventPlayer()] < 4) { // lower than hell Donor attempting to access Mercenary role
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Mercenary role is only available for Donors"));
            return false;
        }
        if ((lv_rolenumber == 0 && lv_valid == false)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Incorrect typing. Try again"));
            return false;
        }
        // Turn off all role bonuses before applying needed role bonuses
        for (init_i = 1; init_i <= gv_totalroles; init_i += 1) {
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[init_i][IntLoopCurrent()].lv_upgrade), 0);
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[init_i][IntLoopCurrent()].lv_role), 0);
                UnitBehaviorRemove(gv_probe[EventPlayer()], gv_roles[init_i][IntLoopCurrent()].lv_role, 1);
            }
            IntLoopEnd();
        }
        // Dual Masteries turned off
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[1][6].lv_upgrade, 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[3][6].lv_upgrade, 0);
        // Reset Faction choice for Mercenary role
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "JunkDogsFaction", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MirasMaraudersFaction", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "RaynorsRaidersFaction", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpecOpsFaction", 0);

        if ((lv_rolenumber == 0) || (lv_rolenumber == gv_totalroles+1)) { // "All" roles is always last after all roles
            gv_roleChoose[EventPlayer()] = 0;
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "PrestigeLevelsUpgradesAllRolesDummy", 1);
        }
        else {
            gv_roleChoose[EventPlayer()] = lv_rolenumber;
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "PrestigeLevelsUpgradesAllRolesDummy", 0);
        }

        if (lv_rolenumber == gv_totalroles+1) { // condition for All roles (except Mercenary, intentionally excluded for better sandbox gameplay)
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[1][6].lv_upgrade, 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[3][6].lv_upgrade, 1);
            for (init_i = 1; init_i <= 5; init_i += 1) {
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[init_i][IntLoopCurrent()].lv_upgrade), 1);
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[init_i][IntLoopCurrent()].lv_role), 1);
                }
                IntLoopEnd();
            }
            UnitBehaviorAdd(gv_probe[EventPlayer()], gv_roles[1][1].lv_role, gv_probe[EventPlayer()], 1);
            UnitBehaviorAdd(gv_probe[EventPlayer()], gv_roles[2][1].lv_role, gv_probe[EventPlayer()], 1);
            UnitBehaviorAdd(gv_probe[EventPlayer()], gv_roles[3][1].lv_role, gv_probe[EventPlayer()], 1);
            UnitBehaviorAdd(gv_probe[EventPlayer()], gv_roles[4][1].lv_role, gv_probe[EventPlayer()], 1);
            UnitBehaviorAdd(gv_probe[EventPlayer()], gv_roles[5][1].lv_role, gv_probe[EventPlayer()], 1);
        }
        else { // else - do for selected role
            // m6 for wall or cannon role
            if (lv_rolenumber == 1 || lv_rolenumber == 2) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[1][6].lv_upgrade, 1);
            }
            // m6 for healer or gen role
            if (lv_rolenumber == 3 || lv_rolenumber == 4) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), gv_roles[3][6].lv_upgrade, 1);
            }
            UnitBehaviorAddPlayer(gv_probe[EventPlayer()], gv_roles[lv_rolenumber][1].lv_role, EventPlayer(), 1);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[lv_rolenumber][1].lv_role), 1);
            IntLoopBegin(1, 5); // Unlock 1-5 Masteries
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), (gv_roles[lv_rolenumber][IntLoopCurrent()].lv_upgrade), 1);
            }
            IntLoopEnd();
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Role is set to ") + TextWithColor(StringToText(lv_rolename[lv_rolenumber]), lv_color[lv_rolenumber]));

        TriggerExecute(gt_prestigelevelupgrades, false, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxgiverole_Init() {
    gt_sandboxgiverole = TriggerCreate("gt_sandboxgiverole_Func");
    TriggerAddEventChatMessage(gt_sandboxgiverole, c_playerAny, "-set role ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: SandBox set general upgrade
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxset_Func(bool testConds, bool runActions) {
        string lv_check1;
        string lv_check2;
        int lv_level;
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
        return true;
        }
        lv_check1 = StringCase(StringSub(EventChatMessage(false), 6, 12), false);
        if (lv_check1 == "generat") {
            lv_check2 = StringSub(EventChatMessage(false), 13, 15);
            if (lv_check2 == "ors") {
                lv_level = StringToInt(StringSub(EventChatMessage(false), 17, StringLength(EventChatMessage(false))));
                if (lv_level >= 0 && lv_level < 100) {
                    gv_nBgeneratorsupgrades = lv_level;
                    libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", lv_level);
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/8AF3758A") + IntToText(lv_level));
                }
            }
        }
        if (lv_check1 == "cannons") {
            lv_level = StringToInt(StringSub(EventChatMessage(false), 14, StringLength(EventChatMessage(false))));
            if (lv_level >= 0 && lv_level < 51) {
                gv_nBCannonsupgrades = lv_level;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel3", lv_level);
                libNtve_gf_SetUpgradeLevelForPlayer(1, "Improvethesiegecannons", lv_level);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9736A18D") + IntToText(lv_level));
            }
        }
        if (lv_check1 == "healers") {
            lv_level = StringToInt(StringSub(EventChatMessage(false), 14, StringLength(EventChatMessage(false))));
            if (lv_level >= 0 && lv_level < 100) {
                gv_nBhealersupgrades = lv_level;
                libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", lv_level);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/84D54F5F") + IntToText(lv_level));
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxset_Init() {
    gt_sandboxset = TriggerCreate("gt_sandboxset_Func");
    TriggerAddEventChatMessage(gt_sandboxset, c_playerAny, "-set ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Give role upgrades (roleplay role play)
    //--------------------------------------------------------------------------------------------------
    bool gt_roleplay_Func(bool testConds, bool runActions) {
        int lv_random;
        int lv_ww;
        int lv_cwz;
        int lv_hws;
        int lv_gnw;
        int lv_eow;
        string lv_choice;
        color lv_color;
        // Actions
        if (!runActions) {
        return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (gv_isbanned[PlayerGroupLoopCurrent()] == false) {
                if ((gv_roleChoose[PlayerGroupLoopCurrent()] == 0) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    lv_random = RandomInt(1, 5);
                    gv_roleChoose[PlayerGroupLoopCurrent()] = lv_random;
                    if (lv_random == 1) {
                        lv_choice = "Wall Role";
                        lv_color = Color(0.0, 255.0, 255.0);
                    }
                    if (lv_random == 2) {
                        lv_choice = "Cannon Role";
                        lv_color = Color(255.0, 0.0, 255.0);
                    }
                    if (lv_random == 3) {
                        lv_choice = "Healer Role";
                        lv_color = Color(0.0, 255.0, 0.0);
                    }
                    if (lv_random == 4) {
                        lv_choice = "Generator Role";
                        lv_color = Color(255.0, 0.0, 0.0);
                    }
                    if (lv_random == 5) {
                        lv_choice = "Economy Role";
                        lv_color = Color(255.0, 255.0, 0.0);
                    }
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/716C7B08") + TextWithColor(StringToText(lv_choice), lv_color));
                }
                TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][1].lv_role, 1);
                // UnitBehaviorAddPlayer(gv_probe[PlayerGroupLoopCurrent()], gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][1].lv_role, PlayerGroupLoopCurrent(), 1);
                lv_ww = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "a");
                lv_cwz = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "e");
                lv_hws = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "i");
                lv_gnw = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "f");
                lv_eow = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "o");
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 1) {
                        if ((((lv_ww/4) >= gv_roles[1][IntLoopCurrent()].lv_wins) || (gv_isadmin[PlayerGroupLoopCurrent()] == true))) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        }
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 2) {
                        if (((lv_cwz/7) >= gv_roles[2][IntLoopCurrent()].lv_wins) || (gv_isadmin[PlayerGroupLoopCurrent()] == true)) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        }
                    }
                    // Dual Mastery 1
                    if ((gv_roleChoose[PlayerGroupLoopCurrent()] == 1) || (gv_roleChoose[PlayerGroupLoopCurrent()] == 2)) {
                        if ((((lv_cwz/7) >= gv_roles[2][6].lv_wins) && ((lv_ww/4) >= gv_roles[1][6].lv_wins)) || (gv_isadmin[PlayerGroupLoopCurrent()] == true)) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[1][6].lv_upgrade, 1);
                        }
                    }
                    //
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 3) {
                        if ((((lv_hws/9) >= gv_roles[3][IntLoopCurrent()].lv_wins) || (gv_isadmin[PlayerGroupLoopCurrent()] == true))) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        }
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 4) {
                        if ((((lv_gnw/5) >= gv_roles[4][IntLoopCurrent()].lv_wins) || (gv_isadmin[PlayerGroupLoopCurrent()] == true))) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        }
                    }
                    // Dual Mastery 2
                    if ((gv_roleChoose[PlayerGroupLoopCurrent()] == 3) || (gv_roleChoose[PlayerGroupLoopCurrent()] == 4)) {
                        if ((((lv_hws/9) >= gv_roles[3][6].lv_wins) && ((lv_gnw/5) >= gv_roles[4][6].lv_wins)) || (gv_isadmin[PlayerGroupLoopCurrent()] == true)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(1, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(2, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(3, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(4, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(5, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(6, gv_roles[3][6].lv_upgrade, 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "DummyDualMasteryHealGen", 1);
                        }
                    }
                    //
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 5) {
                        if ( ((lv_eow/13) >= gv_roles[5][IntLoopCurrent()].lv_wins) || (gv_isadmin[PlayerGroupLoopCurrent()] == true) ) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        }
                    }
                    if (gv_roleChoose[PlayerGroupLoopCurrent()] == 6) { // wip mercenary role
                        // if (gv_DonateLevelPlayer[PlayerGroupLoopCurrent()] >= 4 || gv_isadmin[PlayerGroupLoopCurrent()] == true) {
                            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), gv_roles[gv_roleChoose[PlayerGroupLoopCurrent()]][IntLoopCurrent()].lv_upgrade, 1);
                        // }
                    }
                }
                IntLoopEnd();
            }
        }
        PlayerGroupLoopEnd();
        UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
        UISetResourceTradingAllowed(c_resourceTypeCustom, false);
        UISetResourceTradingAllowed(c_resourceTypeVespene, false);
        UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_roleplay_Init() {
    gt_roleplay = TriggerCreate("gt_roleplay_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: SandBox list of commands
    //--------------------------------------------------------------------------------------------------
    bool gt_commands_Func(bool testConds, bool runActions) {
        // Conditions
        // if (testConds) {
        //     if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
        //         return false;
        //     }
        // }

        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_GameMode == "SandBox" || gv_isadmin[EventPlayer()]) {
            HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("DOCSTR_SandBoxCommandsTitle"), libNtve_ge_TipType_NormalTip), StringExternal("DOCSTR_SandBoxCommands"), StringExternal("DOCSTR_SandBoxCommandsTitle"), "Assets\\Textures\\carrierportrait_static.dds");
        }
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("DOCSTR_ChatCommandsTitle"), libNtve_ge_TipType_NormalTip), StringExternal("DOCSTR_ChatCommands"), StringExternal("DOCSTR_ChatCommandsTitle"), "Assets\\Textures\\carrierportrait_static.dds");

        // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6394C41E"));
        // Wait(10.0, c_timeGame);
        // UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C10588CE"));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_commands_Init() {
    gt_commands = TriggerCreate("gt_commands_Func");
    TriggerEnable(gt_commands, false);
    TriggerAddEventChatMessage(gt_commands, c_playerAny, "-commands", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: All in (SandBox)
    //--------------------------------------------------------------------------------------------------
    bool gt_allin_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerExecute(gt_AdminMoney, true, false);
        TriggerExecute(gt_Reveal, true, false);
        TriggerExecute(gt_cooldownSandbox, true, false);
        TriggerExecute(gt_godmodegodsandbox, true, false);
        TriggerExecute(gt_sandboxgiverelics, true, false);
        TriggerExecute(gt_sandboxkillrocks, true, false);
        TriggerExecute(gt_sandboxkillminerals, true, false);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel3", 50);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "Improvethesiegecannons", 50);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundArmorsLevel1", 99);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ProtossGroundWeaponsLevel2", 99);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_allin_Init () {
        gt_allin = TriggerCreate("gt_allin_Func");
        TriggerAddEventChatMessage(gt_allin, c_playerAny, "-allin", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Set Difficulty (SandBox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxdifficulty_Func (bool testConds, bool runActions) {
        string lv_difficulty;
        string lv_dmgscale;
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_difficulty = StringCase(StringSub(EventChatMessage(false), 17, StringLength(EventChatMessage(false))), false);
        if ((lv_difficulty == "easy")) {
            lv_dmgscale = "-20%";
            gv_damageBonus = -100;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[0]);
            TriggerEnable(gt_nightmaremutas, false);
            TriggerEnable(gt_banelingkamikaze, false);
            TriggerEnable(gt_hybridnemesis, false);
            gv_variablevoteeasy = 5;
            gv_variablevoteelite = 0;
            gv_variablevotenightmare = 0;
            gv_variablevotehell = 0;
            gv_variablevoteimpossible = 0;
            // gv_tempsJour = 60.0;
            // gv_tempsNuit = 170.0;
            gv_tempsJour = 60.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Easy";
            gv_enabledshareDay = 20;
            gv_difficultyminmutators = 1;
            gv_difficultymaxmutators = 2;
            gv_selectedDifficultyNumber = 0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale));
        }
        if ((lv_difficulty == "normal")) {
            lv_dmgscale = "+0%";
            gv_damageBonus = 1;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[1]);
            TriggerEnable(gt_nightmaremutas, false);
            TriggerEnable(gt_banelingkamikaze, false);
            TriggerEnable(gt_hybridnemesis, false);
            gv_variablevoteeasy = 0;
            gv_variablevoteelite = 0;
            gv_variablevotenightmare = 0;
            gv_variablevotehell = 0;
            gv_variablevoteimpossible = 0;
            // gv_tempsJour = 60.0;
            // gv_tempsNuit = 170.0;
            gv_tempsJour = 40.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Normal";
            gv_enabledshareDay = 19;
            gv_difficultyminmutators = 2;
            gv_difficultymaxmutators = 3;
            gv_selectedDifficultyNumber = 1;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale));
        }
        if ((lv_difficulty == "elite")) {
            lv_dmgscale = "+50%";
            gv_damageBonus = 10;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[2]);
            TriggerEnable(gt_nightmaremutas, false);
            TriggerEnable(gt_banelingkamikaze, false);
            TriggerEnable(gt_hybridnemesis, false);
            gv_variablevoteeasy = 0;
            gv_variablevoteelite = 5;
            gv_variablevotenightmare = 0;
            gv_variablevotehell = 0;
            gv_variablevoteimpossible = 0;
            // gv_tempsJour = 30.0;
            // gv_tempsNuit = 170.0;
            gv_tempsJour = 20.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Elite";
            gv_enabledshareDay = 18;
            gv_difficultyminmutators = 2;
            gv_difficultymaxmutators = 3;
            gv_selectedDifficultyNumber = 2;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale));
        }
        if ((lv_difficulty == "nightmare")) {
            lv_dmgscale = "+100%";
            gv_damageBonus = 21;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[3]);
            TriggerEnable(gt_nightmaremutas, true);
            TriggerEnable(gt_banelingkamikaze, false);
            TriggerEnable(gt_hybridnemesis, false);
            gv_variablevoteeasy = 0;
            gv_variablevoteelite = 0;
            gv_variablevotenightmare = 5;
            gv_variablevotehell = 0;
            gv_variablevoteimpossible = 0;
            // gv_tempsJour = 16.0;
            // gv_tempsNuit = 170.0;
            gv_tempsJour = 11.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Nightmare";
            gv_enabledshareDay = 17;
            gv_difficultyminmutators = 3;
            gv_difficultymaxmutators = 4;
            gv_selectedDifficultyNumber = 3;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale));
        }
        if ((lv_difficulty == "hell")) {
            lv_dmgscale = "+150%";
            gv_damageBonus = 31;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[4]);
            TriggerEnable(gt_nightmaremutas, true);
            TriggerEnable(gt_banelingkamikaze, true);
            TriggerEnable(gt_hybridnemesis, false);
            gv_variablevoteeasy = 0;
            gv_variablevoteelite = 0;
            gv_variablevotenightmare = 0;
            gv_variablevotehell = 5;
            gv_variablevoteimpossible = 0;
            // gv_tempsNuit = 180.0;
            gv_tempsJour = 1.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Hell";
            gv_enabledshareDay = 16;
            gv_difficultyminmutators = 3;
            gv_difficultymaxmutators = 5;
            gv_selectedDifficultyNumber = 4;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/79027700"));
        }
        if ((lv_difficulty == "impossible")) {
            lv_dmgscale = "+150%";
            gv_damageBonus = 40;
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EasyDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "EliteDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "NightmareDifficulty", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "HellDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "ImpossibleDifficulty", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(15, "Difficulty", gv_difficultydamage[5]);
            TriggerEnable(gt_nightmaremutas, true);
            TriggerEnable(gt_banelingkamikaze, true);
            TriggerEnable(gt_hybridnemesis, true);
            TriggerEnable(gt_ZergInvasion, false);
            TriggerEnable(gt_ZergInvasionImpossible, true);
            gv_variablevoteeasy = 0;
            gv_variablevoteelite = 0;
            gv_variablevotenightmare = 0;
            gv_variablevotehell = 0;
            gv_variablevoteimpossible = 5;
            // gv_tempsNuit = 180.0;
            gv_tempsJour = 1.0;
            gv_tempsNuit = 120.0;
            gv_difficulty = "Impossible";
            gv_difficultyminmutators = 4;
            gv_difficultymaxmutators = 5;
            gv_selectedDifficultyNumber = 5;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6B7A4B45") + StringToText(lv_difficulty) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_dmgscale) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/79027700") + StringToText("<n/>Amount of enemies increased"));
        }

        if (gv_variablevotenightshift == 5) {
            gv_tempsJour = 1.0;
        }
        TriggerExecute(gt_bosspool, true, false);

        gv_mutatordescription[0] = StringToText("Random Mutators are added periodically to a maximum of ") + IntToText(gv_difficultymaxmutators+1);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxdifficulty_Init () {
        gt_sandboxdifficulty = TriggerCreate("gt_sandboxdifficulty_Func");
        TriggerAddEventChatMessage(gt_sandboxdifficulty, c_playerAny, "-set difficulty ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: SOS (SandBox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxSOS_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_day == false) && (gv_dayNb > 1)) {
            gv_dayNb -= 1;
            gv_tempsJour = 120.0;
            TimerStart(gv_chrono, gv_tempsJour, true, c_timeGame);
            gv_day = true;
            TriggerEnable(gt_ZergInvasion, false);
            TriggerEnable(gt_ZergInvasionImpossible, false);
            TriggerEnable(gt_ZergBoss, false);
            gv_temps = FixedToInt(gv_tempsJour);
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            EnvironmentShow(c_environmentAll, true);
            GameSetLighting("AgriaSunset", 15.0);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionnuit", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionjour", 1);
                libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "SetShowStatusBar");
            }
            PlayerGroupLoopEnd();
            Wait(10.0, c_timeGame);
            SoundStopAllModelSounds();
            SoundChannelStop(PlayerGroupAll(), c_soundCategoryMusic);
            SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
            SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
            GameSetLighting("Agria", 2.0);
            Wait(120.0, c_timeGame);

            gv_tempsJour = 40.0;

            if (gv_variablevoteelite == 5) {
                gv_tempsJour = 20.0;
            }

            if (gv_variablevotenightmare == 5) {
                gv_tempsJour = 11.0;
            }
            
            if ((gv_variablevotehell == 5) || (gv_variablevotenightshift == 5) || (gv_variablevoteimpossible == 5)) {
                gv_tempsJour = 1.0;
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxSOS_Init () {
        gt_sandboxSOS = TriggerCreate("gt_sandboxSOS_Func");
        TriggerAddEventChatMessage(gt_sandboxSOS, c_playerAny, "-sos", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Set Day # (SandBox)
    //--------------------------------------------------------------------------------------------------
    bool gt_setday_Func (bool testConds, bool runActions) {
        int lv_day;
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_day = StringToInt(StringSub(EventChatMessage(false), 6, StringLength(EventChatMessage(false))));
        if ((lv_day < 1) || (lv_day > 35)) {
            return false;
        }
        if (gv_difficulty == "Easy" || (gv_difficulty == "Normal")) {
            gv_tempsJour = 40.0;
        }
        if (gv_difficulty == "Elite") {
            gv_tempsJour = 20.0;
        }
        if (gv_difficulty == "Nightmare") {
            gv_tempsJour = 11.0;
        }
        if (gv_difficulty == "Hell") {
            gv_tempsJour = 1.0;
        }
        if (gv_GameMode == "Versus") {
            gv_tempsJour = 50.0;
        }
        gv_dayNb = lv_day-1;
        TimerStart(gv_chrono, gv_tempsJour, true, c_timeGame);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/229A6694"));
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "LostViking_MusicBossKilled", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        gv_day = true;
        gv_temps = FixedToInt(gv_tempsJour);
        libNtve_gf_SetDialogItemColor(gv_chronolabel, Color(254*100/255,138*100/255,14*100/255), PlayerGroupActive());
        TriggerEnable(gt_ZergInvasion, false);
        TriggerEnable(gt_ZergInvasionImpossible, false);
        TriggerExecute(gt_Cores, true, false);
        TriggerExecute(gt_StartDay, true, false);
        TriggerExecute(gt_Probeseekerpointatt, true, false);
        TriggerExecute(gt_CoreInside, true, false);
        EnvironmentShow(c_environmentAll, true);
        if (gv_damageBonus < 30) {
            GameSetLighting("AgriaSunset", 15.0);
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionnuit", 0);
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Probevisionjour", 1);
                libNtve_gf_SendActorMessageToUnit(gv_probe[PlayerGroupLoopCurrent()], "SetShowStatusBar");
            }
            PlayerGroupLoopEnd();
            Wait(10.0, c_timeGame);
            SoundStopAllModelSounds();
            SoundChannelStop(PlayerGroupAll(), c_soundCategoryMusic);
            SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
            SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
            GameSetLighting("Agria", 2.0);
        }
        gv_zergTypeNb = lv_day;
        if (gv_dayNb <= 24) {
            gv_zeratul = 1;
        }
        if ((gv_dayNb >= 8) && (gv_dayNb < 26)) {
            TriggerEnable(gt_capitainezergs1225, true);
        }
        else {
            TriggerEnable(gt_capitainezergs1225, false);
        }
        if ((gv_dayNb >= 26)) {
            TriggerEnable(gt_capitainezergsfinal2635, true);
        }
        else {
            TriggerEnable(gt_capitainezergsfinal2635, false);
        }
        if ((gv_dayNb >= 17) && (gv_dayNb < 26)) {
            TriggerEnable(gt_capitaineMutas1725, true);
        }
        else {
            TriggerEnable(gt_capitaineMutas1725, false);
        }
        if (gv_dayNb >= 29) {
            TriggerEnable(gt_airsquadron29, true);
        }
        else {
            TriggerEnable(gt_airsquadron29, false);
        }

        TriggerExecute(gt_zerglimit, true, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_setday_Init () {
        gt_setday = TriggerCreate("gt_setday_Func");
        TriggerAddEventChatMessage(gt_setday, c_playerAny, "-day ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Set players (sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_setplayers_Func (bool testConds, bool runActions) {
        int lv_amount;
        string lv_upgrade;
        int init_i;
        string lv_damagebonus;
        // Conditions
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_amount = StringToInt(StringSub(EventChatMessage(false), 14, StringLength(EventChatMessage(false))));
        if ((lv_amount < 1) || (lv_amount > 5)) {
            return false;
        }
        libNtve_gf_SetUpgradeLevelForPlayer(15, "Players", lv_amount);
        lv_damagebonus = "+" + IntToString(lv_amount*5) + "%";
        gv_nbJoueursvar = lv_amount;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C3C00700") + IntToText(lv_amount) + StringExternal("Param/Value/DEA3F9C0") + StringExternal("Param/Value/6E425C3B") + StringToText(lv_damagebonus));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_setplayers_Init () {
        gt_setplayers = TriggerCreate("gt_setplayers_Func");
        TriggerAddEventChatMessage(gt_setplayers, c_playerAny, "-set players ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: XP Cannons
    //--------------------------------------------------------------------------------------------------
    bool gt_XPCannons_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_xP;
        fixed lv_multiplier;

        // Conditions
        if (testConds) {
            if (!((UnitGetOwner(EventUnit()) == 15))) {
                return false;
            }

            if (UnitGetType(libNtve_gf_KillingUnit()) == "Probe") {
                return false;
            }

            if (UnitGetOwner(libNtve_gf_KillingUnit()) > 6) {
                return false;
            }
            if (UnitGetOwner(libNtve_gf_KillingUnit()) == gv_theThingPlayer) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }
        lv_multiplier = 1.0;
        if (UnitBehaviorEnabled(libNtve_gf_KillingUnit(), "RapidLearning")) {
            lv_multiplier = lv_multiplier + 1.0;
        }
        lv_xP = (UnitGetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) * lv_multiplier);
        if ((UnitGetType(libNtve_gf_KillingUnit()) == "SiegeBreakerSieged") || (UnitGetType(libNtve_gf_KillingUnit()) == "SiegeBreaker")) {
            if (TechTreeUpgradeCount(UnitGetOwner(libNtve_gf_KillingUnit()), "CannonMastery5", c_techCountQueuedOrBetter) == 1) {
                UnitXPAddXP(libNtve_gf_KillingUnit(), "TankVeterancy", UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) * lv_multiplier);
            }
            else {
                UnitXPAddXP(libNtve_gf_KillingUnit(), "LevelsTowers2", UnitGetPropertyFixed(EventUnit(), c_unitPropKillXP, c_unitPropCurrent) * lv_multiplier);
            }
        }
        else {
            UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropXP, lv_xP);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_XPCannons_Init () {
        gt_XPCannons = TriggerCreate("gt_XPCannons_Func");
        TriggerAddEventUnitDied(gt_XPCannons, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Reduced cooldown probe (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_cooldownSandbox_Func(bool testConds, bool runActions) {
        string lv_status;
        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_cooldownApplied == false) {
            UnitBehaviorAddPlayer(gv_probe[EventPlayer()], "AcceleratedCooldowns", EventPlayer(), 1);
            gv_cooldownApplied = true;
            lv_status = "activated";
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/514BF502") + StringToText(lv_status));
        }
        else {
            UnitBehaviorRemove(gv_probe[EventPlayer()], "AcceleratedCooldowns", 1);
            gv_cooldownApplied = false;
            lv_status = "deactivated";
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/514BF502") + StringToText(lv_status));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_cooldownSandbox_Init() {
    gt_cooldownSandbox = TriggerCreate("gt_cooldownSandbox_Func");
    TriggerAddEventChatMessage(gt_cooldownSandbox, c_playerAny, "-cooldown", true);
    TriggerAddEventChatMessage(gt_cooldownSandbox, c_playerAny, "-cd", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: SCV Enhancer (Remove exceeding limit SCVs)
    //--------------------------------------------------------------------------------------------------
    bool gt_scvenhancer_Func(bool testConds, bool runActions) {
        if (testConds) {
            if (!((libNtve_gf_TriggeringProgressUpgrade() == "SCVEnhancer1") || (libNtve_gf_TriggeringProgressUpgrade() == "SCVEnhancer2"))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
        return true;
        }

        // Kill all SCVs if > 4
        if (libNtve_gf_TriggeringProgressUpgrade() == "SCVEnhancer1") {
            if ((UnitCount("SCV", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 4)) {
                UnitGroupLoopBegin(UnitGroup("SCV", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
        }

        // Kill all SCVs if > 1
        if (libNtve_gf_TriggeringProgressUpgrade() == "SCVEnhancer2") {
            if ((UnitCount("SCV", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 1)) {
                UnitGroupLoopBegin(UnitGroup("SCV", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitKill(UnitGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_scvenhancer_Init() {
        gt_scvenhancer = TriggerCreate("gt_scvenhancer_Func");
        TriggerAddEventUnitResearchProgress(gt_scvenhancer, null, c_unitProgressStageComplete);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Zerg limit
    //--------------------------------------------------------------------------------------------------
    bool gt_zerglimit_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_dayNb < 9) {
            // gv_zergLimit = 22;
            gv_zergLimit = 26;
        }
        if ((gv_dayNb >= 9)) {
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 9);
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 4);
            }
            gv_zergLimit = (gv_zergLimit + 30);
        }

        if ((gv_dayNb >= 10)) {
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 9);
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 6);
            }
            gv_zergLimit = (gv_zergLimit + 20);
        }

        if (((gv_dayNb >= 11) && (gv_dayNb <= 16))) {
            if ((gv_damageBonus >= 10)) {
                gv_zergLimit = (gv_nbJoueursvar + 30);
            }
            else {
                gv_zergLimit = (gv_nbJoueursvar + 20);
            }
        }

        if ((gv_dayNb >= 17)) {
            gv_zergLimit = (gv_nbJoueursvar + 34);
        }

        if ((gv_dayNb >= 18)) {
            gv_zergLimit = (gv_nbJoueursvar + 20);
        }

        if ((gv_dayNb >= 19)) {
            gv_zergLimit = (gv_nbJoueursvar + 40);
        }

        // if ((gv_dayNb >= 31)) {
        //     gv_zergLimit = 50;
        // }

        // if ((gv_dayNb >= 32)) {
        //     gv_zergLimit = 60;
        // }

        if ((gv_dayNb >= 36)) {
            gv_zergLimit = 200;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_zerglimit_Init() {
        gt_zerglimit = TriggerCreate("gt_zerglimit_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Hybrid Destroyer dead
    //--------------------------------------------------------------------------------------------------
    bool gt_hybriddestroyerdead_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (UnitGetType(EventUnit()) != "Maar2") {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        PortraitCreate(25, 0, c_anchorLeft, 237, 360, "HybridDestroyer2", "", "Default", true, true);
        gv_destroyerportraitdead = PortraitLastCreated();
        PortraitWaitForLoad(gv_destroyerportraitdead);
        SoundPlay(SoundLink("TZeratul02HybridProtoss00021", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundLengthQuery(SoundLink("TZeratul02HybridProtoss00021", -1));
        SoundLengthQueryWait();
        Wait(SoundLengthSync(SoundLink("TZeratul02HybridProtoss00021", -1)), c_timeGame);
        PortraitDestroy(gv_destroyerportraitdead);
        gv_destroyerportraitdead = 0;
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_hybriddestroyerdead_Init () {
        gt_hybriddestroyerdead = TriggerCreate("gt_hybriddestroyerdead_Func");
        TriggerAddEventUnitDamaged(gt_hybriddestroyerdead, null, c_unitDamageTypeAny, c_unitDamageEither, "HybridDestroyerDummyDeath");
        // TriggerAddEventUnitDied(gt_hybriddestroyerdead, null);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Baneling Kamikaze (hell+)
    //--------------------------------------------------------------------------------------------------
    bool gt_banelingkamikaze_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((gv_dayNb >= 8) && (gv_dayNb <= 13) && (gv_damageBonus >= 30)) {
            gv_banelingtiming = RandomInt(20, 65);
            Wait((IntToFixed(gv_banelingtiming)), c_timeGame);
            SoundPlay(SoundLink("Baneling_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C248011B"));
            UnitCreate(1, "Baneling22", 0, 15, PointFromName("Center"), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
                if ((UnitIsAlive(gv_focustarget[PlayerGroupLoopCurrent()]) == true)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_focustarget[PlayerGroupLoopCurrent()])), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, PlayerGroupPlayer(gv_probeGroupPlayer, RandomInt(1, PlayerGroupCount(gv_probeGroupPlayer))), RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
                }
            }
            PlayerGroupLoopEnd();
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_banelingkamikaze_Init () {
        gt_banelingkamikaze = TriggerCreate("gt_banelingkamikaze_Func");
        TriggerEnable(gt_banelingkamikaze, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Hybrid Nemesis (Impossible)
    //--------------------------------------------------------------------------------------------------
    bool gt_hybridnemesis_Func (bool testConds, bool runActions) {
        int lv_hybridnemesisportrait;
        // Actions
        if (!runActions) {
            return true;
        }

        if (!((gv_damageBonus >= 40) || (gv_GameMode == "Versus" && gv_versusresearch_hybridnemesis == true))) {
            return false;
        }
        if ((gv_dayNb >= 6) && (gv_dayNb <= 17) && (gv_temps <= 115) && (gv_temps >= 15) && (gv_day == false)) {
            if (gv_hybridnemesismessage == false) {
                PortraitCreate(25, 0, c_anchorLeft, 237, 360, "HybridNemesis2", "", "Default", true, true);
                lv_hybridnemesisportrait = PortraitLastCreated();
                PortraitWaitForLoad(lv_hybridnemesisportrait);
                SoundPlay(SoundLink("Brutalisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);
                SoundLengthQuery(SoundLink("Brutalisk_Roar2", -1));
                SoundLengthQueryWait();
                Wait(SoundLengthSync(SoundLink("Brutalisk_Roar2", -1)), c_timeGame);
                PortraitDestroy(lv_hybridnemesisportrait);
                gv_hybridnemesismessage = true;
            }
            if ((UnitGroupCount(UnitGroup("HybridNemesis", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) <= 0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, 15, PointFromId(292));
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(15, c_unitAllianceEnemy, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterHarvestableResource), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive))), c_orderQueueReplace);
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_hybridnemesis_Init () {
        gt_hybridnemesis = TriggerCreate("gt_hybridnemesis_Func");
        TriggerEnable(gt_hybridnemesis, false);
        TriggerAddEventTimePeriodic(gt_hybridnemesis, 32.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: - DNA Pickup - Update
    //--------------------------------------------------------------------------------------------------
    bool gt_DNAPickupUpdate_Func (bool testConds, bool runActions) {
        int lv_player;
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DNAPickup"))) {
                return false;
            }
        }

        lv_player = UnitGetOwner(EventUnitTargetUnit());

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_GameMode == "Versus") {
            return false;
        }

        if (UnitGetType(EventUnitTargetUnit()) != "Probe") {
            return false;
        }

        UnitKill(EventUnit());
        TextTagCreate(StringToText("DNA Collected"), 20, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, PlayerGroupSingle(lv_player));
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(255.0, 128.0, 0.0));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        gv_dnapicked[lv_player] += 1;
        
        if ((gv_dnapicked[lv_player] == 3) && (gv_dnapicked2[lv_player] >= 3)) {
            if ((UnitHasBehavior2(EventUnitTargetUnit(), "Destroyer") == true) && (gv_isbanned[lv_player] == false) && (gv_skins[gv_skinChoose[lv_player]].lv_comportement == "HardShield2222" || gv_skins[gv_skinChoose[lv_player]].lv_comportement == "BonusZeratulskin") && (libNtve_gf_UnitGetPropertyKills(EventUnitTargetUnit(), c_unitPropCurrent) >= 500)) {
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, TextWithColor(StringToText("Your strength is enough to handle it."), Color(255.00, 255.00, 0.00)));
                gv_dnavalid[lv_player] = true;
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, TextWithColor(StringToText("Only strongests can handle it..."), Color(255.00, 0.00, 0.00)));
            }
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DNAPickupUpdate_Init () {
        gt_DNAPickupUpdate = TriggerCreate("gt_DNAPickupUpdate_Func");
        TriggerAddEventUnitAbility(gt_DNAPickupUpdate, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: - DNA Pickup - Update 2
    //--------------------------------------------------------------------------------------------------
    bool gt_DNAPickupUpdate2_Func (bool testConds, bool runActions) {
        int lv_player;
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DNAPickup2"))) {
                return false;
            }
        }

        lv_player = UnitGetOwner(EventUnitTargetUnit());

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_GameMode == "Versus") {
            return false;
        }

        if (UnitGetType(EventUnitTargetUnit()) != "Probe") {
            return false;
        }

        UnitKill(EventUnit());
        TextTagCreate(StringToText("DNA Collected"), 20, PointWithOffset(UnitGetPosition(EventUnit()), 0.0, 0.0), 1.0, true, false, PlayerGroupSingle(lv_player));
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(255.0, 128.0, 0.0));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        gv_dnapicked2[lv_player] += 1;

        if (gv_dnapicked2[lv_player] == 3) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, TextWithColor(StringToText("DNA of Legendary Warrior can be enhanced with Advanced DNA..."), Color(255.00, 255.00, 0.00)));
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DNAPickupUpdate2_Init () {
        gt_DNAPickupUpdate2 = TriggerCreate("gt_DNAPickupUpdate2_Func");
        TriggerAddEventUnitAbility(gt_DNAPickupUpdate2, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Hybrid Behemoth Rage
    //--------------------------------------------------------------------------------------------------
    bool gt_HybridBehemothRage_Func (bool testConds, bool runActions) {
        if (testConds) {
            if (UnitHasBehavior2(EventUnit(), "BehemothConcentration32") == true) {
                return false;
            }
        }

        if (UnitHasBehavior2(EventUnit(), "BehemothConcentration3") == false) {
            UnitBehaviorAdd(EventUnit(), "BehemothConcentration", EventUnit(), 1);
        }

        if ((UnitTechTreeBehaviorCount(EventUnit(), "BehemothConcentration", c_techCountQueuedOrBetter) == 20)) {
            UnitBehaviorRemove(EventUnit(), "BehemothConcentration", 20);
            UnitBehaviorAdd(EventUnit(), "BehemothConcentration3", EventUnit(), 1);
        }

        if ((UnitHasBehavior2(EventUnit(), "BehemothConcentration3") == true) && (UnitTechTreeBehaviorCount(EventUnit(), "BehemothConcentrationHalfcollapsed", c_techCountQueuedOrBetter) < 2)) {
            UnitBehaviorAdd(EventUnit(), "BehemothConcentration2", EventUnit(), 1);
        }

        if ((UnitTechTreeBehaviorCount(EventUnit(), "BehemothConcentration2", c_techCountQueuedOrBetter) == 25)) {
            UnitBehaviorRemove(EventUnit(), "BehemothConcentration2", 25);
            UnitBehaviorAdd(EventUnit(), "BehemothConcentrationHalfcollapsed", EventUnit(), 1);
        }

        if ((UnitTechTreeBehaviorCount(EventUnit(), "BehemothConcentrationHalfcollapsed", c_techCountQueuedOrBetter) == 2) && (UnitTechTreeBehaviorCount(EventUnit(), "BehemothConcentration3", c_techCountQueuedOrBetter) == 1)) {
            UnitBehaviorRemove(EventUnit(), "BehemothConcentrationHalfcollapsed", 2);
            UnitBehaviorRemove(EventUnit(), "BehemothConcentration3", 1);
            UnitBehaviorAdd(EventUnit(), "BehemothConcentration32", EventUnit(), 1);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_HybridBehemothRage_Init () {
        gt_HybridBehemothRage = TriggerCreate("gt_HybridBehemothRage_Func");
        TriggerAddEventUnitStartedAttack2(gt_HybridBehemothRage, null, "BehemothClaws");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Godmode GOD (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_godmodegodsandbox_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup auto3D544D5A_g;
        int auto3D544D5A_u;
        unit auto3D544D5A_gg;
        string lv_status;

        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_GameMode == "SandBox"))) {
                return false;
            }
        }

        if (!runActions) {
            return true;
        }

        if (gv_godmodesandbox == false) {
            gv_godmodesandbox = true;
            lv_status = "activated";
            TriggerEnable(gt_godmodegodsandboxspawn, true);
        }
        else {
            gv_godmodesandbox = false;
            lv_status = "deactivated";
            TriggerEnable(gt_godmodegodsandboxspawn, false);
        }
        auto3D544D5A_g = UnitGroupFilter(null, c_playerAny, UnitGroupAlliance(15, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3D544D5A_u = UnitGroupCount(auto3D544D5A_g, c_unitCountAll);
        for (;; auto3D544D5A_u -= 1) {
            auto3D544D5A_gg = UnitGroupUnitFromEnd(auto3D544D5A_g, auto3D544D5A_u);
            if (auto3D544D5A_gg == null) { break; }
            if (gv_godmodesandbox == true) {
                UnitBehaviorAdd(auto3D544D5A_gg, "Godmode", auto3D544D5A_gg, 1);
            }
            else {
                UnitBehaviorRemove(auto3D544D5A_gg, "Godmode", 1);
            }
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Godmode ") + StringToText(lv_status));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_godmodegodsandbox_Init () {
        gt_godmodegodsandbox = TriggerCreate("gt_godmodegodsandbox_Func");
        TriggerAddEventChatMessage(gt_godmodegodsandbox, c_playerAny, "-godmode", true);
        TriggerAddEventChatMessage(gt_godmodegodsandbox, c_playerAny, "-godmod", true);
        TriggerAddEventChatMessage(gt_godmodegodsandbox, c_playerAny, "-gm", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Infested Buildings
    //--------------------------------------------------------------------------------------------------
    bool gt_infestedbuildings_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup auto3D544D5A_g;
        int auto3D544D5A_u;
        unit auto3D544D5A_gg;
        string lv_status;

        if (testConds) {
            if (!((gv_isadmin[EventPlayer()] == true) || (gv_DonateLevelPlayer[EventPlayer()] >= 5) || (PlayerHandle(EventPlayer()) == "2-S2-1-432065") || (PlayerHandle(EventPlayer()) == "2-S2-1-7741735") || (PlayerHandle(EventPlayer()) == "2-S2-1-1030178") || (PlayerHandle(EventPlayer()) == "2-S2-1-4319543") || (PlayerHandle(EventPlayer()) == "1-S2-1-9668573") || (PlayerHandle(EventPlayer()) == "2-S2-1-3434195"))) {
                return false;
            }
        }
        // KarimKarfax 2-S2-1-432065
        // Serenity 2-S2-1-7741735
        // wrOs 2-S2-1-1030178
        // WickedWolf 2-S2-1-4319543 || 1-S2-1-9668573
        // Punkt 2-S2-1-3434195

        if (!runActions) {
            return true;
        }

        if (gv_infestedbuildings[EventPlayer()] == false) {
            gv_infestedbuildings[EventPlayer()] = true;
            lv_status = "activated";
            TriggerEnable(gt_infestedbuildingsspawn, true);
        }
        else {
            gv_infestedbuildings[EventPlayer()] = false;
            lv_status = "deactivated";
            // TriggerEnable(gt_infestedbuildingsspawn, false);
        }
        auto3D544D5A_g = UnitGroupFilter(null, EventPlayer(), UnitGroupAlliance(15, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3D544D5A_u = UnitGroupCount(auto3D544D5A_g, c_unitCountAll);
        for (;; auto3D544D5A_u -= 1) {
            auto3D544D5A_gg = UnitGroupUnitFromEnd(auto3D544D5A_g, auto3D544D5A_u);
            if (auto3D544D5A_gg == null) { break; }
            if (gv_infestedbuildings[EventPlayer()] == true) {
                UnitBehaviorAdd(auto3D544D5A_gg, "InfestedVisual", auto3D544D5A_gg, 1);
            }
            else {
                UnitBehaviorRemove(auto3D544D5A_gg, "InfestedVisual", 1);
            }
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Infested Buildings ") + StringToText(lv_status));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_infestedbuildings_Init () {
        gt_infestedbuildings = TriggerCreate("gt_infestedbuildings_Func");
        TriggerAddEventChatMessage(gt_infestedbuildings, c_playerAny, "-infestedbuildings", true);
        TriggerAddEventChatMessage(gt_infestedbuildings, c_playerAny, "-infestedbuilding", true);
        TriggerAddEventChatMessage(gt_infestedbuildings, c_playerAny, "-infested", true);
        TriggerAddEventChatMessage(gt_infestedbuildings, c_playerAny, "-infest", true);
        TriggerEnable(gt_infestedbuildings, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Infested Buildings spawn
    //--------------------------------------------------------------------------------------------------
    bool gt_infestedbuildingsspawn_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations

        // Conditions
        if (testConds) {
            if (UnitGetOwner(EventUnit()) == 15) {
                return false;
            }
            if (!((UnitGetOwner(EventUnit()) > 0))) {
                return false;
            }
            if (gv_infestedbuildings[EventPlayer()] == false) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 6)) {
            if (gv_infestedbuildings[EventPlayer()] == true) {
                UnitBehaviorAdd(EventUnit(), "InfestedVisual", EventUnit(), 1);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_infestedbuildingsspawn_Init () {
        gt_infestedbuildingsspawn = TriggerCreate("gt_infestedbuildingsspawn_Func");
        TriggerAddEventUnitRegion(gt_infestedbuildingsspawn, null, RegionEntireMap(), true);
        TriggerEnable(gt_infestedbuildingsspawn, false);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: SandBox - Godmode Unit Spawned
    //--------------------------------------------------------------------------------------------------
    bool gt_godmodegodsandboxspawn_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations

        // Conditions
        if (testConds) {
            if (UnitGetOwner(EventUnit()) == 15) {
                return false;
            }
            if (!((UnitGetOwner(EventUnit()) > 0))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 6)) {
            UnitBehaviorAdd(EventUnit(), "Godmode", EventUnit(), 1);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_godmodegodsandboxspawn_Init () {
        gt_godmodegodsandboxspawn = TriggerCreate("gt_godmodegodsandboxspawn_Func");
        TriggerAddEventUnitRegion(gt_godmodegodsandboxspawn, null, RegionEntireMap(), true);
        TriggerEnable(gt_godmodegodsandboxspawn, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mutators - Add Mutators
    //--------------------------------------------------------------------------------------------------
    bool gt_mutators_Func (bool testConds, bool runActions) {
        fixed lv_wheelchance;
        int lv_mutatorscount;
        int lv_i;
        int lv_selectedmutator;
        int auto459AF967_var;
        int auto7E4BD3A7_var;
        int autoC7DFC7A9_var;
        int lv_randomfirstmutator;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_wheelchance = 15.0;

        TriggerEnable(gt_mutatorsentersregion, true);
        TriggerEnable(gt_mutatorsentersregionplayers, true);
        TriggerEnable(gt_mutatorsentersregionneutral, true);

        gv_MutatorsEnabled = true;

        if (libNtve_gf_RandomPercent() <= lv_wheelchance) {
            gv_mutatordescription[0] += IntToText(gv_difficultymaxmutators+1);
            gf_MutatorEstimateBonusDescription(0);
            gf_AddMutator(0);
            do {
                lv_randomfirstmutator = RandomInt(1, gv_mutatorstotal);
            }while (gv_mutatortype[lv_randomfirstmutator] == 3 || (gv_mutatorEnabled[lv_randomfirstmutator] == true) || (lv_randomfirstmutator == 18 && gv_nbJoueurs > 1));
            gf_AddMutator(lv_randomfirstmutator);
            TriggerExecute(gt_mutatorsset, false, false);
            gv_MutatorWheelOfMisfortuneEnabled = true;

            if (gv_mutatorupgrade[lv_randomfirstmutator] != "None") {
                TechTreeUpgradeAddLevel(1, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(2, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(3, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(4, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(5, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(6, gv_mutatorupgrade[lv_randomfirstmutator], 1);
                TechTreeUpgradeAddLevel(15, gv_mutatorupgrade[lv_randomfirstmutator], 1);
            }

            gv_totalestimatedlevels = gv_totalestimatedlevels + gv_mutatorbonuslevels[0] + gv_win1levels + gv_win2levels;
            gv_totalestimatedwins = gv_mutatorbonuswins[0] + FixedToInt(gv_winbonus) + 1;
            gv_mutatorbonusestimatedlevels += gv_mutatorbonuslevels[0];
            gv_mutatorbonusestimatedwins += gv_mutatorbonuswins[0];
            return true;
        }

        lv_mutatorscount = RandomInt(gv_difficultyminmutators, gv_difficultymaxmutators);
        for (lv_i = 1; lv_i <= lv_mutatorscount; lv_i += 1) {
            do {
                lv_selectedmutator = RandomInt(1, gv_mutatorstotal);
            }while (gv_mutatortype[lv_selectedmutator] == 3 || (gv_mutatorEnabled[lv_selectedmutator] == true) || (gv_mutatorEnabled[1] && lv_selectedmutator == 5) || (gv_mutatorEnabled[5] && lv_selectedmutator == 1) || (lv_selectedmutator == 18 && gv_nbJoueurs > 1));
            gv_mutatorEnabled[lv_selectedmutator] = true;
        }
            // 'While' statements
            // 1) Prevent mutators from repeating,
            // 2) Prevents some mutator combos (e.g. makes impossible Tough Beast & Speed Freaks combo) 
            // 3) Prevent Event Mutators from rolling in default pool

        auto459AF967_var = 1;
        for ( ; auto459AF967_var <= gv_mutatorstotal; auto459AF967_var += 1 ) {
            if ((gv_mutatorEnabled[auto459AF967_var] == true) && (gv_mutatortype[auto459AF967_var] == 0)) {
                gf_MutatorEstimateBonusDescription(auto459AF967_var);
                gf_AddMutator(auto459AF967_var);
            }

        }

        auto7E4BD3A7_var = 1;
        for ( ; auto7E4BD3A7_var <= gv_mutatorstotal; auto7E4BD3A7_var += 1 ) {
            if ((gv_mutatorEnabled[auto7E4BD3A7_var] == true) && (gv_mutatortype[auto7E4BD3A7_var] == 1)) {
                gf_AddMutator(auto7E4BD3A7_var);
            }

        }

        autoC7DFC7A9_var = 1;
        for ( ; autoC7DFC7A9_var <= gv_mutatorstotal; autoC7DFC7A9_var += 1 ) {
            if ((gv_mutatorEnabled[autoC7DFC7A9_var] == true) && (gv_mutatortype[autoC7DFC7A9_var] == 2)) {
                gf_AddMutator(autoC7DFC7A9_var);
            }

        }

        IntLoopBegin(1, gv_mutatorstotal);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if (gv_mutatorEnabled[IntLoopCurrent()] && gv_mutatortype[IntLoopCurrent()] != 3) {
                gv_totalestimatedlevels += gv_mutatorbonuslevels[IntLoopCurrent()];
                gv_totalestimatedwins += gv_mutatorbonuswins[IntLoopCurrent()];
                if (gv_mutatorupgrade[IntLoopCurrent()] != "None") {
                    TechTreeUpgradeAddLevel(1, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(2, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(3, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(4, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(5, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(6, gv_mutatorupgrade[IntLoopCurrent()], 1);
                    TechTreeUpgradeAddLevel(15, gv_mutatorupgrade[IntLoopCurrent()], 1);
                }
            }
        }
        IntLoopEnd();
        // For victory reward
        gv_mutatorbonusestimatedlevels = gv_totalestimatedlevels;
        gv_mutatorbonusestimatedwins = gv_totalestimatedwins;
        // For "Estimated levels / wins" message
        gv_totalestimatedlevels += gv_win1levels + gv_win2levels;
        gv_totalestimatedwins += FixedToInt(gv_winbonus) + 1;

        TriggerExecute(gt_mutatorsset, false, false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutators_Init () {
        gt_mutators = TriggerCreate("gt_mutators_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mutator - Wheel of Misfortune
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorwheelofmisfortune_Func (bool testConds, bool runActions) {
        int lv_selectedmutator;

        // Actions
        if (!runActions) {
            return true;
        }

        if (!(gv_mutatorEnabled[0])) {
            return false;
        }

        do {
            lv_selectedmutator = RandomInt(1, gv_mutatorstotal);
        }while ((gv_mutatorEnabled[lv_selectedmutator] == true) || (gv_mutatorWheelAcceptable[lv_selectedmutator] == false) || (gv_mutatortype[lv_selectedmutator] == 3) || (gv_mutatorEnabled[1] && lv_selectedmutator == 5) || (gv_mutatorEnabled[5] && lv_selectedmutator == 1) || (lv_selectedmutator == 16 && gv_dayNb > 15) || (lv_selectedmutator == 18 && gv_nbJoueurs > 1));
        gv_mutatorEnabled[lv_selectedmutator] = true;
        gf_AddMutator(lv_selectedmutator);

        TriggerExecute(gt_mutatorssetWheelOfMisfortune, false, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextWithColor(StringToText("! New Mutator: "), Color(255.0, 0.0, 0.0)) + TextWithColor(gv_mutatorname[lv_selectedmutator], Color(255.0, 0.0, 0.0)) + TextWithColor(StringToText(" !"), Color(255.0, 0.0, 0.0)));

        if (gv_mutatordialogindex == (gv_difficultymaxmutators+2)) {
            gf_RemoveMutator(0);
            TriggerStop(TriggerGetCurrent());
            TriggerEnable(TriggerGetCurrent(), false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorwheelofmisfortune_Init () {
        gt_mutatorwheelofmisfortune = TriggerCreate("gt_mutatorwheelofmisfortune_Func");
        TriggerAddEventTimePeriodic(gt_mutatorwheelofmisfortune, 300.0, c_timeGame);
        // TriggerAddEventTimePeriodic(gt_mutatorwheelofmisfortune, 10.0, c_timeGame);
        TriggerEnable(gt_mutatorwheelofmisfortune, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mutator Set | Execute Mutators (Start of the Game)
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorsset_Func (bool testConds, bool runActions) {
        unitgroup lv_RichMineralUnitGroup;
        unitgroup lv_RocksUnitGroup;
        unitgroup lv_AllUnitsUnitGroup;
        unit lv_unit;
        unit lv_RockUnit;
        unit lv_RichMineralUnit;
        int lv_RichMineralCount;
        int lv_RockCount;
        int lv_AllUnitsCount;
        // Actions
        if (!runActions) {
            return true;
        }


        // Lost Relic
        if (gv_mutatorEnabled[10]) {
            gv_relicspawndisabled[RandomInt(0, 1)] = true;
        }

        // Fragile
        lv_AllUnitsUnitGroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_AllUnitsCount = UnitGroupCount(lv_AllUnitsUnitGroup, c_unitCountAll);
        for (;; lv_AllUnitsCount -= 1) {
            lv_unit = UnitGroupUnitFromEnd(lv_AllUnitsUnitGroup, lv_AllUnitsCount);
            if (lv_unit == null) { break; }
            if (gv_mutatorEnabled[17]) {
                UnitBehaviorAdd(lv_unit, "Fragile", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "Fragile", 1);
            }
        }

        // Hardened Rocks
        if (gv_mutatorEnabled[11]) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DestructibleRock4x42", "LifeMax", 0, 8000.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DestructibleRock4x42", "LifeStart", 0, 8000.0);
            CatalogFieldValueSet(c_gameCatalogUnit, "DestructibleRock4x42", "Name", 0, "Hardened Rock");
        }
        else {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DestructibleRock4x42", "LifeMax", 0, 4000.0);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DestructibleRock4x42", "LifeStart", 0, 4000.0);
            CatalogFieldValueSet(c_gameCatalogUnit, "DestructibleRock4x42", "Name", 0, "Destructible Rock");
        }

        if (gv_mutatorEnabled[13]) {
            lv_RichMineralUnitGroup = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_RichMineralCount = UnitGroupCount(lv_RichMineralUnitGroup, c_unitCountAll);
            for (;; lv_RichMineralCount -= 1) {
                lv_RichMineralUnit = UnitGroupUnitFromEnd(lv_RichMineralUnitGroup, lv_RichMineralCount);
                if (lv_RichMineralUnit == null) { break; }
                if (UnitHasBehavior2(lv_RichMineralUnit, "RichMineral") == false) {
                    if (libNtve_gf_RandomPercent() < 80.0) {
                        UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                        if (libNtve_gf_RandomPercent() < 50.0) {
                            UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                            if (libNtve_gf_RandomPercent() < 33.0) {
                                UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                            }
                        }
                    }
                }
            }
        }

        // Rock dissolution
        if (gv_mutatorEnabled[16]) {
            lv_RocksUnitGroup = UnitGroup("DestructibleRock4x42", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_RockCount = UnitGroupCount(lv_RocksUnitGroup, c_unitCountAll);
            for (;; lv_RockCount -= 1) {
                lv_RockUnit = UnitGroupUnitFromEnd(lv_RocksUnitGroup, lv_RockCount);
                if (lv_RockUnit == null) { break; }
                if (UnitHasBehavior2(lv_RockUnit, "RockDissolution") == false) {
                    UnitBehaviorAdd(lv_RockUnit, "RockDissolution", lv_RockUnit, 1);
                }
            }
        }

        if (gv_mutatorEnabled[20]) {
            gv_versusrandomevents = true;
        }
        else {
            gv_versusrandomevents = false;
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorsset_Init () {
        gt_mutatorsset = TriggerCreate("gt_mutatorsset_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Mutator Set | Execute Mutators (Wheel of Misfortune)
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorssetWheelOfMisfortune_Func (bool testConds, bool runActions) {
        unitgroup lv_UtterDarknessUnitGroup;
        unitgroup lv_LowOxygenUnitGroup;
        unitgroup lv_RichMineralUnitGroup;
        unitgroup lv_AllEnemiesMutatorsUnitGroup;
        unitgroup lv_RocksUnitGroup;
        unitgroup lv_AllUnitsUnitGroup;
        unit lv_unit;
        unit lv_RockUnit;
        unit lv_RichMineralUnit;
        unit lv_UtterDarknessUnit;
        unit lv_LowOxygenUnit;
        int lv_RichMineralCount;
        int lv_UtterDarknessUnitCount;
        int lv_LowOxygenUnitCount;
        int lv_RockCount;
        int lv_AllEnemiesMutatorsUnit;
        int lv_AllUnitsCount;

        // Actions
        if (!runActions) {
            return true;
        }

        // Wheel of Misfortune Apply Mutators Whenever Mutator is Added

        // Utter Darkness - Apply to Everything by players
        lv_UtterDarknessUnitGroup = UnitGroupFilter(null, c_playerAny, UnitGroupAlliance(15, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_UtterDarknessUnitCount = UnitGroupCount(lv_UtterDarknessUnitGroup, c_unitCountAll);
        for (;; lv_UtterDarknessUnitCount -= 1) {
            lv_UtterDarknessUnit = UnitGroupUnitFromEnd(lv_UtterDarknessUnitGroup, lv_UtterDarknessUnitCount);
            if (lv_UtterDarknessUnit == null) { break; }
            if (gv_mutatorEnabled[8]) {
                UnitBehaviorAdd(lv_UtterDarknessUnit, "UtterDarkness", lv_UtterDarknessUnit, 1);
            }
            else {
                UnitBehaviorRemove(lv_UtterDarknessUnit, "UtterDarkness", 1);
            }
        }

        // Low Oxygen - Apply to all player's Bio units
        lv_LowOxygenUnitGroup = UnitGroupFilter(null, c_playerAny, UnitGroupAlliance(15, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_LowOxygenUnitCount = UnitGroupCount(lv_LowOxygenUnitGroup, c_unitCountAll);
        for (;; lv_LowOxygenUnitCount -= 1) {
            lv_LowOxygenUnit = UnitGroupUnitFromEnd(lv_LowOxygenUnitGroup, lv_LowOxygenUnitCount);
            if (lv_LowOxygenUnit == null) { break; }
            if (gv_mutatorEnabled[9]) {
                UnitBehaviorAdd(lv_LowOxygenUnit, "LowOxygen", lv_LowOxygenUnit, 1);
                UnitBehaviorAdd(lv_LowOxygenUnit, "LowOxygen2", lv_LowOxygenUnit, 1);
                UnitBehaviorAdd(lv_LowOxygenUnit, "LowOxygenSound", lv_LowOxygenUnit, 1);
            }
            else {
                UnitBehaviorRemove(lv_LowOxygenUnit, "LowOxygen", 1);
                UnitBehaviorRemove(lv_LowOxygenUnit, "LowOxygen2", 1);
                UnitBehaviorRemove(lv_LowOxygenUnit, "LowOxygenSound", 1);
            }
        }

        // Speed Freaks - Apply/Deapply to all Existing Enemy Units
        // We Move Unseen - Apply/Deapply to all Existing Enemy Units
        // Tough Beasts - Apply/Deapply to all Existing Enemy Units
        // Creepfestation - Apply/Deapply to all Existing Enemy Units
        lv_AllEnemiesMutatorsUnitGroup = UnitGroupAlliance(15, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_AllEnemiesMutatorsUnit = UnitGroupCount(lv_AllEnemiesMutatorsUnitGroup, c_unitCountAll);
        for (;; lv_AllEnemiesMutatorsUnit -= 1) {
            lv_unit = UnitGroupUnitFromEnd(lv_AllEnemiesMutatorsUnitGroup, lv_AllEnemiesMutatorsUnit);
            if (lv_unit == null) { break; }
            if ((UnitGetType(lv_unit) == "NydusCanal") || UnitGetType(lv_unit) == "Overmind") {
                continue;
            }
            if (gv_mutatorEnabled[1]) {
                UnitBehaviorAdd(lv_unit, "ToughBeast", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "ToughBeast", 1);
            }
            if (gv_mutatorEnabled[3]) {
                UnitBehaviorAdd(lv_unit, "WeMoveUnseen", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "WeMoveUnseen", 1);
            }
            if (gv_mutatorEnabled[4]) {
                UnitBehaviorAdd(lv_unit, "makeCreep3x3", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "makeCreep3x3", 1);
            }
            if (gv_mutatorEnabled[5]) {
                UnitBehaviorAdd(lv_unit, "SpeedFreak", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "SpeedFreak", 1);
            }
        }

        // Rock dissolution
        lv_RocksUnitGroup = UnitGroup("DestructibleRock4x42", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_RockCount = UnitGroupCount(lv_RocksUnitGroup, c_unitCountAll);
        for (;; lv_RockCount -= 1) {
            lv_RockUnit = UnitGroupUnitFromEnd(lv_RocksUnitGroup, lv_RockCount);
            if (lv_RockUnit == null) { break; }
            if (gv_mutatorEnabled[16]) {
                if (UnitHasBehavior2(lv_RockUnit, "RockDissolution") == false) {
                    UnitBehaviorAdd(lv_RockUnit, "RockDissolution", lv_RockUnit, 1);
                }
            }
            else {
                UnitBehaviorRemove(lv_RockUnit, "RockDissolution", 1);
                UnitBehaviorRemove(lv_RockUnit, "RockDissolution2", UnitBehaviorCount(lv_RockUnit, "RockDissolution2"));
            }
        }

        // Rich Minerals
        lv_RichMineralUnitGroup = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_RichMineralCount = UnitGroupCount(lv_RichMineralUnitGroup, c_unitCountAll);
        for (;; lv_RichMineralCount -= 1) {
            lv_RichMineralUnit = UnitGroupUnitFromEnd(lv_RichMineralUnitGroup, lv_RichMineralCount);
            if (lv_RichMineralUnit == null) { break; }
            if (gv_mutatorEnabled[13]) {
                if (UnitHasBehavior2(lv_RichMineralUnit, "RichMineral") == false) {
                    if (libNtve_gf_RandomPercent() < 80.0) {
                        UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                        if (libNtve_gf_RandomPercent() < 50.0) {
                            UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                            if (libNtve_gf_RandomPercent() < 33.0) {
                                UnitBehaviorAdd(lv_RichMineralUnit, "RichMineral", lv_RichMineralUnit, 1);
                            }
                        }
                    }
                }
            }
            else {
                UnitBehaviorRemove(lv_RichMineralUnit, "RichMineral", UnitBehaviorCount(lv_RichMineralUnit, "RichMineral"));
            }
        }

        // Fragile
        lv_AllUnitsUnitGroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_AllUnitsCount = UnitGroupCount(lv_AllUnitsUnitGroup, c_unitCountAll);
        for (;; lv_AllUnitsCount -= 1) {
            lv_unit = UnitGroupUnitFromEnd(lv_AllUnitsUnitGroup, lv_AllUnitsCount);
            if (lv_unit == null) { break; }
            if (gv_mutatorEnabled[17]) {
                UnitBehaviorAdd(lv_unit, "Fragile", lv_unit, 1);
            }
            else {
                UnitBehaviorRemove(lv_unit, "Fragile", 1);
            }
        }

        IntLoopBegin(1, gv_mutatorstotal);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if (gv_mutatorEnabled[IntLoopCurrent()] && (gv_mutatorupgrade[IntLoopCurrent()] != "None")) {
                libNtve_gf_SetUpgradeLevelForPlayer(1, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(2, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(3, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(4, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(6, gv_mutatorupgrade[IntLoopCurrent()], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(15, gv_mutatorupgrade[IntLoopCurrent()], 1);
            }
            else {
                libNtve_gf_SetUpgradeLevelForPlayer(1, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(2, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(3, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(4, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(5, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(6, gv_mutatorupgrade[IntLoopCurrent()], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(15, gv_mutatorupgrade[IntLoopCurrent()], 0);
            }
        }
        IntLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorssetWheelOfMisfortune_Init () {
        gt_mutatorssetWheelOfMisfortune = TriggerCreate("gt_mutatorssetWheelOfMisfortune_Func");
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: (Enemy unit Enters Region) Apply Mutators
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorsentersregion_Func (bool testConds, bool runActions) {
        fixed lv_plaguechance;
        fixed lv_mutatedchance;

        // Actions
        if (!runActions) {
            return true;
        }
        if (UnitGetOwner(EventUnit()) != 15) {
            return false;
        }
        if (UnitGetType(EventUnit()) == "Overmind") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "NydusCanal") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "GlaiveWurmWeapon") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "GlaiveWurmM2Weapon") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "GlaiveWurmM3Weapon") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "GlaiveWurmM2Weapon2") {
            return false;
        }
        if (UnitGetType(EventUnit()) == "GlaiveWurmM3Weapon2") {
            return false;
        }
        
        lv_plaguechance = 10.0;
        lv_mutatedchance = 55.0;

        // Tough Beasts
        if (gv_mutatorEnabled[1]) {
            UnitBehaviorAdd(EventUnit(), "ToughBeast", EventUnit(), 1);
        }

        // Plague
        if (gv_mutatorEnabled[2]) {
            if (libNtve_gf_RandomPercent() <= lv_plaguechance) {
                UnitBehaviorAdd(EventUnit(), "Plague", EventUnit(), 1);
            }
        }

        // We move unseen
        if (gv_mutatorEnabled[3]) {
            UnitBehaviorAdd(EventUnit(), "WeMoveUnseen", EventUnit(), 1);
        }

        // Fragile
        if (gv_mutatorEnabled[17]) {
            UnitBehaviorAdd(EventUnit(), "Fragile", EventUnit(), 1);
        }

        // Creepfestation
        if (gv_mutatorEnabled[4]) {
            // Unit Filter Match - Requiring only 'Ground' units
            if (UnitGetType(EventUnit()) != "Probeseeker" && UnitFilterMatch(EventUnit(), 15, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
                UnitBehaviorAdd(EventUnit(), "makeCreep3x3", EventUnit(), 1);
            }
        }

        // Speed Freaks
        if (gv_mutatorEnabled[5]) {
            UnitBehaviorAdd(EventUnit(), "SpeedFreak", EventUnit(), 1);
        }

        // Mutated Swarm
        if (gv_mutatorEnabled[6]) {
            // Unit Filter Match - Excluding Bosses from getting mutated
            if (UnitFilterMatch(EventUnit(), 15, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true) {
                if (libNtve_gf_RandomPercent() <= lv_mutatedchance) {
                    UnitBehaviorAdd(EventUnit(), ("MutatedSwarm"+IntToString(RandomInt(1, 4))), EventUnit(), 1);
                }
            }
        }

        if (gv_mutatorEnabled[12]) {
            // Unit Filter Match - Requiring only 'Ground' units
            if (UnitFilterMatch(EventUnit(), 15, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))))) {
                if (UnitGetType(EventUnit()) != "Swarmling") {
                    if (libNtve_gf_RandomPercent() < 50.0) {
                        UnitBehaviorAdd(EventUnit(), "AlienIncubation", EventUnit(), 1);
                    }
                }
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorsentersregion_Init () {
        gt_mutatorsentersregion = TriggerCreate("gt_mutatorsentersregion_Func");
        TriggerAddEventUnitRegion(gt_mutatorsentersregion, null, RegionEntireMap(), true);
        TriggerEnable(gt_mutatorsentersregion, false);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Mutator - Seismic Activity
    //--------------------------------------------------------------------------------------------------
    bool gt_MutatorSeismicActivity_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        unitgroup auto6C8FDEB8_g;
        int auto6C8FDEB8_u;
        unit auto6C8FDEB8_var;

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_mutatorEnabled[7]) {
            Wait(RandomFixed(1.0, 120.0), c_timeGame);
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShake(PlayerGroupLoopCurrent(), "Light", "Earthquake", 0.5, 1.0, 4.0);
            }
            PlayerGroupLoopEnd();
            SoundPlayForPlayer(SoundLink("Music_Stinger_Hit0222224", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            auto6C8FDEB8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto6C8FDEB8_u = UnitGroupCount(auto6C8FDEB8_g, c_unitCountAll);
            for (;; auto6C8FDEB8_u -= 1) {
                auto6C8FDEB8_var = UnitGroupUnitFromEnd(auto6C8FDEB8_g, auto6C8FDEB8_u);
                if (auto6C8FDEB8_var == null) { break; }
                if ((UnitGetOwner(auto6C8FDEB8_var) >= 1) && (UnitGetOwner(auto6C8FDEB8_var) <= 6)) {
                    UnitDamage(auto6C8FDEB8_var, "SeismicActivityEarthquakeDamage", auto6C8FDEB8_var, 0.0);
                }
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_MutatorSeismicActivity_Init () {
        gt_MutatorSeismicActivity = TriggerCreate("gt_MutatorSeismicActivity_Func");
        TriggerAddEventTimePeriodic(gt_MutatorSeismicActivity, 240.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: (Player's unit Enter Region) Apply Mutators Player
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorsentersregionplayers_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }
        if (UnitGetOwner(EventUnit()) > 6) {
            return false;
        }
        if (UnitGetOwner(EventUnit()) < 1) {
            return false;
        }

        // Low Oxygen - Add to all Bio units
        if (UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterBiological), 0, 0, 0))) {
            if (gv_mutatorEnabled[9]) {
                UnitBehaviorAdd(EventUnit(), "LowOxygen", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "LowOxygen2", EventUnit(), 1);
                UnitBehaviorAdd(EventUnit(), "LowOxygenSound", EventUnit(), 1);
            }
        }

        // Utter Darkness - Add to Everything
        if (gv_mutatorEnabled[8]) {
            UnitBehaviorAdd(EventUnit(), "UtterDarkness", EventUnit(), 1);
        }

        // Fragile - Add to Everything
        if (gv_mutatorEnabled[17]) {
            UnitBehaviorAdd(EventUnit(), "Fragile", EventUnit(), 1);
        }

        // Lone Wolf - add to units/structures with weapon
        if (gv_mutatorEnabled[18] && UnitWeaponCount(EventUnit()) > 0) {
            UnitBehaviorAdd(EventUnit(), "LoneWolf", EventUnit(), 1);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorsentersregionplayers_Init () {
        gt_mutatorsentersregionplayers = TriggerCreate("gt_mutatorsentersregionplayers_Func");
        TriggerAddEventUnitRegion(gt_mutatorsentersregionplayers, null, RegionEntireMap(), true);
        TriggerEnable(gt_mutatorsentersregionplayers, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: (Neutral units Enter Region) Apply Mutators Neutral
    //--------------------------------------------------------------------------------------------------
    bool gt_mutatorsentersregionneutral_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }
        if (UnitGetOwner(EventUnit()) != 0) {
            return false;
        }

        // Rich Minerals
        if (gv_mutatorEnabled[13]) {
            if (UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter((1 << c_targetFilterHarvestableResource), 0, 0, 0))) {
                if (UnitHasBehavior2(EventUnit(), "RichMineral") == false) {
                    if (libNtve_gf_RandomPercent() < 80.0) {
                        UnitBehaviorAdd(EventUnit(), "RichMineral", EventUnit(), 1);
                        if (libNtve_gf_RandomPercent() < 55.0) {
                            UnitBehaviorAdd(EventUnit(), "RichMineral", EventUnit(), 1);
                            if (libNtve_gf_RandomPercent() < 33.0) {
                                UnitBehaviorAdd(EventUnit(), "RichMineral", EventUnit(), 1);
                            }
                        }
                    }
                }
            }
        }

        // Rock dissolution
        if (gv_mutatorEnabled[16]) {
            if (UnitGetType(EventUnit()) == "DestructibleRock4x42") {
                if (UnitHasBehavior2(EventUnit(), "RockDissolution") == false) {
                    UnitBehaviorAdd(EventUnit(), "RockDissolution", EventUnit(), 1);
                } 
            }
        }

        if (gv_mutatorEnabled[17]) {
            UnitBehaviorAdd(EventUnit(), "Fragile", EventUnit(), 1);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutatorsentersregionneutral_Init () {
        gt_mutatorsentersregionneutral = TriggerCreate("gt_mutatorsentersregionneutral_Func");
        TriggerAddEventUnitRegion(gt_mutatorsentersregionneutral, null, RegionEntireMap(), true);
        TriggerEnable(gt_mutatorsentersregionneutral, false);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Prestige Levels Upgrades
    //--------------------------------------------------------------------------------------------------
    bool gt_prestigelevelupgrades_Func(bool testConds, bool runActions) {
        int lv_preslevel;
        string[7] lv_upgrade;

        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_GameMode == "Versus" || gv_GameMode == "Classic") {
            return false;
        }

        lv_upgrade[1] = "PrestigeLevelsUpgradesWallRole";
        lv_upgrade[2] = "PrestigeLevelsUpgradesCannonRole";
        lv_upgrade[3] = "PrestigeLevelsUpgradesHealerRole";
        lv_upgrade[4] = "PrestigeLevelsUpgradesGeneratorRole";
        lv_upgrade[5] = "PrestigeLevelsUpgradesEconomyRole";
        lv_upgrade[6] = "PrestigeLevelsUpgradesMercenaryRole";


        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_preslevel = BankValueGetAsInt(gv_playerbanks[PlayerGroupLoopCurrent()], "Sec", "PHR");
            IntLoopBegin(1, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), lv_upgrade[IntLoopCurrent()], 0);

                if (gv_roleChoose[PlayerGroupLoopCurrent()] == 0) {
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), lv_upgrade[IntLoopCurrent()], gv_passivePrestigeLevel[PlayerGroupLoopCurrent()]);
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PrestigeLevelsUpgradesAllRolesDummy", 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), lv_upgrade[gv_roleChoose[PlayerGroupLoopCurrent()]], gv_passivePrestigeLevel[PlayerGroupLoopCurrent()]); 
                }
            }
            IntLoopEnd();
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_prestigelevelupgrades_Init() {
        gt_prestigelevelupgrades = TriggerCreate("gt_prestigelevelupgrades_Func");
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Add/Remove Mutator #
    //--------------------------------------------------------------------------------------------------
    bool gt_addmutatorsandbox_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        int lv_mutator;
        text lv_status;

        if (testConds) {
            if (!(gv_isadmin[EventPlayer()] || gv_GameMode == "SandBox")) {
                return false;
            }
        }

        if (!runActions) {
            return true;
        }

        lv_mutator = StringToInt(StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false))));

        if (lv_mutator < 0 || lv_mutator > gv_mutatorstotal) {
            return false;
        }

        gv_mutatordescription[0] = StringToText("Random Mutators are added periodically to a maximum of ") + IntToText(gv_difficultymaxmutators+1);

        if (gv_mutatorEnabled[lv_mutator]) {
            gf_RemoveMutator(lv_mutator);
            lv_status = StringToText(" removed");
            if (gv_mutatorupgrade[lv_mutator] != "None") {
                libNtve_gf_SetUpgradeLevelForPlayer(1, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(2, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(3, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(4, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(5, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(6, gv_mutatorupgrade[lv_mutator], 0);
                libNtve_gf_SetUpgradeLevelForPlayer(15, gv_mutatorupgrade[lv_mutator], 0);
            }
        }
        else {
            gf_AddMutator(lv_mutator);
            lv_status = StringToText(" added");
            if (gv_mutatorupgrade[lv_mutator] != "None") {
                libNtve_gf_SetUpgradeLevelForPlayer(1, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(2, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(3, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(4, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(5, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(6, gv_mutatorupgrade[lv_mutator], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(15, gv_mutatorupgrade[lv_mutator], 1);
            }
        }

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gv_mutatorname[lv_mutator] + lv_status);

        TriggerExecute(gt_mutatorssetWheelOfMisfortune, false, false);
        TriggerExecute(gt_mutatorsset, false, false);

        DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_addmutatorsandbox_Init () {
        gt_addmutatorsandbox = TriggerCreate("gt_addmutatorsandbox_Func");
        TriggerAddEventChatMessage(gt_addmutatorsandbox, c_playerAny, "-mutator ", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Player The Thing - Teleport to Nydus
    //--------------------------------------------------------------------------------------------------
    bool gt_versusteleporttonydus_Func (bool testConds, bool runActions) {

        if (!runActions) {
            return true;
        }

        UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromName("ZergSpawn")), false);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versusteleporttonydus_Init () {
        gt_versusteleporttonydus = TriggerCreate("gt_versusteleporttonydus_Func");
        TriggerAddEventUnitAbility(gt_versusteleporttonydus, null, AbilityCommand("TeleporttoNydus", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Player The Thing Minerals from Attack
    //--------------------------------------------------------------------------------------------------
    bool gt_versushybridminerals_Func (bool testConds, bool runActions) {
        // Variable Declarations
        fixed lv_y;

        // Variable Initialization

        // Conditions
        if (testConds) {
            if (UnitGetOwner(EventUnit()) == 0) {
                return false;
            }

            if (UnitGetOwner(EventUnit()) == 15) {
                return false;
            }

            if (!((UnitGetOwner(EventUnit()) != gv_theThingPlayer))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        lv_y = UnitGetPropertyFixed(EventUnitTarget(), c_unitPropBountyMinerals, c_unitPropCurrent);
        if (gv_day == true) {
            lv_y = lv_y * gv_versushitmultipliermineralsDay;
        }
        else {
            lv_y = lv_y * gv_versushitmultiplierminerals;
        }
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitTarget()), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_y));
        TextTagCreate((StringExternal("Param/Value/1FF4FAA9") + FixedToText(lv_y, 0)), 28, UnitGetPosition(EventUnitTarget()), 1.0, true, false, PlayerGroupActive());
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        // gv_pointciblC3A9zerg = UnitGetPosition(EventUnit());
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versushybridminerals_Init () {
        gt_versushybridminerals = TriggerCreate("gt_versushybridminerals_Func");
        TriggerAddEventUnitAttacked2(gt_versushybridminerals, null, "HybridE");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Player The Thing - Spawn The Thing Hero
    //--------------------------------------------------------------------------------------------------
    bool gt_spawnTheThing_Func (bool testConds, bool runActions) {

        if (!runActions) {
            return true;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZergUpgrades", c_unitCreateIgnorePlacement, gv_theThingPlayer, UnitGetPosition(UnitFromId(290)));
        gv_VersusZergUpgrades = UnitLastCreated();
        UnitBehaviorAdd(gv_VersusZergUpgrades, "NydusRegeneration", gv_VersusZergUpgrades, 1);
        UnitControlGroupAddUnit(gv_theThingPlayer, 2, gv_VersusZergUpgrades);

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F7CAB794"));
        Wait(gv_tempsJourInitial, c_timeGame);
        // libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_theThingPlayer, RegionRandomPoint(RegionFromName("Center")));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, gv_theThingPlayer, RegionRandomPoint(RegionFromId(3)));
        gv_TheThingHero = UnitLastCreated();
        UnitClearSelection(gv_theThingPlayer);
        UnitSelect(UnitLastCreated(), gv_theThingPlayer, true);
        UnitControlGroupAddUnit(gv_theThingPlayer, 1, gv_TheThingHero);
        CameraPan(gv_theThingPlayer, UnitGetPosition(gv_TheThingHero), 0.0, -1, 10, false);
        TriggerEnable(gt_versuszergincome, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(StringToText("The Thing"), Color(255.0, 0.0, 0.0)) + StringToText(" has spawned!"));
        SoundPlay(SoundLink("HybridAPissed", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(4.0, c_timeGame);
        SoundPlay(SoundLink("HybridAYes", -1), PlayerGroupAll(), 100.0, 0.0);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_spawnTheThing_Init () {
        gt_spawnTheThing = TriggerCreate("gt_spawnTheThing_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T2
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT2_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 1.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 0.90000 8.000000");
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont2multiplierforspark);

        gv_zergincome = (gv_zergincome + 2);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT2_Init () {
        gt_EvolutionT2 = TriggerCreate("gt_EvolutionT2_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT2, null, AbilityCommand("TheThingHybridPlayerResearch", 20), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T3
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT3_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 2.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 1.100000 8.000000");
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont3multiplierforspark);

        gv_zergincome = (gv_zergincome + 3);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT3_Init () {
        gt_EvolutionT3 = TriggerCreate("gt_EvolutionT3_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT3, null, AbilityCommand("TheThingHybridPlayerResearch", 21), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T4
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT4_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 3.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 1.200000 8.000000");
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont4multiplierforspark);

        gv_zergincome = (gv_zergincome + 4);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT4_Init () {
        gt_EvolutionT4 = TriggerCreate("gt_EvolutionT4_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT4, null, AbilityCommand("TheThingHybridPlayerResearch", 22), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T5
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT5_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 5.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 1.350000 8.000000");
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont5multiplierforspark);

        gv_zergincome = (gv_zergincome + 5);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT5_Init () {
        gt_EvolutionT5 = TriggerCreate("gt_EvolutionT5_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT5, null, AbilityCommand("TheThingHybridPlayerResearch", 23), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T6
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT6_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 10.0));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetScale 1.550000 8.000000");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloStart");
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "HaloSetColor 255,0,0");
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont6multiplierforspark);

        gv_zergincome = (gv_zergincome + 6);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT6_Init () {
        gt_EvolutionT6 = TriggerCreate("gt_EvolutionT6_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT6, null, AbilityCommand("TheThingHybridPlayerResearch", 24), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Evolution T7
    //--------------------------------------------------------------------------------------------------
    bool gt_EvolutionT7_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        UnitBehaviorAdd(EventUnit(), "ZeratulStun", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLevel, (UnitGetPropertyFixed(EventUnit(), c_unitPropLevel, c_unitPropCurrent) + 10.0));
        TechTreeUpgradeAddLevel(EventPlayer(), "PiercingSpark6", gv_versusevolutiont7multiplierforspark);

        gv_zergincome = (gv_zergincome + 7);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EvolutionT7_Init () {
        gt_EvolutionT7 = TriggerCreate("gt_EvolutionT7_Func");
        TriggerAddEventUnitAbility(gt_EvolutionT7, null, AbilityCommand("PlayerTheThingResearch2", 19), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Probe Win (Thing is killed)
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusProbeWinThingiskilled_Func (bool testConds, bool runActions) {
        // Variable Declarations
        point lv_point;
        fixed lv_x;
        fixed lv_y;
        point lv_pointD;

        // Variable Initialization
        if (gv_GameMode != "Versus") {
            TriggerEnable(TriggerGetCurrent(), false);
        }

        lv_point = Point(lv_x, lv_y);
        lv_x = 32.0;
        lv_y = 120.0;
        lv_pointD = UnitGetPosition(EventUnit());

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "HybridReaver"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerEnable(gt_SwitchTime, false);
        DialogDestroy(gv_chronodialogue);
        DialogDestroy(gv_trademenuimproveddialogue);
        BoardDestroy(gv_tableau);
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        TriggerEnable(gt_SwitchTime, false);
        TriggerEnable(gt_ZergInvasion, false);
        TriggerEnable(gt_ZergInvasionImpossible, false);
        TriggerEnable(gt_airsquadron29, false);
        TriggerEnable(gt_airsquadron29impossible, false);
        TriggerEnable(gt_capitainezergs1225, false);
        TriggerEnable(gt_capitaineMutas1725, false);
        TriggerEnable(gt_capitainezergsfinal2635, false);
        TriggerEnable(gt_AttaquealC3A9atoireovermind, false);

        SoundPlay(SoundLink("UI_BNet_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, StringExternal("Param/Value/B8256E37"));
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/DBC112A9"));

        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionEntireMap(), 20.0, false);

        }
        PlayerGroupLoopEnd();

        SoundtrackPlay(PlayerGroupSingle(gv_theThingPlayer), c_soundtrackCategoryMusic, "MusicVictory_Zerg", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(gv_probeGroupPlayer, c_soundtrackCategoryMusic, "Music_EndCreditsA1", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 99));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_point = PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), RandomFixed(-8.0, 8.0), RandomFixed(-8.0, 8.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksBlue", 0, 0, lv_point);
            lv_point = PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), RandomFixed(-8.0, 8.0), RandomFixed(-8.0, 8.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksRed", 0, 0, lv_point);
            lv_point = PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), RandomFixed(-8.0, 8.0), RandomFixed(-8.0, 8.0));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireworksYellow", 0, 0, lv_point);
        }
        UnitGroupLoopEnd();
        Wait(4.0, c_timeGame);
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), lv_pointD, 2.0, -1, 10, true);
        }
        PlayerGroupLoopEnd();

        Wait(4.0, c_timeGame);
        GameOver(gv_theThingPlayer, c_gameOverDefeat, true, true);

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusProbeWinThingiskilled_Init () {
        gt_VersusProbeWinThingiskilled = TriggerCreate("gt_VersusProbeWinThingiskilled_Func");
        TriggerAddEventUnitDied(gt_VersusProbeWinThingiskilled, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Income each 2 sec
    //--------------------------------------------------------------------------------------------------
    bool gt_versuszergincome_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        PlayerModifyPropertyInt(gv_theThingPlayer, c_playerPropMinerals, c_playerPropOperAdd, gv_zergincome);
        PlayerModifyPropertyInt(gv_theThingPlayer, c_playerPropCustom, c_playerPropOperAdd, gv_zergincome);
        PlayerModifyPropertyInt(gv_theThingPlayer, c_playerPropTerrazine, c_playerPropOperAdd, gv_zergincome);
        PlayerModifyPropertyInt(gv_theThingPlayer, c_playerPropVespene, c_playerPropOperAdd, gv_zergincome);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versuszergincome_Init () {
        gt_versuszergincome = TriggerCreate("gt_versuszergincome_Func");
        TriggerEnable(gt_versuszergincome, false);
        TriggerAddEventTimePeriodic(gt_versuszergincome, 1.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Income increased used
    //--------------------------------------------------------------------------------------------------
    bool gt_Incomeincreasedused_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);
        gv_zergincome = (gv_zergincome + 1);
        UIDisplayMessage(PlayerGroupSingle(gv_theThingPlayer), c_messageAreaSubtitle, (StringToText("Zerg income: ") + IntToText(gv_zergincome)));
        if ((TechTreeUpgradeCount(EventPlayer(), "IncomeIncreased1", c_techCountCompleteOnly) < 8)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "IncomeIncreased1", 1);
        }
        else {
            TechTreeUpgradeAddLevel(EventPlayer(), "IncomeIncreased2", 1);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_Incomeincreasedused_Init () {
        gt_Incomeincreasedused = TriggerCreate("gt_Incomeincreasedused_Func");
        TriggerAddEventUnitAbility(gt_Incomeincreasedused, null, AbilityCommand("IncomeIncreased1", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Nydus Regeneration Upgrade Used
    //--------------------------------------------------------------------------------------------------
    bool gt_nydusregenerationused_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);

        TechTreeUpgradeAddLevel(EventPlayer(), "NydusRegenerationUpgrade", 1);

        if ((TechTreeUpgradeCount(EventPlayer(), "NydusRegenerationUpgradeCost1", c_techCountCompleteOnly) < 4)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "NydusRegenerationUpgradeCost1", 1);
        }
        else {
            TechTreeUpgradeAddLevel(EventPlayer(), "NydusRegenerationUpgradeCost2", 1);
        }
        // if ((TechTreeUpgradeCount(EventPlayer(), "NydusRegenerationUpgrade", c_techCountCompleteOnly) > 6)) {
        //     UnitAbilityShow(gv_VersusZergUpgrades, "NydusRegenerationAuraUpgrade", false);
        // }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_nydusregenerationused_Init () {
        gt_nydusregenerationused = TriggerCreate("gt_nydusregenerationused_Func");
        TriggerAddEventUnitAbility(gt_nydusregenerationused, null, AbilityCommand("NydusRegenerationAuraUpgrade", 0), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Player The Thing Rage Effect
    //--------------------------------------------------------------------------------------------------
    bool gt_versushybridrage_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitTechTreeBehaviorCount(EventUnitTarget(), "Rage", c_techCountQueuedOrBetter) < 25)) {
            UnitBehaviorAdd(EventUnitTarget(), "Rage", EventUnitTarget(), 1);
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versushybridrage_Init () {
        gt_versushybridrage = TriggerCreate("gt_versushybridrage_Func");
        TriggerAddEventUnitAttacked2(gt_versushybridrage, null, "HybridE");
        TriggerEnable(gt_versushybridrage, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Enable Rage Effect (Attack Speed Final upgrade)
    //--------------------------------------------------------------------------------------------------
    bool gt_versusenablerage_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        TriggerEnable(gt_versushybridrage, true);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versusenablerage_Init () {
        gt_versusenablerage = TriggerCreate("gt_versusenablerage_Func");
        TriggerAddEventUnitAbility(gt_versusenablerage, null, AbilityCommand("PlayerTheThingResearch2", 15), c_unitAbilStageComplete, false);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Max 500000 HP Player The Thing
    //--------------------------------------------------------------------------------------------------
    bool gt_versusmax500000hp_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (EventUnitAbility() == AbilityCommand("TheThingHybridPlayerResearch", 11)) {
            if ((UnitGetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, c_unitPropCurrent) + 50000.0) > 500000.0) {
                UnitSetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, 500000.0);
                TechTreeUpgradeAllow(gv_theThingPlayer, "HPUpgrade6", false);
            }
        }
        if (EventUnitAbility() == AbilityCommand("TheThingHybridPlayerResearch", 24)) {
            if ((UnitGetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, c_unitPropCurrent) + 100000.0) > 500000.0) {
                UnitSetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, 500000.0);
                TechTreeUpgradeAllow(gv_theThingPlayer, "HPUpgrade6", false);
            }
        }
        if (EventUnitAbility() == AbilityCommand("PlayerTheThingResearch2", 19)) {
            if ((UnitGetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, c_unitPropCurrent) + 100000.0) > 500000.0) {
                UnitSetPropertyFixed(gv_TheThingHero, c_unitPropLifeMax, 500000.0);
                TechTreeUpgradeAllow(gv_theThingPlayer, "HPUpgrade6", false);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versusmax500000hp_Init () {
        gt_versusmax500000hp = TriggerCreate("gt_versusmax500000hp_Func");
        TriggerAddEventUnitAbility(gt_versusmax500000hp, null, AbilityCommand("TheThingHybridPlayerResearch", 11), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_versusmax500000hp, null, AbilityCommand("TheThingHybridPlayerResearch", 24), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_versusmax500000hp, null, AbilityCommand("PlayerTheThingResearch2", 19), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Max 500000 Shields Player The Thing
    //--------------------------------------------------------------------------------------------------
    bool gt_versusmax500000shields_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if ((UnitGetPropertyFixed(gv_TheThingHero, c_unitPropShieldsMax, c_unitPropCurrent) + 200000.0) > 500000.0) {
            UnitSetPropertyFixed(gv_TheThingHero, c_unitPropShieldsMax, 500000.0);
            TechTreeUpgradeAllow(gv_theThingPlayer, "ShieldUpgrade8", false);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_versusmax500000shields_Init () {
        gt_versusmax500000shields = TriggerCreate("gt_versusmax500000shields_Func");
        TriggerAddEventUnitAbility(gt_versusmax500000shields, null, AbilityCommand("PlayerTheThingResearch2", 12), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Oxygen Station Replenish (Apply Behaviors)
    //--------------------------------------------------------------------------------------------------
    bool gt_OxygenStationReplenishAB_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (UnitHasBehavior2(EventUnit(), "OxygenAutoRefiller")) {return false;}

        if (UnitHasBehavior2(EventUnit(), "LowOxygen") || UnitHasBehavior2(EventUnit(), "LowOxygen2") || UnitHasBehavior2(EventUnit(), "OxygenOversaturation") || UnitHasBehavior2(EventUnit(), "OxygenReplenish")) {
            if (UnitBehaviorEnabled(EventUnit(), "OxygenOversaturation")) {
                if (UnitBehaviorDuration(EventUnit(), "OxygenOversaturation") < 50.0*(1.0 + IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ExpandedCylinders", c_techCountQueuedOrBetter)))) {
                    UnitBehaviorAdd(EventUnit(), "OxygenOversaturation", EventUnit(), 1);
                    if (UnitBehaviorDuration(EventUnit(), "OxygenOversaturation") > 50.0*(1.0 + IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ExpandedCylinders", c_techCountQueuedOrBetter)))) {
                        UnitBehaviorSetDurationRemaining(EventUnit(), "OxygenOversaturation", 50.0*(1.0 + IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ExpandedCylinders", c_techCountQueuedOrBetter))));
                    }
                }
            }
            if (UnitBehaviorEnabled(EventUnit(), "OxygenReplenish")) {
                if ((UnitBehaviorDuration(EventUnit(), "OxygenReplenish") < 57.0)) {
                    UnitBehaviorAdd(EventUnit(), "OxygenReplenish", EventUnit(), 1);
                    if ((UnitBehaviorDuration(EventUnit(), "OxygenReplenish") > 60.0)) {
                        UnitBehaviorSetDurationRemaining(EventUnit(), "OxygenReplenish", 60.0);
                    }
                }
                else {
                    UnitBehaviorAdd(EventUnit(), "OxygenOversaturation", EventUnit(), 1);
                    UnitBehaviorSetDurationRemaining(EventUnit(), "OxygenReplenish", 60.0);
                }
            }

            if (UnitBehaviorEnabled(EventUnit(), "LowOxygen") || UnitBehaviorEnabled(EventUnit(), "LowOxygen2")) {
                UnitBehaviorAdd(EventUnit(), "OxygenReplenish", EventUnit(), 1);
            }
        }
        else {
            return false;
        }
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_OxygenStationReplenishAB_Init () {
        gt_OxygenStationReplenishAB = TriggerCreate("gt_OxygenStationReplenishAB_Func");
        TriggerAddEventUnitDamaged(gt_OxygenStationReplenishAB, null, c_unitDamageTypeAny, c_unitDamageEither, "OxygenStationReplenishDummyDamage");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Alien Incubation - Set HP
    //--------------------------------------------------------------------------------------------------
    bool gt_AlienIncubationHP_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_caster;
        unit lv_target;

        // Variable Initialization
        lv_caster = EventPlayerEffectUsedUnit(c_effectUnitSource);
        lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPropertyFixed(lv_target, c_unitPropLifeMax, UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)*0.25);
        UnitSetPropertyFixed(lv_target, c_unitPropLife, UnitGetPropertyFixed(lv_caster, c_unitPropLifeMax, c_unitPropCurrent)*0.25);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_AlienIncubationHP_Init () {
        gt_AlienIncubationHP = TriggerCreate("gt_AlienIncubationHP_Func");
        TriggerAddEventPlayerEffectUsed(gt_AlienIncubationHP, 15, "AlienIncubationDummyDamage");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Upgrades Selection
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergUpgradesSelection_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }
        
        if (!PlayerGroupHasPlayer(gv_zergGroupPlayer, EventPlayer())) {
            return false;
        }

        UnitClearSelection(EventPlayer());
        UnitSelect(gv_VersusZergUpgrades, EventPlayer(), true);
    
        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergUpgradesSelection_Init() {
        gt_VersusZergUpgradesSelection = TriggerCreate("gt_VersusZergUpgradesSelection_Func");
        TriggerAddEventUnitSelected(gt_VersusZergUpgradesSelection, UnitRefFromUnit(UnitFromId(290)), c_playerAny, true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Upgrades Research Player The Thing
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergUpgradesResearch_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        ActorCreate(ActorScopeFromUnit(EventUnit()), "SpeedUpModel", null, null, null);

        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 0)) {
            gv_versusresearch_hybridbehemoth = true;
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 1)) {
            gv_versusresearch_hybriddestroyer = true;
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 2)) {
            gv_versusresearch_hybridnemesis = true;
            TriggerEnable(gt_hybridnemesis, true);
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 3)) {
            gv_versusTotalBonusZergLimit = gv_versusTotalBonusZergLimit + gv_versusResearchZergLimitPerUpgrade;
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 4)) {
            TechTreeUpgradeAddLevel(15, "IncreaseZergDamage", 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Zerg Damage: +" + IntToString(50+5*TechTreeUpgradeCount(gv_theThingPlayer, "IncreaseZergDamage", c_techCountQueuedOrBetter)) + "%<n/>The Thing Damage: +" + IntToString(5*TechTreeUpgradeCount(gv_theThingPlayer, "IncreaseZergDamage", c_techCountQueuedOrBetter)) + "%"));
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 5)) {
            TechTreeUpgradeAddLevel(15, "IncreaseZergDamageReduction", 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Zergs Damage Reduction: " + IntToString(5*TechTreeUpgradeCount(gv_theThingPlayer, "IncreaseZergDamageReduction", c_techCountQueuedOrBetter)) + "%"));
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 6)) {
            gv_versusresearch_groundinvasion = true;
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 7)) {
            gv_versusresearch_airinvasion = true;
        }
        if (EventUnitAbility() == AbilityCommand("ZergUpgradesResearch", 8)) {
            gv_versusresearch_bossinvasion = true;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergUpgradesResearch_Init () {
        gt_VersusZergUpgradesResearch = TriggerCreate("gt_VersusZergUpgradesResearch_Func");
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 0), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 1), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 2), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 3), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 4), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 5), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 6), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 7), c_unitAbilStageComplete, false);
        TriggerAddEventUnitAbility(gt_VersusZergUpgradesResearch, null, AbilityCommand("ZergUpgradesResearch", 8), c_unitAbilStageComplete, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Random Events enabled
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventsNightEnabled_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }
        
        if (gv_GameMode != "Versus") {
            TriggerStop(TriggerGetCurrent());
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }
    
        gv_versusrandomevents = true;
        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventsNightEnabled_Init() {
        gt_VersusZergEventsNightEnabled = TriggerCreate("gt_VersusZergEventsNightEnabled_Func");
        TriggerAddEventTimeElapsed(gt_VersusZergEventsNightEnabled, 400.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Random Events (Night)
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventsNight_Func(bool testConds, bool runActions) {
        int lv_players;
        fixed lv_eventchance;
        int lv_event;

        // Actions
        if (!runActions) {
        return true;
        }
        
        lv_players = PlayerGroupCount(gv_probeGroupPlayer);
        lv_eventchance = 10.0 + IntToFixed(lv_players*2) + gv_versusrandomeventchanceNight;
        if (gv_mutatorEnabled[20]) {
            lv_eventchance = 60.0 + IntToFixed(lv_players*2) + gv_versusrandomeventchanceNight;
        }

        if (libNtve_gf_RandomPercent() < lv_eventchance) {
            Wait(RandomFixed( (gv_tempsNuit - gv_tempsNuit*0.95), gv_tempsNuit*0.5 ), c_timeGame);

            lv_event = RandomInt(1, 1);
            if (lv_event == 1) {
                TriggerExecute(gt_VersusZergEventNightBuff, false, false);
            }

            if (gv_versusrandomeventchanceNight <= 10.0) {
                gv_versusrandomeventchanceNight = RandomFixed(-15.0, 0.0);
            }
            else {
                gv_versusrandomeventchanceNight = RandomFixed(0.0, 5.0);
            }
        }
        else {
            gv_versusrandomeventchanceNight = gv_versusrandomeventchanceNight + IntToFixed(lv_players*3) + IntToFixed(6/MaxI(1, lv_players)) + 10.0;
        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventsNight_Init() {
        gt_VersusZergEventsNight = TriggerCreate("gt_VersusZergEventsNight_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - Zerg Events (Day)
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventsDay_Func(bool testConds, bool runActions) {
        int lv_players;
        fixed lv_eventchance;
        int lv_event;
        // gv_versusrandomeventchance

        // Actions
        if (!runActions) {
        return true;
        }
        
        lv_players = PlayerGroupCount(gv_probeGroupPlayer);
        lv_eventchance = 10.0 + IntToFixed(lv_players*2) + gv_versusrandomeventchanceDay;

        if (libNtve_gf_RandomPercent() < lv_eventchance) {
            Wait(RandomFixed( (gv_tempsJour - gv_tempsJour*0.95), gv_tempsJour*0.6 ), c_timeGame);

            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(UnitGetPosition(UnitFromId(290)), 6.1), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 5)) {
                // lv_event = RandomInt(2, 3);
            }
            else {
                lv_event = RandomInt(1, 1);
                // lv_event = RandomInt(1, 3);
            }

            if (lv_event == 1) {
                TriggerExecute(gt_VersusZergEventDaySpawnMineral, false, false);
            }
            if (gv_versusrandomeventchanceDay <= 10.0) {
                gv_versusrandomeventchanceDay = RandomFixed(-10.0, 0.0);
            }
            else {
                gv_versusrandomeventchanceDay = RandomFixed(0.0, 5.0);
            }
        }
        else {
            gv_versusrandomeventchanceDay = gv_versusrandomeventchanceDay + IntToFixed(lv_players*3) + IntToFixed(6/MaxI(1, lv_players)) + 5.0;
            return true;
        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventsDay_Init() {
        gt_VersusZergEventsDay = TriggerCreate("gt_VersusZergEventsDay_Func");
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Map Creation Init (Creation De La Carte Map Init)
    //--------------------------------------------------------------------------------------------------
    bool gt_MapCreationInit_Func(bool testConds, bool runActions) {
        string[9] lv_unit;
        const int lv_minerals = 14;
        int lv_rocksNordOuest;
        int lv_rocksSudEst;
        int lv_rocksNordEst;
        int lv_rocksSudOeust;
        int lv_i;
        int lv_j;
        fixed lv_x;
        fixed lv_y;
        int lv_z;
        int lv_a;
        int lv_b;
        point lv_point;
        point lv_pointF;
        int init_i;
        unitgroup[3] lv_PortalUnitGroup;
        unit[3] lv_Portal;
        int lv_randomint;
        int lv_randomint2rocks;
        unitgroup lv_RocksUnitGroup;
        unit lv_RockUnit;
        int lv_RocksUnitGroupCount;
        unitgroup lv_MineralsUnitGroup;
        unit lv_MineralUnit;
        int lv_MineralsUnitGroupCount;
        region lv_relicregion1;
        region lv_relicregion2;

        // Actions
        if (!runActions) {
        return true;
        }
        

        DialogCreate(500, 100, c_anchorBottomRight, 25, 450, true);
        gv_mutatorSideDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), false);

        lv_x = 32.0;
        lv_y = 128.0;
        lv_point = Point(lv_x, lv_y);
        lv_pointF = Point(lv_x, lv_y);
        lv_unit[0] = "DestructibleRock4x42";
        lv_unit[1] = "MineralField";
        lv_unit[2] = "MineralField2";
        lv_unit[3] = "MineralField22";
        lv_unit[4] = "MineralField222";
        lv_unit[5] = "MineralField";
        lv_unit[6] = "MineralField2";
        lv_unit[7] = "MineralField22";
        lv_unit[8] = "ProtossRelic";
        UnitCreate(1, lv_unit[0], 0, 0, Point(110.0, 116.0), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[0], 0, 0, Point(112.0, 115.0), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[0], 0, 0, Point(114.0, 114.0), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[0], 0, 0, Point(112.0, 113.0), libNtve_gf_RandomAngle());
            // Bot side 4 crystals spot
            lv_z = RandomInt(1, 4);
            UnitCreate(1, lv_unit[lv_z], 0, 0, PointWithOffset(PointFromName("BotCrystal1"), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[(lv_z + 1)], 0, 0, PointWithOffset(PointFromName("BotCrystal2"), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[(lv_z + 2)], 0, 0, PointWithOffset(PointFromName("BotCrystal3"), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[(lv_z + 3)], 0, 0, PointWithOffset(PointFromName("BotCrystal4"), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        
            UnitCreate(1, lv_unit[lv_z], 0, 0, PointWithOffset(PointFromName("SouthMineralStart"), RandomFixed(-2.0, 2.0), RandomFixed(-2.0, 2.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(1, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            for (lv_i = 1; lv_i <= 3; lv_i += 1 ) {
                UnitCreate(RandomInt(1, 2), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            }
            UnitCreate(RandomInt(0, 1), lv_unit[lv_z+2], 0, 0, PointWithOffset(PointFromName("SouthMineralStart2"), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(1, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            for (lv_i = 1; lv_i <= 4; lv_i += 1 ) {
                UnitCreate(RandomInt(1, 3), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
            }
        lv_point = Point(32.0, 84.0);
        for (lv_i = 1; lv_i <= 4; lv_i += 1 ) {
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 0.0, 2.0), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 0.0, -2.0), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 2.0, 1.0), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 2.0, -1.0), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 4.0, 0.0), libNtve_gf_RandomAngle());
            lv_point = PointWithOffset(lv_point, 6.0, 0.0);
        }
        lv_point = Point(32.0, 62.0);
        lv_a = RandomInt(1, 4);
        for (lv_i = 1; lv_i <= 12; lv_i += 1 ) {
            UnitCreate(1, lv_unit[lv_a], 0, 0, PointWithOffset(lv_point, RandomInt(-14, -12), 0.0), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(3, 8), lv_unit[0], 0, 0, UnitGetPosition(UnitLastCreated()), libNtve_gf_RandomAngle());
            UnitCreate(1, lv_unit[lv_a], 0, 0, PointWithOffset(lv_point, RandomInt(108, 110), 0.0), libNtve_gf_RandomAngle());
            UnitCreate(RandomInt(3, 8), lv_unit[0], 0, 0, UnitGetPosition(UnitLastCreated()), libNtve_gf_RandomAngle());
            lv_point = PointWithOffset(lv_point, 0.0, 6.0);
            if ((lv_a >= 7)) {
                lv_a = 1;
            }
            else {
                lv_a = (lv_a + 1);
            }
        }
        for (lv_i = 1; lv_i <= lv_minerals; lv_i += 1 ) {
            lv_point = RegionRandomPoint(RegionFromId(7));
            UnitCreate(1, lv_unit[lv_a], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
                lv_rocksNordOuest = (lv_rocksNordOuest + 1);
            }
            else {
                for (lv_j = 1; lv_j <= 20; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            lv_point = RegionRandomPoint(RegionFromId(8));
            UnitCreate(1, lv_unit[lv_a], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
                lv_rocksNordEst = (lv_rocksNordEst + 1);
            }
            else {
                for (lv_j = 1; lv_j <= 20; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            lv_point = RegionRandomPoint(RegionFromName("RelicZoneSouth"));
            UnitCreate(1, lv_unit[lv_a], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
                // lv_rocksNordEst = (lv_rocksNordEst + 1);
            }
            else {
                for (lv_j = 1; lv_j <= 20; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }

            lv_point = RegionRandomPoint(RegionFromName("BotRocksTop"));
            UnitCreate(RandomInt(0, 1), lv_unit[lv_a], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 5.9), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
            }
            else {
                for (lv_j = 1; lv_j <= 13; lv_j += 1 ) {
                    UnitCreate(RandomInt(0, 1), lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            if ((lv_a >= 7)) {
                lv_a = 1;
            }
            else {
                lv_a = (lv_a + 1);
            }
        }
        for (lv_i = 1; lv_i <= 20; lv_i += 1 ) {
            lv_point = RegionRandomPoint(RegionFromId(11));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
            lv_point = RegionRandomPoint(RegionFromId(2));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
            lv_point = RegionRandomPoint(RegionFromId(45));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
        }
        UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(12), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        lv_z = RandomInt(1, 4);
        UnitCreate(1, lv_unit[lv_z], 0, 0, Point(30.0, 73.0), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 1)], 0, 0, Point(36.0, RandomInt(68, 70)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 2)], 0, 0, Point(27.0, RandomInt(62, 67)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 3)], 0, 0, Point(34.0, RandomInt(60, 62)), libNtve_gf_RandomAngle());
        lv_z = RandomInt(1, 4);
        UnitCreate(1, lv_unit[lv_z], 0, 0, Point(132.0, 73.0), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 1)], 0, 0, Point(124.0, RandomInt(62, 64)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 2)], 0, 0, Point(130.0, RandomInt(62, 64)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 3)], 0, 0, Point(126.0, RandomInt(70, 71)), libNtve_gf_RandomAngle());
        lv_z = RandomInt(1, 4);
        UnitCreate(1, lv_unit[lv_z], 0, 0, Point(114.0, RandomInt(125, 128)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 1)], 0, 0, Point(120.0, RandomInt(120, 128)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 2)], 0, 0, Point(126.0, RandomInt(120, 128)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(RandomInt(0, 1), "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(-2, 2), RandomInt(-2, 2)), libNtve_gf_RandomAngle());
        UnitCreate(1, lv_unit[(lv_z + 3)], 0, 0, Point(132.0, RandomInt(120, 128)), libNtve_gf_RandomAngle());


        for (lv_i = 1; lv_j <= 30; lv_j += 1 ) {
            UnitCreate(1, "DestructibleRock4x42", 0, 0, PointWithOffset(UnitGetPosition(UnitLastCreated()), RandomInt(0, 2), RandomInt(-2, 0)), libNtve_gf_RandomAngle());
        }
        lv_point = Point(40.0, 97.0);
        UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
        for (lv_i = 1; lv_i <= 16; lv_i += 1 ) {
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, -2.0, 1.0), libNtve_gf_RandomAngle());
            lv_point = UnitGetPosition(UnitLastCreated());
        }
        lv_point = Point(114.0, 108.0);
        UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
        for (lv_i = 1; lv_i <= 18; lv_i += 1 ) {
            UnitCreate(1, lv_unit[0], 0, 0, PointWithOffset(lv_point, 2.0, -1.0), libNtve_gf_RandomAngle());
            lv_point = UnitGetPosition(UnitLastCreated());
        }



        // Rock Creation for Portal Zones
        lv_b = RandomInt(1, 4);
        for (lv_i = 1; lv_i <= 15; lv_i += 1 ) {
            // lv_point = Point(25.0, 214.0);
            // lv_point = Point(76.0, 214.0);
            // lv_point = Point(133.0, 214.0);
            lv_point = RegionRandomPoint(RegionFromName("PortableZone1"));
            UnitCreate(1, lv_unit[lv_b], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 2.4), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
            }
            else {
                lv_randomint2rocks = RandomInt(4, 8);
                for (lv_j = 1; lv_j <= lv_randomint2rocks; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            lv_point = RegionRandomPoint(RegionFromName("PortableZone2"));
            UnitCreate(1, lv_unit[lv_b], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 2.4), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
            }
            else {
                lv_randomint2rocks = RandomInt(4, 8);
                for (lv_j = 1; lv_j <= lv_randomint2rocks; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            lv_point = RegionRandomPoint(RegionFromName("PortableZone3"));
            UnitCreate(1, lv_unit[lv_b], 0, 0, lv_point, libNtve_gf_RandomAngle());
            if ((UnitGroupCount(UnitGroup(null, 0, RegionCircle(lv_point, 2.4), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 1)) {
                UnitRemove(UnitLastCreated());
            }
            else {
                lv_randomint2rocks = RandomInt(4, 8);
                for (lv_j = 1; lv_j <= lv_randomint2rocks; lv_j += 1 ) {
                    UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
                }
            }
            if ((lv_b >= 7)) {
                lv_b = 1;
            }
            else {
                lv_b = (lv_b + 1);
            }
        }

        for (lv_i = 0; lv_i <= 50; lv_i += 1 ) {
            lv_point = RegionRandomPoint(RegionFromName("PortableZone1"));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
            lv_point = RegionRandomPoint(RegionFromName("PortableZone2"));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
            lv_point = RegionRandomPoint(RegionFromName("PortableZone3"));
            UnitCreate(1, lv_unit[0], 0, 0, lv_point, libNtve_gf_RandomAngle());
        }


        for (init_i = 0; init_i < 3; init_i += 1) {
            lv_PortalUnitGroup[init_i] = UnitGroup("StarShipAdunTeleportPadDoodad", c_playerAny, RegionFromName("PortableZone" + IntToString(init_i+1)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

        for (init_i = 0; init_i < 3; init_i += 1) {
            do {
                lv_randomint = RandomInt(0, 2);
            }while (lv_PortalUnitGroup[lv_randomint] == null);
            gv_PortalsEntersUnits[init_i] = UnitGroupRandomUnit(lv_PortalUnitGroup[lv_randomint], c_unitCountAlive);
            UnitGroupRemove(lv_PortalUnitGroup[lv_randomint], gv_PortalsEntersUnits[init_i]);
            gv_PortalsLeaversUnits[init_i] = UnitGroupUnit(lv_PortalUnitGroup[lv_randomint], 1);
            lv_PortalUnitGroup[lv_randomint] = null;

            gv_PortableZoneArtifactZones[init_i][0] = RegionFromName("PortableZone" + IntToString(lv_randomint+1));
            IntLoopBegin(1, 10);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if (RegionFromName("PortableZone" + IntToString(lv_randomint+1) + "ArtifactZone" + IntToString(IntLoopCurrent())) != null) {
                    gv_PortableZoneArtifactZones[init_i][IntLoopCurrent()] = RegionFromName("PortableZone" + IntToString(lv_randomint+1) + "ArtifactZone" + IntToString(IntLoopCurrent()));
                }
            }
            IntLoopEnd();
        }

        for (init_i = 0; init_i < 3; init_i += 1) {
            RegionSetCenter(RegionFromName("PortalEnter" + IntToString(init_i+1)), UnitGetPosition(gv_PortalsEntersUnits[init_i]));
            RegionSetCenter(RegionFromName("PortalLeave" + IntToString(init_i+1)), UnitGetPosition(gv_PortalsLeaversUnits[init_i]));
            RegionSetCenter(RegionFromName("PortalEnter" + IntToString(init_i+1) + "EnlargedDummy"), UnitGetPosition(gv_PortalsEntersUnits[init_i]));
            RegionSetCenter(RegionFromName("PortalLeave" + IntToString(init_i+1) + "EnlargedDummy"), UnitGetPosition(gv_PortalsLeaversUnits[init_i]));
        }


        for (init_i = 1; init_i < 10; init_i += 1) {
            if (gv_PortableZoneArtifactZones[0][init_i] != null) {
                gv_PortableZoneArtifactZonesRegionsCount[0] += 1;
            }
            if (gv_PortableZoneArtifactZones[1][init_i] != null) {
                gv_PortableZoneArtifactZonesRegionsCount[1] += 1;
            }
            if (gv_PortableZoneArtifactZones[2][init_i] != null) {
                gv_PortableZoneArtifactZonesRegionsCount[2] += 1;
            }
        }

        // Remove Rocks/Minerals around Portals
        for (lv_i = 1; lv_i <= 3; lv_i += 1 ) {
            // Clear Entrance zones from rocks
            lv_RocksUnitGroup = UnitGroup("DestructibleRock4x42", c_playerAny, RegionFromName("PortalEnter" + IntToString(lv_i) + "EnlargedDummy"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_RocksUnitGroupCount = UnitGroupCount(lv_RocksUnitGroup, c_unitCountAll);
            for (;; lv_RocksUnitGroupCount -= 1) {
                lv_RockUnit = UnitGroupUnitFromEnd(lv_RocksUnitGroup, lv_RocksUnitGroupCount);
                if (lv_RockUnit == null) { break; }
                UnitRemove(lv_RockUnit);
            }
            // Clear Exit zones from rocks
            lv_RocksUnitGroup = UnitGroup("DestructibleRock4x42", c_playerAny, RegionFromName("PortalLeave" + IntToString(lv_i) + "EnlargedDummy"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_RocksUnitGroupCount = UnitGroupCount(lv_RocksUnitGroup, c_unitCountAll);
            for (;; lv_RocksUnitGroupCount -= 1) {
                lv_RockUnit = UnitGroupUnitFromEnd(lv_RocksUnitGroup, lv_RocksUnitGroupCount);
                if (lv_RockUnit == null) { break; }
                UnitRemove(lv_RockUnit);
            }
            // Clear Entrance zones from minerals
            lv_MineralsUnitGroup = UnitGroup(null, 0, RegionFromName("PortalEnter" + IntToString(lv_i) + "EnlargedDummy"), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            lv_MineralsUnitGroupCount = UnitGroupCount(lv_MineralsUnitGroup, c_unitCountAll);
            for (;; lv_MineralsUnitGroupCount -= 1) {
                lv_MineralUnit = UnitGroupUnitFromEnd(lv_MineralsUnitGroup, lv_MineralsUnitGroupCount);
                if (lv_MineralUnit == null) { break; }
                UnitRemove(lv_MineralUnit);
            }
            // Clear Exit zones from minerals
            lv_MineralsUnitGroup = UnitGroup(null, 0, RegionFromName("PortalLeave" + IntToString(lv_i) + "EnlargedDummy"), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            lv_MineralsUnitGroupCount = UnitGroupCount(lv_MineralsUnitGroup, c_unitCountAll);
            for (;; lv_MineralsUnitGroupCount -= 1) {
                lv_MineralUnit = UnitGroupUnitFromEnd(lv_MineralsUnitGroup, lv_MineralsUnitGroupCount);
                if (lv_MineralUnit == null) { break; }
                UnitRemove(lv_MineralUnit);
            }
        }

        // Choose an area for the Relic by randomizing
        if (libNtve_gf_RandomPercent() < 12.0) {
            UnitCreate(1, "ProtossRelic", 0, 0, RegionRandomPoint(gv_PortableZoneArtifactZones[0][RandomInt(1, gv_PortableZoneArtifactZonesRegionsCount[0])]), libNtve_gf_RandomAngle());
        } else if (libNtve_gf_RandomPercent() < 60.0) {
            UnitCreate(1, "ProtossRelic", 0, 0, RegionRandomPoint(gv_PortableZoneArtifactZones[1][RandomInt(1, gv_PortableZoneArtifactZonesRegionsCount[1])]), libNtve_gf_RandomAngle());
        }
        else {
            UnitCreate(1, "ProtossRelic", 0, 0, RegionRandomPoint(gv_PortableZoneArtifactZones[2][RandomInt(1, gv_PortableZoneArtifactZonesRegionsCount[2])]), libNtve_gf_RandomAngle());
        }

        // If Versus mode was chosen:
        if (gv_GameMode == "Versus") {
            // Add hostile Player to hostile enemy group
            PlayerGroupAdd(gv_zergGroupPlayer, 15);
            // Dummy Versus upgrade for all players
            PlayerGroupLoopBegin(PlayerGroupAll());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "VersusGameMode", 1);
                }
            PlayerGroupLoopEnd();
        }

        // Add invulnerability behavior to statues
        UnitBehaviorAddPlayer(UnitFromId(30), "Harmless", 0, 1);
        UnitBehaviorAddPlayer(UnitFromId(31), "Harmless", 0, 1);
        UnitBehaviorAddPlayer(UnitFromId(85), "Harmless", 0, 1);
        UnitBehaviorAddPlayer(UnitFromId(86), "Harmless", 0, 1);

        lv_randomint = RandomInt(1, 3);
        if (lv_randomint == 1) {
            lv_relicregion1 = RegionFromId(8);
            lv_relicregion2 = RegionFromId(7);
        }
        if (lv_randomint == 2) {
            lv_relicregion1 = RegionFromId(8);
            lv_relicregion2 = RegionFromName("RelicZoneSouth");
        }
        if (lv_randomint == 3) {
            lv_relicregion1 = RegionFromId(7);
            lv_relicregion2 = RegionFromName("RelicZoneSouth");
        }
        if (gv_relicspawndisabled[0] == false) {
            UnitCreate(1, "ProtossRelic", 0, 0, RegionRandomPoint(lv_relicregion1), libNtve_gf_RandomAngle());
        }
        if (gv_relicspawndisabled[1] == false) {
            UnitCreate(1, "ProtossRelic", 0, 0, RegionRandomPoint(lv_relicregion2), libNtve_gf_RandomAngle());
        }
        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_MapCreationInit_Init() {
        gt_MapCreationInit = TriggerCreate("gt_MapCreationInit_Func");
        TriggerAddEventMapInit(gt_MapCreationInit);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Statues ok - Activate Portals
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuesPortal_Func(bool testConds, bool runActions) {
        unitgroup lv_PadUnitGroup;
        int lv_totalNumberOfPads;
        unit lv_CurrentPadIteration;

        // Actions
        if (!runActions) {
        return true;
        }
        
        lv_PadUnitGroup = UnitGroup("StarShipAdunTeleportPadDoodad", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_totalNumberOfPads = UnitGroupCount(lv_PadUnitGroup, c_unitCountAll);
        for (;; lv_totalNumberOfPads -= 1) {
            lv_CurrentPadIteration = UnitGroupUnitFromEnd(lv_PadUnitGroup, lv_totalNumberOfPads);
            if (lv_CurrentPadIteration == null) { break; }
            libNtve_gf_SendActorMessageToUnit(lv_CurrentPadIteration, "ModelSwap StarShipAdun_TeleportPad2");
        }

        TriggerEnable(gt_StatuesPortalActivated, true);
        TimerStart(gv_StatuePortalsExistTimer, 120.0, false, c_timeGame);
        Wait(3.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("DOCSTR_FirstPortalEnter2"));

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_StatuesPortal_Init() {
        gt_StatuesPortal = TriggerCreate("gt_StatuesPortal_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Activated First Portal
    //--------------------------------------------------------------------------------------------------
    bool gt_StatuesPortalActivated_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        if (gv_EnteredPortal[EventPlayer()]) {
            return false;
        }

        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }

        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromName("PortalEnter1")), false);
        CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), gv_PortableZoneArtifactZones[0][0], true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "DummyStop", EventUnit(), 1);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("DOCSTR_FirstPortalEnter"));
        gv_EnteredPortal[EventPlayer()] = true;

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_StatuesPortalActivated_Init() {
        gt_StatuesPortalActivated = TriggerCreate("gt_StatuesPortalActivated_Func");
        TriggerEnable(gt_StatuesPortalActivated, false);
        TriggerAddEventUnitRegion(gt_StatuesPortalActivated, null, RegionFromId(31), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Portal First Leave -> Second Enter
    //--------------------------------------------------------------------------------------------------
    bool gt_PortalLeaveEnter1_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }
        
        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromName("PortalEnter2")), false);
        CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), gv_PortableZoneArtifactZones[1][0], true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "DummyStop", EventUnit(), 1);

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_PortalLeaveEnter1_Init() {
        gt_PortalLeaveEnter1 = TriggerCreate("gt_PortalLeaveEnter1_Func");
        TriggerAddEventUnitRegion(gt_PortalLeaveEnter1, null, RegionFromName("PortalLeave1"), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Portal Second Leave -> Third Enter
    //--------------------------------------------------------------------------------------------------
    bool gt_PortalLeaveEnter2_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }


        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }
        
        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromName("PortalEnter3")), false);
        CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), gv_PortableZoneArtifactZones[2][0], true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "DummyStop", EventUnit(), 1);

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_PortalLeaveEnter2_Init() {
        gt_PortalLeaveEnter2 = TriggerCreate("gt_PortalLeaveEnter2_Func");
        TriggerAddEventUnitRegion(gt_PortalLeaveEnter2, null, RegionFromName("PortalLeave2"), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Portal Third Leave -> First Enter Loop
    //--------------------------------------------------------------------------------------------------
    bool gt_PortalLeaveEnter3_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }


        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }
        
        gv_CanLeave[UnitGetOwner(EventUnit())][1] = false;
        UnitSetPosition(EventUnit(), RegionGetCenter(RegionFromName("PortalEnter1")), false);
        CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), gv_PortableZoneArtifactZones[0][0], true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "DummyStop", EventUnit(), 1);

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_PortalLeaveEnter3_Init() {
        gt_PortalLeaveEnter3 = TriggerCreate("gt_PortalLeaveEnter3_Func");
        TriggerAddEventUnitRegion(gt_PortalLeaveEnter3, null, RegionFromName("PortalLeave3"), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Leave Portal Chain from Enter
    //--------------------------------------------------------------------------------------------------
    bool gt_PortalChainLeave_Func(bool testConds, bool runActions) {
        int init_i;    
        // Actions
        if (!runActions) {
        return true;
        }

        for (init_i = 1; init_i < 4; init_i += 1) {
            if (EventUnitRegion() == RegionFromName("PortalEnter" + IntToString(init_i)) && gv_CanLeave[UnitGetOwner(EventUnit())][init_i] == false) {
                return false;
            }
        }
        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }

        UnitSetPosition(EventUnit(), PointWithOffset(RegionGetCenter(RegionFromId(31)), 0.0, -1.0), false);
        CameraSetBounds(PlayerGroupSingle(UnitGetOwner(EventUnit())), RegionFromName("PlayableMap"), true);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 0, false);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(EventUnit(), "DummyStop", EventUnit(), 1);

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_PortalChainLeave_Init() {
        gt_PortalChainLeave = TriggerCreate("gt_PortalChainLeave_Func");
        TriggerAddEventUnitRegion(gt_PortalChainLeave, null, RegionFromName("PortalEnter1"), true);
        TriggerAddEventUnitRegion(gt_PortalChainLeave, null, RegionFromName("PortalEnter2"), true);
        TriggerAddEventUnitRegion(gt_PortalChainLeave, null, RegionFromName("PortalEnter3"), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Leave Portal Enter - Set opportunity to leave
    //--------------------------------------------------------------------------------------------------
    bool gt_PortalLeaveOpportunity_Func(bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
        return true;
        }

        if (UnitGetType(EventUnit()) != "Probe") {
            return false;
        }

        for (init_i = 1; init_i < 4; init_i += 1) {
            if (EventUnitRegion() == RegionFromName("PortalEnter" + IntToString(init_i) + "EnlargedDummy")) {
                gv_CanLeave[UnitGetOwner(EventUnit())][init_i] = true;
            }
        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_PortalLeaveOpportunity_Init() {
        gt_PortalLeaveOpportunity = TriggerCreate("gt_PortalLeaveOpportunity_Func");
        TriggerAddEventUnitRegion(gt_PortalLeaveOpportunity, null, RegionFromName("PortalEnter1EnlargedDummy"), false);
        TriggerAddEventUnitRegion(gt_PortalLeaveOpportunity, null, RegionFromName("PortalEnter2EnlargedDummy"), false);
        TriggerAddEventUnitRegion(gt_PortalLeaveOpportunity, null, RegionFromName("PortalEnter3EnlargedDummy"), false);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Destroy Portals / End Statue Event
    //--------------------------------------------------------------------------------------------------
    bool gt_DestroyPortalsEndEvent_Func (bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }


        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            for (init_i = 1; init_i < 4; init_i += 1) {
                if (libNtve_gf_UnitInRegion(gv_probe[PlayerGroupLoopCurrent()], RegionFromName("PortableZone" + IntToString(init_i)))) {
                    UnitSetPosition(gv_probe[PlayerGroupLoopCurrent()], PointWithOffset(RegionGetCenter(RegionFromId(31)), 0.0, -1.0), false);
                    CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromName("PlayableMap"), true);
                    CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_probe[PlayerGroupLoopCurrent()]), 0.0, -1, 0, false);
                    UnitIssueOrder(gv_probe[PlayerGroupLoopCurrent()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    UnitBehaviorAdd(gv_probe[PlayerGroupLoopCurrent()], "DummyStop", gv_probe[PlayerGroupLoopCurrent()], 1);
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("DOCSTR_PortalDeathMessage"));
                }
            }
        }
        PlayerGroupLoopEnd();
        TriggerEnable(gt_StatuetouchC3A91, false);
        TriggerEnable(gt_StatuetouchC3A92, false);
        TriggerEnable(gt_StatuetouchC3A93, false);
        TriggerEnable(gt_StatuetouchC3A94, false);
        TriggerEnable(gt_StatuesPortalActivated, false);
        TriggerEnable(gt_PortalLeaveEnter1, false);
        TriggerEnable(gt_PortalLeaveEnter2, false);
        TriggerEnable(gt_PortalLeaveEnter3, false);
        TriggerEnable(gt_PortalChainLeave, false);

        Wait(0.125, c_timeGame);
        UnitKill(UnitFromId(30));
        UnitKill(UnitFromId(31));
        UnitKill(UnitFromId(85));
        UnitKill(UnitFromId(86));
        UnitKill(gv_PortalsEntersUnits[0]);
        UnitKill(gv_PortalsEntersUnits[1]);
        UnitKill(gv_PortalsEntersUnits[2]);
        UnitKill(gv_PortalsLeaversUnits[0]);
        UnitKill(gv_PortalsLeaversUnits[1]);
        UnitKill(gv_PortalsLeaversUnits[2]);
        UnitKill(UnitFromId(755417269));

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_DestroyPortalsEndEvent_Init () {
        gt_DestroyPortalsEndEvent = TriggerCreate("gt_DestroyPortalsEndEvent_Func");
        TriggerAddEventTimer(gt_DestroyPortalsEndEvent, gv_StatuePortalsExistTimer);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus - The Thing auto-tp First X days (set behavior duration in data)
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusAutoTP_Func (bool testConds, bool runActions) {

        // Actions
        if (!runActions) {
            return true;
        }

        UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromName("ZergSpawn")), false);
        CameraPan(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(StringToText("The Thing has an auto-tp to nydus first 400 seconds after spawning"), Color(0.0, 255.0, 0.0)));

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusAutoTP_Init () {
        gt_VersusAutoTP = TriggerCreate("gt_VersusAutoTP_Func");
        TriggerAddEventUnitDamaged(gt_VersusAutoTP, null, c_unitDamageTypeAny, c_unitDamageEither, "AutoTPDummyDamage");
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus Zerg Events (Day) - Spawn Mineral
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventDaySpawnMineral_Func(bool testConds, bool runActions) {
        int lv_RandomMineral;
        string[4] lv_Minerals;
        color[4] lv_MineralsColorsText;
        fixed lv_randomoffsetX;
        fixed lv_randomoffsetY;
        int lv_maxIterations;

        // Actions
        if (!runActions) {
        return true;
        }
        
        lv_Minerals[0] = "MineralField";
        lv_Minerals[1] = "MineralField222";
        lv_Minerals[2] = "MineralField22";
        lv_Minerals[3] = "MineralField2";

        lv_MineralsColorsText[0] = Color(0.0, 255.0, 255.0);
        lv_MineralsColorsText[1] = Color(0.0, 255.0, 0.0);
        lv_MineralsColorsText[2] = Color(255.0, 0.0, 255.0);
        lv_MineralsColorsText[3] = Color(255.0, 0.0, 0.0);

        // do { lv_randomoffsetX = RandomFixed(-7.0, 7.0); } while ( -3.0 < lv_randomoffsetX < 3.0 );
        // do { lv_randomoffsetY = RandomFixed(-7.0, 7.0); } while ( -3.0 < lv_randomoffsetY < 3.0 );
        do { 
            lv_randomoffsetX = RandomFixed(-6.0, 6.0); 
            lv_randomoffsetY = RandomFixed(-6.0, 6.0);
            lv_maxIterations += 1;
            if (lv_maxIterations >= 500) {
                return false;
            }
        } while ( 
            (lv_maxIterations < 500) &&
            ((lv_randomoffsetX > -3.0 && lv_randomoffsetX < 3.0) || 
            (lv_randomoffsetY > -3.0 && lv_randomoffsetY < 3.0) || 
            (UnitGroupCount(UnitGroup(null, 0, RegionCircle(PointWithOffset(UnitGetPosition(UnitFromId(290)), lv_randomoffsetX, lv_randomoffsetY), 2.1), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0)) 
        );

        lv_maxIterations = 0;

        if ((UnitGroupCount(UnitGroup("MineralField", 0, RegionCircle(UnitGetPosition(UnitFromId(290)), 6.1), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) < 1)) {
            lv_RandomMineral = 0;
        }
        else {
            do {
                lv_RandomMineral = RandomInt(1, 3);
                lv_maxIterations += 1;
                if (lv_maxIterations >= 500) {
                    return false;
                }
            } while (
                (lv_maxIterations < 500) &&
                (UnitGroupCount(UnitGroup(lv_Minerals[lv_RandomMineral], 0, RegionCircle(UnitGetPosition(UnitFromId(290)), 6.1), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) >= 2)
            );
        }

        UnitCreate(1, lv_Minerals[lv_RandomMineral], 0, 0, PointWithOffset(UnitGetPosition(UnitFromId(290)), lv_randomoffsetX, lv_randomoffsetY), libNtve_gf_RandomAngle());
        if (UnitLastCreated() != null) {
            UIDisplayMessage(gv_zergGroupPlayer, c_messageAreaSubtitle, TextWithColor(UnitGetName(UnitLastCreated()), lv_MineralsColorsText[lv_RandomMineral]) + TextWithColor(StringToText(" has spawned near Nydus"), Color(0.0, 255.0, 0.0)));
        }
        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventDaySpawnMineral_Init() {
        gt_VersusZergEventDaySpawnMineral = TriggerCreate("gt_VersusZergEventDaySpawnMineral_Func");
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus Zerg Events (Night) - Absorber Shield / Damage Buff / Speed Buff zergs
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventNightBuff_Func (bool testConds, bool runActions) {
        unitgroup lv_ZergUnitGroup;
        unit lv_ZergUnit;
        int lv_ZergUnitCount;
        int lv_RandomInt;
        string[3] lv_Behavior;
        text[3] lv_BehaviorMessage;
        text lv_Message;
        fixed lv_BuffTimerDuration;

        // Actions
        if (!runActions) {
            return true;
        }

        lv_Behavior[0] = "ZergEventAbsorber";
        lv_Behavior[1] = "ZergEventDamage";
        lv_Behavior[2] = "ZergEventSpeed";
        lv_BehaviorMessage[0] = StringExternal("DOCSTR_VersusEvent_Absorber");
        lv_BehaviorMessage[1] = StringExternal("DOCSTR_VersusEvent_Damage");
        lv_BehaviorMessage[2] = StringExternal("DOCSTR_VersusEvent_Speed");

        lv_RandomInt = RandomInt(0, 2);

        lv_BuffTimerDuration = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_Behavior[lv_RandomInt], "Duration", gv_theThingPlayer);
        lv_Message = lv_BehaviorMessage[lv_RandomInt];

        gv_VersusZergEventNightBuffActive[lv_RandomInt] = true;
        TriggerEnable(gt_VersusZergEventNightBuffEnterRegion, true);
        TimerStart(gv_VersusZergEventNightBuffTimer, lv_BuffTimerDuration, false, c_timeGame);

        lv_ZergUnitGroup = UnitGroupAlliance(15, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_ZergUnitCount = UnitGroupCount(lv_ZergUnitGroup, c_unitCountAll);
        for (;; lv_ZergUnitCount -= 1) {
            lv_ZergUnit = UnitGroupUnitFromEnd(lv_ZergUnitGroup, lv_ZergUnitCount);
            if (lv_ZergUnit == null) { break; }
            UnitBehaviorAdd(lv_ZergUnit, lv_Behavior[lv_RandomInt], lv_ZergUnit, 1);
        }

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_Message);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventNightBuff_Init () {
        gt_VersusZergEventNightBuff = TriggerCreate("gt_VersusZergEventNightBuff_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus Zerg Events (Night) - Event Expire
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventNightBuffExpire_Func (bool testConds, bool runActions) {
        unitgroup lv_ZergUnitGroup;
        unit lv_ZergUnit;
        int lv_ZergUnitCount;
        string[3] lv_Behavior;
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }

        lv_Behavior[0] = "ZergEventAbsorber";
        lv_Behavior[1] = "ZergEventDamage";
        lv_Behavior[2] = "ZergEventSpeed";

        gv_VersusZergEventNightBuffActive[0] = false;
        gv_VersusZergEventNightBuffActive[1] = false;
        gv_VersusZergEventNightBuffActive[2] = false;
        TriggerEnable(gt_VersusZergEventNightBuffEnterRegion, false);

        lv_ZergUnitGroup = UnitGroupAlliance(15, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_ZergUnitCount = UnitGroupCount(lv_ZergUnitGroup, c_unitCountAll);
        for (;; lv_ZergUnitCount -= 1) {
            init_i = 0;
            lv_ZergUnit = UnitGroupUnitFromEnd(lv_ZergUnitGroup, lv_ZergUnitCount);
            if (lv_ZergUnit == null) { break; }
            while (lv_Behavior[init_i] != "") {
                UnitBehaviorRemove(lv_ZergUnit, lv_Behavior[init_i], 1);
                init_i += 1;
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventNightBuffExpire_Init () {
        gt_VersusZergEventNightBuffExpire = TriggerCreate("gt_VersusZergEventNightBuffExpire_Func");
        TriggerAddEventTimer(gt_VersusZergEventNightBuffExpire, gv_VersusZergEventNightBuffTimer);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Versus Zerg Events (Night) - Enter Region
    //--------------------------------------------------------------------------------------------------
    bool gt_VersusZergEventNightBuffEnterRegion_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }

        if (!PlayerGroupHasPlayer(gv_zergGroupPlayer, UnitGetOwner(EventUnit()))) {
            return false;
        }

        if (gv_VersusZergEventNightBuffActive[0]) {
            UnitBehaviorAdd(EventUnit(), "ZergEventAbsorber", EventUnit(), 1);
        }

        if (gv_VersusZergEventNightBuffActive[1]) {
            UnitBehaviorAdd(EventUnit(), "ZergEventDamage", EventUnit(), 1);
        }

        if (gv_VersusZergEventNightBuffActive[2]) {
            UnitBehaviorAdd(EventUnit(), "ZergEventSpeed", EventUnit(), 1);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_VersusZergEventNightBuffEnterRegion_Init () {
        gt_VersusZergEventNightBuffEnterRegion = TriggerCreate("gt_VersusZergEventNightBuffEnterRegion_Func");
        TriggerAddEventUnitRegion(gt_VersusZergEventNightBuffEnterRegion, null, RegionEntireMap(), true);
        TriggerEnable(gt_VersusZergEventNightBuffEnterRegion, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Give relics (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxgiverelics_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        int lv_RelicCount;
        unit lv_Relic;
        unitgroup lv_RelicGroup;

        if (testConds) {
            if (!(gv_isadmin[EventPlayer()] || gv_GameMode == "SandBox")) {
                return false;
            }
        }

        if (!runActions) {
            return true;
        }

        lv_RelicGroup = UnitGroup("ProtossRelic", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_RelicCount = UnitGroupCount(lv_RelicGroup, c_unitCountAll);
        for (;; lv_RelicCount -= 1) {
            lv_Relic = UnitGroupUnitFromEnd(lv_RelicGroup, lv_RelicCount);
            if (lv_Relic == null) { break; }
            UnitKill(lv_Relic);
            GameAddChargeUsed("AArtifact", -1.0);
            SoundPlay(SoundLink("UI_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
            UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/4E41AA2F")));
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxgiverelics_Init () {
        gt_sandboxgiverelics = TriggerCreate("gt_sandboxgiverelics_Func");
        TriggerAddEventChatMessage(gt_sandboxgiverelics, c_playerAny, "-relics", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skins - show dialog
    //--------------------------------------------------------------------------------------------------
    bool gt_SkinsDialog_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }
        
        if (!PlayerGroupHasPlayer(gv_probeGroupPlayer, EventPlayer())) {return false;}

        if (!gv_openedskinsdialog[EventPlayer()]) {
            DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupSingle(EventPlayer()), true);
            gv_openedskinsdialog[EventPlayer()] = true;
        }
        else {
            DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupSingle(EventPlayer()), false);
            gv_openedskinsdialog[EventPlayer()] = false;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_SkinsDialog_Init () {
        gt_SkinsDialog = TriggerCreate("gt_SkinsDialog_Func");
        TriggerAddEventChatMessage(gt_SkinsDialog, c_playerAny, "-skins", true);
        TriggerAddEventChatMessage(gt_SkinsDialog, c_playerAny, "-skin", true);
        TriggerEnable(gt_SkinsDialog, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skins Dialog Click
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkinsDialogClick_Func (bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }

        // Default skin click
        if (gv_CosmeticSkinDefaultButton == EventDialogControl()) {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_skins[gv_skinChoose[EventPlayer()]].lv_skin);
            UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
            gv_CustomSkinChoice[EventPlayer()] = "default";
        }

        // Personal skin 1 click
        if (gv_personalskin1Button == EventDialogControl()) {
            for (init_i = 0; init_i <= gv_TotalPersonalSkins1; init_i += 1) {
                if ((gv_personalskinHandlersEU[init_i] == "" || gv_personalskinHandlersEU[init_i] == "none") && (gv_personalskinHandlersNA[init_i] == "" || gv_personalskinHandlersNA[init_i] == "none")) {continue;}
                if (PlayerHandle(EventPlayer()) == gv_personalskinHandlersEU[init_i] || PlayerHandle(EventPlayer()) == gv_personalskinHandlersNA[init_i]) {
                    libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_personalskin1Skins[init_i]);
                    gv_CustomSkinChoice[EventPlayer()] = "per1";

                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                    if (gv_personalskin1IsFlyer[init_i]) {
                        UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                    }
                    return true;
                }
            }
        }

        // Personal skin 2 click
        if (gv_personalskin2Button == EventDialogControl()) {
            for (init_i = 0; init_i <= gv_TotalPersonalSkins1; init_i += 1) {
                if ((gv_personalskinHandlersEU[init_i] == "" || gv_personalskinHandlersEU[init_i] == "none") && (gv_personalskinHandlersNA[init_i] == "" || gv_personalskinHandlersNA[init_i] == "none")) {continue;}
                if (PlayerHandle(EventPlayer()) == gv_personalskinHandlersEU[init_i] || PlayerHandle(EventPlayer()) == gv_personalskinHandlersNA[init_i]) {
                    libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_personalskin2Skins[init_i]);
                    gv_CustomSkinChoice[EventPlayer()] = "per2";

                    UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                    if (gv_personalskin2IsFlyer[init_i]) {
                        UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                    }
                    return true;
                }
            }
        }

        // Prestige skins click
        for (init_i = 0; init_i < gv_TotalPrestigeSkins; init_i += 1) {
            if (gv_CosmeticSkinPrestige[init_i].lv_Button != c_invalidDialogControlId && gv_CosmeticSkinPrestige[init_i].lv_Button == EventDialogControl()) {
                libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_CosmeticSkinPrestige[init_i].lv_skin);
                gv_CustomSkinChoice[EventPlayer()] = gv_CosmeticSkinPrestige[init_i].lv_bankkey;

                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                if (gv_CosmeticSkinPrestige[init_i].lv_isFlyer) {
                    UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                }
                return true;
            }
        }

        // Event skins click
        for (init_i = 0; init_i < gv_TotalEventSkins; init_i += 1) {
            if (gv_CosmeticSkinEvent[init_i].lv_Button != c_invalidDialogControlId && gv_CosmeticSkinEvent[init_i].lv_Button == EventDialogControl()) {
                libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_CosmeticSkinEvent[init_i].lv_skin);
                gv_CustomSkinChoice[EventPlayer()] = gv_CosmeticSkinEvent[init_i].lv_bankkey;

                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                if (gv_CosmeticSkinEvent[init_i].lv_isFlyer) {
                    UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                }
                return true;
            }
        }

        // Custom skins click
        for (init_i = 0; init_i < gv_TotalCustomSkins; init_i += 1) {
            if (gv_DonorCustomSkins[init_i].lv_button != c_invalidDialogControlId && gv_DonorCustomSkins[init_i].lv_button == EventDialogControl()) {
                libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_DonorCustomSkins[init_i].lv_skin);
                gv_CustomSkinChoice[EventPlayer()] = gv_DonorCustomSkins[init_i].lv_bankStorageKey;

                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                if (gv_DonorCustomSkins[init_i].lv_isFlyer) {
                    UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                }
                return true;
            }
        }

        // Donor skins click
        for (init_i = 0; init_i < gv_TotalDonorSkins; init_i += 1) {
            if (gv_DonorSkins[init_i].lv_button != c_invalidDialogControlId && gv_DonorSkins[init_i].lv_button == EventDialogControl()) {
                libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], gv_DonorSkins[init_i].lv_skin);
                gv_CustomSkinChoice[EventPlayer()] = gv_DonorSkins[init_i].lv_bankKey;
        
                UnitBehaviorRemove(gv_probe[EventPlayer()], "FlyerHeightBehavior", 1);
                if (gv_DonorSkins[init_i].lv_isFlyer) {
                    UnitBehaviorAdd(gv_probe[EventPlayer()], "FlyerHeightBehavior", gv_probe[EventPlayer()], 1);
                }
                return true;
            }
        }

        // Save skin button
        if (gv_CosmeticSkinDialogSaveButton == EventDialogControl()) {
            if (gv_CustomSkinChoice[EventPlayer()] != "") {
                BankValueSetFromString(gv_playerbanks[EventPlayer()], "Sec", "skn", gv_CustomSkinChoice[EventPlayer()]);
                BankOptionSet(gv_playerbanks[EventPlayer()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[EventPlayer()]);
            }
        }

        // Close dialog button
        if (gv_CosmeticSkinDialogCloseButton == EventDialogControl()) {
            DialogSetVisible(gv_CosmeticSkinDialog, PlayerGroupSingle(EventPlayer()), false);
            gv_openedskinsdialog[EventPlayer()] = false;
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkinsDialogClick_Init () {
        gt_CustomSkinsDialogClick = TriggerCreate("gt_CustomSkinsDialogClick_Func");
        TriggerAddEventDialogControl(gt_CustomSkinsDialogClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skins - Swap at Start (pre-saved)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkinsSwapStart_Func (bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }
        
        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_CheckSavedSkinAvailability(PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkinsSwapStart_Init () {
        gt_CustomSkinsSwapStart = TriggerCreate("gt_CustomSkinsSwapStart_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Commands - Donator Halo
    //--------------------------------------------------------------------------------------------------
    bool gt_CommandsDonatorHalo_Func(bool testConds, bool runActions) {
        string lv_input;
    
        // Actions
        if (!runActions) {
        return true;
        }

        if (!(gv_DonateLevelPlayer[EventPlayer()] >= 1 || gv_isadmin[EventPlayer()])) {
            return false;
        }

        lv_input = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));
    
        if (EventChatMessage(true) == "-halo") {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText("Available Halos: red, orange, yellow, light green, green, dark green, cyan, dark blue, blue, teal, violet, purple, pink, white, grey, black, none, rainbow"));
            return true; 
        }

        gv_rainbowHalo[(EventPlayer())] = false;

        if (lv_input == "red") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,0,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "orange") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,128,64");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "yellow") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,255,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "light green") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 128,255,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "green") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "dark green") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,64,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "cyan") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "dark blue") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,64,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "blue") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "teal") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,255,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "violet") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,0,160");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "purple") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 128,0,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "pink") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,128,192");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "white") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,255,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "grey") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 192,192,192");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "black") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 50,50,50");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "none") {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,0,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
        } else if (lv_input == "rainbow") {
            gv_rainbowHalo[(EventPlayer())] = true;
            while ((gv_rainbowHalo[(EventPlayer())])) {
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,0,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,128,64");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,255,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 128,255,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,64,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,64,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,128,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,255,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,0,160");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 128,0,128");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,128,192");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 255,255,255");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 192,192,192");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 50,50,50");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            Wait(0.5, c_timeGame);
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloSetColor 0,0,0");
            libNtve_gf_SendActorMessageToUnit(gv_probe[EventPlayer()], "HaloStart");
            }
        } else {}
        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CommandsDonatorHalo_Init() {
        gt_CommandsDonatorHalo = TriggerCreate("gt_CommandsDonatorHalo_Func");
        TriggerAddEventChatMessage(gt_CommandsDonatorHalo, c_playerAny, "-halo ", false);
        TriggerAddEventChatMessage(gt_CommandsDonatorHalo, c_playerAny, "-halo", true);
    }


    //--------------------------------------------------------------------------------------------------
    // Trigger: Event Mutators
    //--------------------------------------------------------------------------------------------------
    bool gt_EventMutators_Func (bool testConds, bool runActions) {
        int init_i;
        // Actions
        if (!runActions) {
            return true;
        }
        
        if (!(gv_GameMode == "Default")) {
            return false;
        }

        // Christmas Bonus - 14th December - 14th January 
        if (libNtve_gf_GetMonthFromDateTime(CurrentDateTimeGet()) == "December" && GetDateTimeDay(CurrentDateTimeGet()) >= 14 
        || libNtve_gf_GetMonthFromDateTime(CurrentDateTimeGet()) == "January" && GetDateTimeDay(CurrentDateTimeGet()) <= 14) {
            gf_MutatorEstimateBonusDescription(19);
            gf_AddMutator(19);
            gv_totalestimatedlevels += gv_mutatorbonuslevels[19];
            gv_totalestimatedwins += gv_mutatorbonuswins[19];
            gv_mutatorbonusestimatedlevels += gv_mutatorbonuslevels[19];
            gv_mutatorbonusestimatedwins += gv_mutatorbonuswins[19];
        }


        DialogSetVisible(gv_mutatorSideDialog, PlayerGroupAll(), true);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_EventMutators_Init () {
        gt_EventMutators = TriggerCreate("gt_EventMutators_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Muted Communication (message duplicate)
    //--------------------------------------------------------------------------------------------------
    bool gt_mutedcommunication_Func (bool testConds, bool runActions) {
        string lv_check;
        text lv_text;
        playergroup lv_playegroupShownMessage;
        // Actions
        if (!runActions) {
            return true;
        }
        

        if (gv_GameMode == "Versus") {
            lv_playegroupShownMessage = gv_probeGroupPlayer;
            if (EventPlayer() == gv_theThingPlayer) {lv_playegroupShownMessage = PlayerGroupAll();}
        }
        else {
            lv_playegroupShownMessage = PlayerGroupAll();
        }

        lv_check = StringSub(EventChatMessage(false), 1, 1);

        // if (StringLength(lv_check) <= 1) {return false;}

        if (lv_check != ":") {return false;}

        lv_text = StringToText(StringSub(EventChatMessage(false), 2, StringLength(EventChatMessage(false))));

        if (StringLength(TextToString(lv_text)) <= 1) {return false;}


        
        UIDisplayMessage(lv_playegroupShownMessage, c_messageAreaChat, TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))+StringToText(": ") + lv_text);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_mutedcommunication_Init () {
        gt_mutedcommunication = TriggerCreate("gt_mutedcommunication_Func");
        TriggerAddEventChatMessage(gt_mutedcommunication, c_playerAny, ":", false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Kill rocks (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxkillrocks_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        int lv_RockCount;
        unit lv_Rock;
        unitgroup lv_RockGroup;

        if (testConds) {
            if (!(gv_isadmin[EventPlayer()] || gv_GameMode == "SandBox")) {
                return false;
            }
        }

        if (!runActions) {
            return true;
        }

        lv_RockGroup = UnitGroup("DestructibleRock4x42", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_RockCount = UnitGroupCount(lv_RockGroup, c_unitCountAll);
        for (;; lv_RockCount -= 1) {
            lv_Rock = UnitGroupUnitFromEnd(lv_RockGroup, lv_RockCount);
            if (lv_Rock == null) { break; }
            UnitRemove(lv_Rock);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxkillrocks_Init () {
        gt_sandboxkillrocks = TriggerCreate("gt_sandboxkillrocks_Func");
        TriggerAddEventChatMessage(gt_sandboxkillrocks, c_playerAny, "-kill rocks", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Kill Minerals (Sandbox)
    //--------------------------------------------------------------------------------------------------
    bool gt_sandboxkillminerals_Func (bool testConds, bool runActions) {
        // Automatic Variable Declarations
        int lv_BlueMineralCount;
        unit lv_BlueMineral;
        unitgroup lv_BlueMineralGroup;

        int lv_VespeneOreCount;
        unit lv_VespeneOre;
        unitgroup lv_VespeneOreGroup;

        int lv_PlasmaOreCount;
        unit lv_PlasmaOre;
        unitgroup lv_PlasmaOreGroup;

        int lv_RedCrystalCount;
        unit lv_RedCrystal;
        unitgroup lv_RedCrystalGroup;

        if (testConds) {
            if (!(gv_isadmin[EventPlayer()] || gv_GameMode == "SandBox")) {
                return false;
            }
        }

        if (!runActions) {
            return true;
        }

        // Remove all Blue crystals
        lv_BlueMineralGroup = UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_BlueMineralCount = UnitGroupCount(lv_BlueMineralGroup, c_unitCountAll);
        for (;; lv_BlueMineralCount -= 1) {
            lv_BlueMineral = UnitGroupUnitFromEnd(lv_BlueMineralGroup, lv_BlueMineralCount);
            if (lv_BlueMineral == null) { break; }
            UnitRemove(lv_BlueMineral);
        }

        // Remove all Vespene (Green) crystals
        lv_VespeneOreGroup = UnitGroup("MineralField222", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_VespeneOreCount = UnitGroupCount(lv_VespeneOreGroup, c_unitCountAll);
        for (;; lv_VespeneOreCount -= 1) {
            lv_VespeneOre = UnitGroupUnitFromEnd(lv_VespeneOreGroup, lv_VespeneOreCount);
            if (lv_VespeneOre == null) { break; }
            UnitRemove(lv_VespeneOre);
        }

        // Remove all Plasma (Purple) crystals
        lv_PlasmaOreGroup = UnitGroup("MineralField22", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_PlasmaOreCount = UnitGroupCount(lv_PlasmaOreGroup, c_unitCountAll);
        for (;; lv_PlasmaOreCount -= 1) {
            lv_PlasmaOre = UnitGroupUnitFromEnd(lv_PlasmaOreGroup, lv_PlasmaOreCount);
            if (lv_PlasmaOre == null) { break; }
            UnitRemove(lv_PlasmaOre);
        }

        // Remove all Red crystals
        lv_RedCrystalGroup = UnitGroup("MineralField2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_RedCrystalCount = UnitGroupCount(lv_RedCrystalGroup, c_unitCountAll);
        for (;; lv_RedCrystalCount -= 1) {
            lv_RedCrystal = UnitGroupUnitFromEnd(lv_RedCrystalGroup, lv_RedCrystalCount);
            if (lv_RedCrystal == null) { break; }
            UnitRemove(lv_RedCrystal);
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_sandboxkillminerals_Init () {
        gt_sandboxkillminerals = TriggerCreate("gt_sandboxkillminerals_Func");
        TriggerAddEventChatMessage(gt_sandboxkillminerals, c_playerAny, "-kill minerals", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Wall Mastery 5 - Give Drone Charges Back (Recycle)
    //--------------------------------------------------------------------------------------------------
    bool gt_WallMastery5DroneCharges_Func (bool testConds, bool runActions) {
        // Variable Declarations
        unit lv_unit;

        // Variable Initialization
        lv_unit = EventUnit();

        // Conditions
        if (testConds) {
            if (UnitGetOwner(lv_unit) == 15) {
                return false;
            }

            if (UnitGetOwner(lv_unit) == 0) {
                return false;
            }

            if (!(
            (UnitGetType(lv_unit) == "DroneT1") 
            || (UnitGetType(lv_unit) == "DroneT2") 
            || (UnitGetType(lv_unit) == "DroneT3") 
            || (UnitGetType(lv_unit) == "DroneT4") 
            || (UnitGetType(lv_unit) == "DroneT5") 
            || (UnitGetType(lv_unit) == "DroneT6") 
            || (UnitGetType(lv_unit) == "AssaultDroneT1") 
            || (UnitGetType(lv_unit) == "AssaultDroneT2")
            || (UnitGetType(lv_unit) == "AssaultDroneT3")
            || (UnitGetType(lv_unit) == "AssaultDroneT4")
            || (UnitGetType(lv_unit) == "AssaultDroneT5")
            || (UnitGetType(lv_unit) == "AssaultDroneT6")
            || (UnitGetType(lv_unit) == "MatrixDroneT1")
            || (UnitGetType(lv_unit) == "MatrixDroneT2")
            || (UnitGetType(lv_unit) == "MatrixDroneT3")
            || (UnitGetType(lv_unit) == "MatrixDroneT4")
            || (UnitGetType(lv_unit) == "MatrixDroneT5")
            || (UnitGetType(lv_unit) == "MatrixDroneT6")
            || (UnitGetType(lv_unit) == "PointDefenseDrone")
            || (UnitGetType(lv_unit) == "PointDefenseDroneT2")
            || (UnitGetType(lv_unit) == "PointDefenseDroneT3")
            || (UnitGetType(lv_unit) == "PointDefenseDroneT4")
            || (UnitGetType(lv_unit) == "PointDefenseDroneT5")
            || (UnitGetType(lv_unit) == "PointDefenseDroneT6")
            || (UnitGetType(lv_unit) == "RepairDroneT1")
            || (UnitGetType(lv_unit) == "RepairDroneT2")
            || (UnitGetType(lv_unit) == "RepairDroneT3")
            || (UnitGetType(lv_unit) == "RepairDroneT4")
            || (UnitGetType(lv_unit) == "RepairDroneT5")
            || (UnitGetType(lv_unit) == "RepairDroneT6")
            || (UnitGetType(lv_unit) == "SeekerDroneT1")
            || (UnitGetType(lv_unit) == "SeekerDroneT2")
            || (UnitGetType(lv_unit) == "SeekerDroneT3")
            || (UnitGetType(lv_unit) == "SeekerDroneT4")
            || (UnitGetType(lv_unit) == "SeekerDroneT5")
            || (UnitGetType(lv_unit) == "SeekerDroneT6"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        PlayerAddChargeUsed(UnitGetOwner(lv_unit), "Abil/PlaceDrone", -1.0);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_WallMastery5DroneCharges_Init () {
        gt_WallMastery5DroneCharges = TriggerCreate("gt_WallMastery5DroneCharges_Func");
        TriggerAddEventUnitDied(gt_WallMastery5DroneCharges, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Bone Spawn (Custom Skin 1)
    //--------------------------------------------------------------------------------------------------
    bool gt_boneSpawn_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DestructibleRock4x42"))) {
                return false;
            }
            if (UnitCount("DestructibleRock4x42", c_playerAny, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

            if (libNtve_gf_KillingPlayer() == 0 || libNtve_gf_KillingPlayer() == 15 || libNtve_gf_KillingPlayer() == gv_theThingPlayer) {
                return false;
            }

        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (libNtve_gf_RandomPercent() <= 1.0) {
            if (libNtve_gf_RandomPercent() <= 5.0) {
                UnitCreate(1, "DefilerBoneSample", 0, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
                TriggerEnable(TriggerGetCurrent(), false);
            }
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_boneSpawn_Init () {
        gt_boneSpawn = TriggerCreate("gt_boneSpawn_Func");
        TriggerAddEventUnitDied(gt_boneSpawn, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Pickup Bones (Custom Skin 1)
    //--------------------------------------------------------------------------------------------------
    bool gt_PickupBones_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_player;

        // Variable Initialization
        lv_player = UnitGetOwner(EventUnitTargetUnit());

        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DefilerBoneSample"))) {
                return false;
            }
        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (lv_player == gv_theThingPlayer) {
            return false;
        }

        UnitKill(EventUnit());
        TextTagCreate((StringExternal("Param/Value/D76059E3") + StringExternal("DOCSTR_BoneSamples")), 28, UnitGetPosition(EventUnit()), 1.0, true, false, gv_probeGroupPlayer);
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(93.73, 57.65, 96.86));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        SoundPlay(SoundLink("UI_Achievement", -1), gv_probeGroupPlayer, 100.0, 0.0);
        UIDisplayMessage(gv_probeGroupPlayer, c_messageAreaSubtitle, (PlayerName(lv_player) + StringExternal("Param/Value/ED1B4B70")));
        TechTreeUpgradeAddLevel(lv_player, "BoneSamples", 1);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_PickupBones_Init () {
        gt_PickupBones = TriggerCreate("gt_PickupBones_Func");
        TriggerAddEventUnitAbility(gt_PickupBones, null, AbilityCommand("Pickup", 0), c_unitAbilStageExecute, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Godlisk Spawn Chance (Custom Skin 1)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance_Func (bool testConds, bool runActions) {
        // Variable Declarations
        int lv_player;

        // Variable Initialization

        // Conditions
        if (testConds) {

        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (gv_damageBonus < 30) {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }


        gv_customSkin1GodliskSpawn = true;
        gv_customSkin1GodliskSpawnDay = RandomInt(30, 34);
        Wait(3.0, c_timeGame);
        SoundPlay(SoundLink("Ultralisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance_Init () {
        gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance = TriggerCreate("gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance_Func");
        TriggerAddEventUnitAbility(gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance, null, AbilityCommand("BioWave", 0), c_unitAbilStageExecute, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Godlisk Spawn (Custom Skin 1)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin1UnlockmentbiowaveGodliskSpawn_Func (bool testConds, bool runActions) {
        unit lv_godlisk;
        // Conditions
        if (testConds) {

        }

        // Actions
        if (!runActions) {
            return true;
        }

        Wait(RandomFixed(10.0, 40.0), c_timeGame);
        UnitCreate(1, "Godlisk", 0, 15, RegionRandomPoint(RegionFromId(3)), libNtve_gf_RandomAngle());
        lv_godlisk = UnitLastCreated();
        UnitIssueOrder(lv_godlisk, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_GetFocusTargetUnit(lv_godlisk))), c_orderQueueReplace);
        gv_wallbar = lv_godlisk;
        TriggerEnable(gt_wallbarfocus, false);
        TriggerEnable(gt_actualisewallbar, true);
        libNtve_gf_SetBossBarBoss(1, lv_godlisk, true);
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ultralisk_mecha_portrait_static.dds", TextWithColor(StringToText("The Godlisk"), Color(255.0, 0.0, 0.0)), FixedToInt(UnitGetPropertyFixed(lv_godlisk, c_unitPropLifeMax, c_unitPropCurrent)), PlayerGroupAll());
        libNtve_gf_MoveBossBar(1, c_anchorTop, 0, 30);
        libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Zerg, true);
        libNtve_gf_SetBossBarCurrentValue(1, FixedToInt(UnitGetPropertyFixed(lv_godlisk, c_unitPropLife, c_unitPropCurrent)), true);
        libNtve_gf_ShowHideBossBar(true, 1);
        SoundPlay(SoundLink("Ultralisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextWithColor(StringToText("AN UNSTOPPABLE MONSTROUSITY INCOMING!"), Color(255.0, 0.0, 0.0)));
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
        }
        PlayerGroupLoopEnd();
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin1UnlockmentbiowaveGodliskSpawn_Init () {
        gt_CustomSkin1UnlockmentbiowaveGodliskSpawn = TriggerCreate("gt_CustomSkin1UnlockmentbiowaveGodliskSpawn_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Kill Godlisk (Custom Skin 1)
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin1Unlockment_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "Godlisk"))) {
                return false;
            }

        }

        // Actions
        if (!runActions) {
            return true;
        }

        TriggerEnable(gt_wallbarfocus, true);

        if (!gv_disableAchievements && (gv_GameMode == "Default")) {

            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[0].lv_bankStorageSection, gv_DonorCustomSkins[0].lv_bankStorageKey, true);
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
        
            }
            PlayerGroupLoopEnd();

        }

        TriggerEnable(gt_debugGodlisk, true);
        TriggerEnable(TriggerGetCurrent(), false);

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin1Unlockment_Init () {
        gt_CustomSkin1Unlockment = TriggerCreate("gt_CustomSkin1Unlockment_Func");
        TriggerAddEventUnitDied(gt_CustomSkin1Unlockment, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Kill all Rocks (Custom Skin 2) KataStrophe
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin2Unlockment_Func (bool testConds, bool runActions) {
        // Conditions
        if (testConds) {
            if (!((UnitGetType(EventUnit()) == "DestructibleRock4x42"))) {
                return false;
            }

            if (libNtve_gf_KillingPlayer() == 0 || libNtve_gf_KillingPlayer() == 15 || libNtve_gf_KillingPlayer() == gv_theThingPlayer) {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

            if (gv_dayNb >= 22) {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

            if (gv_GameMode != "Default") {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

        }

        // Actions
        if (!runActions) {
            return true;
        }

        if (UnitCount("DestructibleRock4x42", c_playerAny, RegionFromName("PlayableMap"), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) {
            // Check other conditions when all rocks killed
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        
                if (TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "PiercingSpark22", c_techCountQueuedOrBetter) < 40) {
                    TriggerEnable(TriggerGetCurrent(), false);
                    return false;

                }
            }
            PlayerGroupLoopEnd();

            
            // Give rewards when all conditions met
            PlayerGroupLoopBegin(gv_probeGroupPlayer);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        
                
                BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[1].lv_bankStorageSection, gv_DonorCustomSkins[1].lv_bankStorageKey, true);
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, StringToText("Custom Skin 2 unlocked")); 
                TriggerEnable(TriggerGetCurrent(), false);
        
            }
            PlayerGroupLoopEnd();
        }



        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin2Unlockment_Init () {
        gt_CustomSkin2Unlockment = TriggerCreate("gt_CustomSkin2Unlockment_Func");
        TriggerAddEventUnitDied(gt_CustomSkin2Unlockment, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skin 3 - Molten Corgi (By Emezer) time check
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin3Unlockment_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        if (testConds) {
            if (gv_GameMode != "Default") {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

            if (gv_difficulty != "Impossible") {
                return false;
            }
        }
        
        if (!UnitIsAlive(gv_overmind)) {
            return false;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {

            BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[2].lv_bankStorageSection, gv_DonorCustomSkins[2].lv_bankStorageKey, true);
            BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
            BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);

            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaChat, StringToText("Custom Skin 3 unlocked")); 

        }
        PlayerGroupLoopEnd();

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin3Unlockment_Init() {
        gt_CustomSkin3Unlockment = TriggerCreate("gt_CustomSkin3Unlockment_Func");
        TriggerAddEventTimeElapsed(gt_CustomSkin3Unlockment, 32400.0, c_timeGame);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skin 4 - Mortar Punisher (By BillyTheKid) kill counter check
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin4Unlockment_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }
        
        if (testConds) {
            if (gv_GameMode != "Default") {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }
        
            if (UnitGetType(EventUnit()) != "Leviathan") {
                return false;
            }
        
            if (UnitGetType(libNtve_gf_KillingUnit()) != "Archon") {
                return false;
            }
        }

        gv_customSkin4KillCounter[libNtve_gf_KillingPlayer()] += 1;

        if (gv_customSkin4KillCounter[libNtve_gf_KillingPlayer()] == 20) {

            BankValueSetFromFlag(gv_playerbanks[libNtve_gf_KillingPlayer()], gv_DonorCustomSkins[3].lv_bankStorageSection, gv_DonorCustomSkins[3].lv_bankStorageKey, true);
            UIDisplayMessage(PlayerGroupSingle(libNtve_gf_KillingPlayer()), c_messageAreaChat, StringToText("Custom Skin 4 unlocked"));
            BankOptionSet(gv_playerbanks[libNtve_gf_KillingPlayer()], c_bankOptionSignature, true);
            BankSave(gv_playerbanks[libNtve_gf_KillingPlayer()]);

        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin4Unlockment_Init() {
        gt_CustomSkin4Unlockment = TriggerCreate("gt_CustomSkin4Unlockment_Func");
        TriggerAddEventUnitDied(gt_CustomSkin4Unlockment, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skin 5 - Space Cow (By KraveBlaze) Check 1 laser / no robos
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin5Unlockment_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        if (testConds) {
            if (gv_GameMode != "Default") {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }
        
            if (gv_damageBonus < 20) {
                TriggerEnable(TriggerGetCurrent(), false);
                return false;
            }

            if (UnitGetType(EventUnitProgressUnit()) == "RoboticsBay"
            || UnitGetType(EventUnitProgressUnit()) == "RoboticsBay2"
            || UnitGetType(EventUnitProgressUnit()) == "RoboticsBay22"
            || UnitGetType(EventUnitProgressUnit()) == "RoboticsBay222"
            || UnitGetType(EventUnitProgressUnit()) == "RoboticsBay2222"
            || UnitGetType(EventUnitProgressUnit()) == "RoboticCannonFinalF") {
                TriggerEnable(TriggerGetCurrent(), false);
                return false; 
            }
        }

        if (UnitGetType(EventUnitProgressUnit()) == "DrakkenLaserDrill") {
            gv_customSkin5LaserCounter += 1;
        }

        if (gv_customSkin5LaserCounter > 1) {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin5Unlockment_Init() {
        gt_CustomSkin5Unlockment = TriggerCreate("gt_CustomSkin5Unlockment_Func");
        TriggerAddEventUnitConstructProgress(gt_CustomSkin5Unlockment, null, c_unitProgressStageStart);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skin 6 - Talon Crystalwing (By Philip_B) 
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin6Unlockment_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }
        if (testConds) {

        }


        if (gv_GameMode != "Default") {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }

        if (gv_nbJoueurs > 1) {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;  
        }

        if (gv_difficulty != "Hell") {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }

        if (gv_dayNb >= 28) {
            TriggerEnable(TriggerGetCurrent(), false);
            return false;
        }

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin6Unlockment_Init() {
        gt_CustomSkin6Unlockment = TriggerCreate("gt_CustomSkin6Unlockment_Func");
        // TriggerAddEventUnitDied(gt_CustomSkin6Unlockment, null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Custom Skin 7 - Imperius (By Dragonlord) Check donor level
    //--------------------------------------------------------------------------------------------------
    bool gt_CustomSkin7Unlockment_Func(bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
        return true;
        }

        PlayerGroupLoopBegin(gv_probeGroupPlayer);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {

            if (gv_DonateLevelPlayer[PlayerGroupLoopCurrent()] >= 6) {
                BankValueSetFromFlag(gv_playerbanks[PlayerGroupLoopCurrent()], gv_DonorCustomSkins[6].lv_bankStorageSection, gv_DonorCustomSkins[6].lv_bankStorageKey, true);
                BankOptionSet(gv_playerbanks[PlayerGroupLoopCurrent()], c_bankOptionSignature, true);
                BankSave(gv_playerbanks[PlayerGroupLoopCurrent()]);
            }

        }
        PlayerGroupLoopEnd();

        return true;
    }
    
    //--------------------------------------------------------------------------------------------------
    void gt_CustomSkin7Unlockment_Init() {
        gt_CustomSkin7Unlockment = TriggerCreate("gt_CustomSkin7Unlockment_Func");
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Wall Mastery 5 Unit Trackers
    //--------------------------------------------------------------------------------------------------
    bool gt_WallMastery5UnitTrackers_Func (bool testConds, bool runActions) {
        unit lv_wallUnit;
        unit lv_eventUnitCaster;
        unit lv_eventUnitCreated;
        // Actions
        if (!runActions) {
            return true;
        }

        lv_eventUnitCaster = EventUnit(); // OG Drone that morphs into better Drone
        lv_eventUnitCreated = EventUnitCreatedUnit(); // morphed version of Drone
        lv_wallUnit = UnitGroupUnit(UnitGetTrackedUnitGroup(lv_eventUnitCaster, "WallTracker"), 1); // OG Wall

        UnitCreateEffectUnit(lv_wallUnit, "AddDronetoDroneTracker", lv_eventUnitCreated);
        UnitCreateEffectUnit(lv_wallUnit, "AddWalltoWallTracker", lv_eventUnitCreated);
        // UnitCreateEffectUnit(lv_wallUnit, "DefenseDroneAK", lv_eventUnitCreated);

        // Debug messages
        // UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Event unit: ") + UnitGetName(lv_eventUnitCaster));
        // UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Wall: ") + UnitGetName(lv_wallUnit));
        // UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("Unit Created: ") + UnitGetName(EventUnitCreatedUnit()));

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_WallMastery5UnitTrackers_Init () {
        gt_WallMastery5UnitTrackers = TriggerCreate("gt_WallMastery5UnitTrackers_Func");
        // TriggerAddEventUnitAbility(gt_WallMastery5UnitTrackers, null, AbilityCommand("DroneModesTrain1", 0), c_unitAbilStageExecute, false);
        TriggerAddEventUnitCreated(gt_WallMastery5UnitTrackers, null, "DroneModesTrain1", null);
        TriggerAddEventUnitCreated(gt_WallMastery5UnitTrackers, null, "DroneModesTrain2", null);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Choose prestige level
    //--------------------------------------------------------------------------------------------------
    bool gt_choosePassivePrestigeLevel_Func (bool testConds, bool runActions) {
        int lv_int;
        // Actions
        if (!runActions) {
            return true;
        }

        lv_int = StringToInt(StringWord(EventChatMessage(false), 2));
        gv_passivePrestigeLevel[EventPlayer()] = lv_int;
        if (gv_passivePrestigeLevel[EventPlayer()] < 0) {
            gv_passivePrestigeLevel[EventPlayer()] = 0;
        }
        if (gv_passivePrestigeLevel[EventPlayer()] > 40) {
            gv_passivePrestigeLevel[EventPlayer()] = 40;
        }
        if (gv_passivePrestigeLevel[EventPlayer()] > BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR")) {
            if (!gv_isadmin[EventPlayer()]) {
                gv_passivePrestigeLevel[EventPlayer()] = BankValueGetAsInt(gv_playerbanks[EventPlayer()], "Sec", "PHR");
            }
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringToText("Prestige level adjusted"));
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_choosePassivePrestigeLevel_Init () {
        gt_choosePassivePrestigeLevel = TriggerCreate("gt_choosePassivePrestigeLevel_Func");
        TriggerAddEventChatMessage(gt_choosePassivePrestigeLevel, c_playerAny, "-prestige ", false);
        TriggerEnable(gt_choosePassivePrestigeLevel, false);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Wall Mastery 5 - Drone Capacity
    //--------------------------------------------------------------------------------------------------
    bool gt_droneCapacity_Func(bool testConds, bool runActions) {
        if (testConds) {
            if (!((libNtve_gf_TriggeringProgressUpgrade() == "DroneCapacity"))) {
                return false;
            }
        }
        // Actions
        if (!runActions) {
        return true;
        }

        PlayerAddChargeUsed(EventPlayer(), "Abil/PlaceDrone", -1.0);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_droneCapacity_Init() {
        gt_droneCapacity = TriggerCreate("gt_droneCapacity_Func");
        TriggerAddEventUnitResearchProgress(gt_droneCapacity, null, c_unitProgressStageComplete);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Debug Godlisk
    //--------------------------------------------------------------------------------------------------
    bool gt_debugGodlisk_Func(bool testConds, bool runActions) {
        unit lv_godlisk;
        // Actions
        if (!runActions) {
        return true;
        }

        if ( (PlayerHandle(EventPlayer()) == "2-S2-1-432065" && gv_GameMode == "SandBox") || PlayerHandle(EventPlayer()) == "2-S2-1-4620835" || PlayerHandle(EventPlayer()) == "2-S2-2-1796780" || GameIsTestMap(false)) {
            gv_disableAchievements = true;
            SoundPlay(SoundLink("Ultralisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(4.0, c_timeGame);

            UnitCreate(1, "Godlisk", 0, 15, RegionRandomPoint(RegionFromId(3)), libNtve_gf_RandomAngle());
            lv_godlisk = UnitLastCreated();
            UnitIssueOrder(lv_godlisk, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_GetFocusTargetUnit(lv_godlisk))), c_orderQueueReplace);
            gv_wallbar = lv_godlisk;
            TriggerEnable(gt_wallbarfocus, false);
            TriggerEnable(gt_actualisewallbar, true);
            libNtve_gf_SetBossBarBoss(1, lv_godlisk, true);
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ultralisk_mecha_portrait_static.dds", TextWithColor(StringToText("The Godlisk"), Color(255.0, 0.0, 0.0)), FixedToInt(UnitGetPropertyFixed(lv_godlisk, c_unitPropLifeMax, c_unitPropCurrent)), PlayerGroupAll());
            libNtve_gf_MoveBossBar(1, c_anchorTop, 0, 30);
            libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Zerg, true);
            libNtve_gf_SetBossBarCurrentValue(1, FixedToInt(UnitGetPropertyFixed(lv_godlisk, c_unitPropLife, c_unitPropCurrent)), true);
            libNtve_gf_ShowHideBossBar(true, 1);
            SoundPlay(SoundLink("Ultralisk_Roar2", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextWithColor(StringToText("AN UNSTOPPABLE MONSTROUSITY INCOMING!"), Color(255.0, 0.0, 0.0)));
            PlayerGroupLoopBegin(PlayerGroupActive());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 3.0);
            }
            PlayerGroupLoopEnd();
        }
        else {
            return false;
        }

        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_debugGodlisk_Init() {
        gt_debugGodlisk = TriggerCreate("gt_debugGodlisk_Func");
        TriggerAddEventChatMessage(gt_debugGodlisk, c_playerAny, "kill us all", true);
        TriggerAddEventChatMessage(gt_debugGodlisk, c_playerAny, "-debug godlisk", true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger: Unbuildable Portal Zone (automatically destroy player buildings)
    //--------------------------------------------------------------------------------------------------
    bool gt_unbuildableportalzone_Func (bool testConds, bool runActions) {
        // Actions
        if (!runActions) {
            return true;
        }
        if (UnitGetOwner(EventUnit()) == 0) {
            return false;
        }

        if (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure)) {
            UnitKill(EventUnit());
        }

        return true;
    }

    //--------------------------------------------------------------------------------------------------
    void gt_unbuildableportalzone_Init () {
        gt_unbuildableportalzone = TriggerCreate("gt_unbuildableportalzone_Func");
        TriggerAddEventUnitRegion(gt_unbuildableportalzone, null, RegionFromName("PortableZone1"), true);
        TriggerAddEventUnitRegion(gt_unbuildableportalzone, null, RegionFromName("PortableZone2"), true);
        TriggerAddEventUnitRegion(gt_unbuildableportalzone, null, RegionFromName("PortableZone3"), true);
    }

    //--------------------------------------------------------------------------------------------------
    // Trigger Initialization
    //--------------------------------------------------------------------------------------------------
    void InitTriggers () {
        gt_AdminMoney_Init();
        gt_swap_Init();
        gt_HealGens_Init();
        gt_AdminKick_Init();
        gt_Reveal_Init();
        gt_Creerboutonready_Init();
        gt_BoutonReadyDialogue_Init();
        gt_Init_Init();
        gt_BankInit_Init();
        gt_LevelsInitLifemC3A9fi_Init();
        gt_CustomisationSpecial_Init();
        gt_CustomisationColors_Init();
        gt_CustomisationSkills_Init();
        gt_CustomisationSkin_Init();
        gt_CustomisationPrestiges_Init();
        gt_CustomisationRoles_Init();
        gt_Dialogue_Init();
        gt_MapPropertygauche_Init();
        gt_CustomDialog_Init();
        gt_CustomSetLevel_Init();
        gt_CustomDialogClick_Init();
        gt_InitDialogue_Init();
        gt_DialogueChrono_Init();
        gt_GameStartchronoexpire_Init();
        gt_Creationdelacarte_Init();
        gt_Tableau_Init();
        gt_VarsInitettuto_Init();
        gt_StartGameprobesinit_Init();
        gt_Nightinfos_Init();
        gt_RefreshBoard_Init();
        gt_AddCore_Init();
        gt_RemCore_Init();
        gt_ZergInactif_Init();
        gt_Kerriganreborn_Init();
        gt_Zeratulevent_Init();
        gt_Zeratulmeurt_Init();
        gt_capitaineMutas1725_Init();
        gt_capitainezergs1225_Init();
        gt_capitainezergsfinal2635_Init();
        gt_Zergsattackrocks_Init();
        gt_ZergInvasion_Init();
        gt_ZergBoss_Init();
        gt_airsquadron29_Init();
        gt_LevelUpProbe_Init();
        gt_Leave_Init();
        gt_Deadprobe_Init();
        gt_Sellrecycle_Init();
        gt_Temps_Init();
        gt_FirstDay_Init();
        gt_StartDay_Init();
        gt_SwitchTime_Init();
        gt_InBase_Init();
        gt_InBase2_Init();
        gt_InBaseRocks_Init();
        gt_Probeseekerpointatt_Init();
        gt_RochecassC3A9e_Init();
        gt_InitdefvariablesTypeUnitC3A9sRessourcesRoche_Init();
        gt_RelicsXelNagaUpdate_Init();
        gt_Mineral_Init();
        gt_MineralrC3A9coltC3A9affichC3A9_Init();
        gt_Healminerals_Init();
        gt_WorldMarketMenuShow_Init();
        gt_WorldMarketMenuCreate_Init();
        gt_WorldMarketBuySell_Init();
        gt_emotekekw_Init();
        gt_emotebonk_Init();
        gt_emotecrycat_Init();
        gt_emotedoge_Init();
        gt_emotepepecool_Init();
        gt_emotemonkas_Init();
        gt_emotedontyell_Init();
        gt_emotedogegun_Init();
        gt_emotechad_Init();
        gt_emotepepeheart_Init();
        gt_emotepepenotes_Init();
        gt_emotepepekms_Init();
        gt_emotepeperee_Init();
        gt_emotepepesuit_Init();
        gt_Shareall_Init();
        gt_Share1_Init();
        gt_control_Init();
        gt_controloff_Init();
        gt_Shareoff_Init();
        gt_Builder1_Init();
        gt_Builderoff_Init();
        gt_Builder1each05sec_Init();
        gt_SolomodeDuplicate_Init();
        gt_Limitbuildings_Init();
        gt_win1NydustuC3A9_Init();
        gt_win2OvermindtuC3A9_Init();
        gt_Overmindsous50_Init();
        gt_AttaquealC3A9atoireovermind_Init();
        gt_Raffinerieauto_Init();
        gt_improveharvest2_Init();
        gt_improveharvest10_Init();
        gt_improveharvest20_Init();
        gt_improveharvest50_Init();
        gt_improveharvest100_Init();
        gt_improveharvest50shift_Init();
        gt_RefineryWorkingBlue_Init();
        gt_RefineryWorkingGreen_Init();
        gt_RefineryWorkingPlasma_Init();
        gt_RefineryWorkingRed_Init();
        gt_RefineryWorkingAll_Init();
        gt_RefineryWorkingNone_Init();
        gt_Cores_Init();
        gt_Fillgreencore_Init();
        gt_Fillbluecore_Init();
        gt_Fillredcore_Init();
        gt_Fillplasmacore_Init();
        gt_Fillgreatestcore_Init();
        gt_wallbarfocus_Init();
        gt_actualisewallbar_Init();
        gt_Autonomousgenerator_Init();
        gt__50000HPor50armorpoints_Init();
        gt__100Aresarmorpoints_Init();
        gt__1000Aresarmorpoints_Init();
        gt__25000HP_Init();
        gt_Damageincreased500_Init();
        gt_Damageincreased250_Init();
        gt_UpgradeGgenerators_Init();
        gt_UpgradeGhealers_Init();
        gt_UpgradeGcannons_Init();
        gt_Shieldabsorber5_Init();
        gt_Mysteriousbox_Init();
        gt_Releasinghiddenenergy_Init();
        gt_NuclearBOMB_Init();
        gt_YamatoBOMB_Init();
        gt_ImprovementFinalAA_Init();
        gt_Changecolor_Init();
        gt_ChronocrC3A9C3A9_Init();
        gt_Chronoeach1sec_Init();
        gt_estcliquC3A9_Init();
        gt_BossRandomizer_Init();
        gt_Ressourcespanelcreate_Init();
        gt_ChangerresspanelUI_Init();
        gt_Ressourceseach025sec_Init();
        gt_VOTEKICKshow_Init();
        gt_votekickCreate_Init();
        gt_votekickdialog_Init();
        gt_PlayerList_Init();
        gt_CreerVotedifficultymode_Init();
        gt_CreerVotemutatormode_Init();
        gt_VoteDifficultyModeDialog_Init();
        gt_VotemutatorModeDialog_Init();
        gt_Statuesinitcode_Init();
        gt_Statuesreset_Init();
        gt_Statues1234ok_Init();
        gt_StatuetouchC3A91_Init();
        gt_StatuetouchC3A92_Init();
        gt_StatuetouchC3A93_Init();
        gt_StatuetouchC3A94_Init();
        gt_Reset_Init();
        gt_Resettrue_Init();
        gt_CrazyMineralz_Init();
        gt_prestigebehaviors_Init();
        gt_AccumulativeReserves_Init();
        gt_CommandsZoom_Init();
        gt_admin_Init();
        gt_restore_Init();
        gt_bosspool_Init();
        gt_nightmaremutas_Init();
        lib1_gt_ShowHideSpecialEffects_Init();
        lib1_gt_InitiateHideGlobalEffectsVote_Init();
        lib1_gt_VoteButtons_Init();
        gt_maar36_Init();
        gt_timer36_Init();
        gt_Hallucinator_Init();
        gt_CoreInside_Init();
        gt_CoreInsideT1_Init();
        gt_CoreInsideT2_Init();
        gt_CoreInsideT3_Init();
        gt_CoreInsideT4_Init();
        gt_CoreInsideT5_Init();
        gt_CoreInsideSalvage_Init();
        gt_CrazyMineralzSwitch_Init();
        gt_sandboxgiverole_Init();
        gt_sandboxset_Init();
        gt_roledialog_Init();
        gt_roleplay_Init();
        gt_Damageincreased1000_Init();
        gt_100000HPor100armorpoints_Init();
        gt_commands_Init();
        gt_allin_Init();
        gt_sandboxdifficulty_Init();
        gt_sandboxSOS_Init();
        gt_setday_Init();
        gt_trademenushowimproved_Init();
        gt_TradeMenuCreateImproved_Init();
        gt_lobbyrole_Init();
        gt_lobbypickings_Init();
        gt_setplayers_Init();
        gt_XPCannons_Init();
        gt_cooldownSandbox_Init();
        gt_scvenhancer_Init();
        gt_zerglimit_Init();
        gt_TradeMenuImprovedClick_Init();
        gt_hybriddestroyerdead_Init();
        gt_ZergInvasionImpossible_Init();
        gt_banelingkamikaze_Init();
        gt_hybridnemesis_Init();
        gt_airsquadron29impossible_Init();
        gt_DNAPickupUpdate_Init();
        gt_DNAPickupUpdate2_Init();
        gt_HybridBehemothRage_Init();
        gt_godmodegodsandbox_Init();
        gt_godmodegodsandboxspawn_Init();
        gt_mutators_Init();
        gt_mutatorwheelofmisfortune_Init();
        gt_CustomisationMutators_Init();
        gt_mutatorsset_Init();
        gt_mutatorsentersregion_Init();
        gt_MutatorSeismicActivity_Init();
        gt_mutatorsentersregionplayers_Init();
        gt_mutatorssetWheelOfMisfortune_Init();
        gt_prestigelevelupgrades_Init();
        gt_addmutatorsandbox_Init();
        gt_versusteleporttonydus_Init();
        gt_versushybridminerals_Init();
        gt_DialogVersusChooseSide_Init();
        gt_DialogVersusChooseSideClick_Init();
        gt_TheThingDialogue_Init();
        gt_EvaluateSidesAndStart_Init();
        gt_spawnTheThing_Init();
        gt_EvolutionT2_Init();
        gt_EvolutionT3_Init();
        gt_EvolutionT4_Init();
        gt_EvolutionT5_Init();
        gt_EvolutionT6_Init();
        gt_EvolutionT7_Init();
        gt_VersusProbeWinThingiskilled_Init();
        gt_versuszergincome_Init();
        gt_Incomeincreasedused_Init();
        gt_versushybridrage_Init();
        gt_versusenablerage_Init();
        gt_versusmax500000hp_Init();
        gt_nydusregenerationused_Init();
        gt_versusmax500000shields_Init();
        gt_DialogueChronoVersusSide_Init();
        gt_infestedbuildings_Init();
        gt_infestedbuildingsspawn_Init();
        gt_mutatorsentersregionneutral_Init();
        gt_color_Init();
        gt_OxygenStationReplenishAB_Init();
        gt_AlienIncubationHP_Init();
        gt_EnableEmoteAgain_Init();
        gt_savezoom_Init();
        gt_autozoom_Init();
        gt_VersusZergUpgradesSelection_Init();
        gt_VersusZergUpgradesResearch_Init();
        gt_VersusZergEventsNightEnabled_Init();
        gt_VersusZergEventsNight_Init();
        gt_MapCreationInit_Init();
        gt_StatuesPortal_Init();
        gt_StatuesPortalActivated_Init();
        gt_PortalLeaveEnter1_Init();
        gt_PortalLeaveEnter2_Init();
        gt_PortalChainLeave_Init();
        gt_PortalLeaveOpportunity_Init();
        gt_PortalLeaveEnter3_Init();
        gt_DestroyPortalsEndEvent_Init();
        gt_VersusAutoTP_Init();
        gt_VersusZergEventsDay_Init();
        gt_VersusZergEventDaySpawnMineral_Init();
        gt_VersusZergEventNightBuff_Init();
        gt_VersusZergEventNightBuffExpire_Init();
        gt_VersusZergEventNightBuffEnterRegion_Init();
        gt_sandboxgiverelics_Init();
        gt_CustomSkins_Init();
        gt_SkinsDialog_Init();
        gt_CustomSkinsDialogClick_Init();
        gt_CustomSkinsSwapStart_Init();
        gt_CommandsDonatorHalo_Init();
        gt_DonatorsList_Init();
        gt_EventMutators_Init();
        gt_mutedcommunication_Init();
        gt_CustomSkinsInfo_Init();
        gt_boneSpawn_Init();
        gt_PickupBones_Init();
        gt_sandboxkillrocks_Init();
        gt_sandboxkillminerals_Init();
        gt_WallMastery5DroneCharges_Init();
        gt_WallMastery5UnitTrackers_Init();
        gt_CustomSkin1UnlockmentbiowaveGodliskSpawnChance_Init();
        gt_CustomSkin1UnlockmentbiowaveGodliskSpawn_Init();
        gt_CustomSkin1Unlockment_Init();
        gt_CustomSkin2Unlockment_Init();
        gt_CustomSkin3Unlockment_Init();
        gt_CustomSkin4Unlockment_Init();
        gt_CustomSkin5Unlockment_Init();
        gt_CustomSkin6Unlockment_Init();
        gt_CustomSkin7Unlockment_Init();
        gt_choosePassivePrestigeLevel_Init();
        gt_droneCapacity_Init();
        gt_debugGodlisk_Init();
        gt_unbuildableportalzone_Init();
    }

    //--------------------------------------------------------------------------------------------------
    // Library Initialization
    //--------------------------------------------------------------------------------------------------
    void InitLibs () {
        libNtve_InitLib();
    }

    //--------------------------------------------------------------------------------------------------
    // Map Initialization
    //--------------------------------------------------------------------------------------------------
    void InitMapX() {
        InitLibs();
        InitGlobals();
        InitTriggers();
    }
